
newLab.elf:     file format elf32-littlenios2
newLab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fd5c memsz 0x0000fd5c flags r-x
    LOAD off    0x00010d7c vaddr 0x0000fd7c paddr 0x00011868 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013354 vaddr 0x00013354 paddr 0x00013354 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f808  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000344  0000fa38  0000fa38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0000fd7c  00011868  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013354  00013354  00013354  2**2
                  ALLOC, SMALL_DATA
  6 .mem          00000000  000134b4  000134b4  00012868  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012868  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e98  00000000  00000000  00012890  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022b7d  00000000  00000000  00013728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008d83  00000000  00000000  000362a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b2a7  00000000  00000000  0003f028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000206c  00000000  00000000  0004a2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003805  00000000  00000000  0004c33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000176bb  00000000  00000000  0004fb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000671fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018b0  00000000  00000000  00067240  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ba82  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006ba85  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ba88  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ba89  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006ba8a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006ba93  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006ba9c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0006baa5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  0006baab  2**0
                  CONTENTS, READONLY
 26 .jdi          0000438b  00000000  00000000  0006bacf  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003d013  00000000  00000000  0006fe5a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000fa38 l    d  .rodata	00000000 .rodata
0000fd7c l    d  .rwdata	00000000 .rwdata
00013354 l    d  .bss	00000000 .bss
000134b4 l    d  .mem	00000000 .mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../newLab_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sem.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000faca l     O .rodata	00000010 zeroes.4404
00002874 l     F .text	000000bc __sbprintf
0000fada l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002a84 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000045dc l     F .text	00000008 __fp_unlock
000045f0 l     F .text	0000019c __sinit.part.1
0000478c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fd7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000101c0 l     O .rwdata	00000020 lc_ctype_charset
000101a0 l     O .rwdata	00000020 lc_message_charset
000101e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000fb0c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007c60 l     F .text	000000fc __sprint_r.part.0
0000fc30 l     O .rodata	00000010 zeroes.4349
0000929c l     F .text	000000bc __sbprintf
0000fc40 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d2e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000d420 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d44c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d540 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d628 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d714 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d8e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011858 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000db84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000dcc0 l     F .text	00000034 alt_dev_reg
000107c8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000dfb0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e1bc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e7f4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000eb8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ef2c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000f08c l     F .text	0000003c alt_get_errno
0000f0c8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013388 g     O .bss	00000004 alt_instruction_exception_handler
000072a4 g     F .text	00000074 _mprec_log10
00007390 g     F .text	0000008c __any_on
00009850 g     F .text	00000054 _isatty_r
0000fb18 g     O .rodata	00000028 __mprec_tinytens
0000d82c g     F .text	0000006c alt_main
00000410 g     F .text	000000c0 _puts_r
000133b4 g     O .bss	00000100 alt_irq
000098a4 g     F .text	00000060 _lseek_r
00011868 g       *ABS*	00000000 __flash_rwdata_start
0000bcbc g     F .text	00000088 .hidden __eqdf2
000134b4 g       *ABS*	00000000 __alt_heap_start
000003d4 g     F .text	0000003c printf
00009abc g     F .text	0000009c _wcrtomb_r
00007b20 g     F .text	0000005c __sseek
0000493c g     F .text	00000010 __sinit
00009964 g     F .text	00000140 __swbuf_r
00005410 g     F .text	0000007c _setlocale_r
00004794 g     F .text	00000078 __sfmoreglue
0000d8bc g     F .text	00000024 __malloc_unlock
0000fa38 g     O .rodata	00000010 divisors
000060e0 g     F .text	0000015c memmove
00004924 g     F .text	00000018 _cleanup
00006364 g     F .text	000000a8 _Balloc
0000bd44 g     F .text	000000dc .hidden __gtdf2
0000f4b4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000097f4 g     F .text	0000005c _fstat_r
0001336c g     O .bss	00000004 errno
00007a9c g     F .text	00000008 __seofread
00013374 g     O .bss	00000004 alt_argv
00019828 g       *ABS*	00000000 _gp
0000db54 g     F .text	00000030 usleep
00010648 g     O .rwdata	00000180 alt_fd_list
0000f4d8 g     F .text	00000090 alt_find_dev
00005f98 g     F .text	00000148 memcpy
000045e4 g     F .text	0000000c _cleanup_r
0000d0fc g     F .text	000000dc .hidden __floatsidf
0000f010 g     F .text	0000007c alt_io_redirect
0000be20 g     F .text	000000f4 .hidden __ltdf2
000004d0 g     F .text	00000014 puts
0000f734 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00007980 g     F .text	00000074 __fpclassifyd
00007200 g     F .text	000000a4 __ratio
00009280 g     F .text	0000001c __vfiprintf_internal
0000e3b4 g     F .text	0000021c altera_avalon_jtag_uart_read
000003a4 g     F .text	00000030 _printf_r
0000a95c g     F .text	00000064 .hidden __udivsi3
0000d57c g     F .text	000000ac isatty
0000fb68 g     O .rodata	000000c8 __mprec_tens
0000548c g     F .text	0000000c __locale_charset
00013368 g     O .bss	00000004 __malloc_top_pad
00011830 g     O .rwdata	00000004 __mb_cur_max
000054bc g     F .text	0000000c _localeconv_r
00006798 g     F .text	0000003c __i2b
00004dc0 g     F .text	000004c8 __sfvwrite_r
000079f4 g     F .text	00000054 _sbrk_r
00009904 g     F .text	00000060 _read_r
0000d3f8 g     F .text	00000028 alt_dcache_flush
00011850 g     O .rwdata	00000004 alt_max_fd
000094e8 g     F .text	000000f0 _fclose_r
000045ac g     F .text	00000030 fflush
00013364 g     O .bss	00000004 __malloc_max_sbrked_mem
0000aa40 g     F .text	000008ac .hidden __adddf3
00006fa8 g     F .text	0000010c __b2d
0000a2a0 g     F .text	000005c4 .hidden __umoddi3
0000d750 g     F .text	000000dc lseek
00011828 g     O .rwdata	00000004 _global_impure_ptr
0000741c g     F .text	00000564 _realloc_r
000134b4 g       *ABS*	00000000 __bss_end
0000ee3c g     F .text	000000f0 alt_iic_isr_register
0000f3ac g     F .text	00000108 alt_tick
00009ca4 g     F .text	000005fc .hidden __udivdi3
00009750 g     F .text	00000024 _fputwc_r
0000fb40 g     O .rodata	00000028 __mprec_bigtens
0000657c g     F .text	00000104 __s2b
0000d1d8 g     F .text	000000a8 .hidden __floatunsidf
00006ce8 g     F .text	00000060 __mcmp
0000495c g     F .text	00000018 __fp_lock_all
0000edf0 g     F .text	0000004c alt_ic_irq_enabled
00000000 g       *ABS*	00000000 __alt_mem_mem
0000f310 g     F .text	0000009c alt_alarm_stop
0001337c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00010620 g     O .rwdata	00000028 alt_dev_null
0000eb6c g     F .text	00000020 alt_dcache_flush_all
00006680 g     F .text	00000068 __hi0bits
0000d07c g     F .text	00000080 .hidden __fixdfsi
00011868 g       *ABS*	00000000 __ram_rwdata_end
00011848 g     O .rwdata	00000008 alt_dev_list
0000dbc0 g     F .text	00000100 write
0000fd7c g       *ABS*	00000000 __ram_rodata_end
0000d488 g     F .text	000000b8 fstat
0000be20 g     F .text	000000f4 .hidden __ledf2
00006a60 g     F .text	00000140 __pow5mult
00007d74 g     F .text	0000150c ___vfiprintf_internal_r
0001335c g     O .bss	00000004 __nlocale_changed
0000a9c0 g     F .text	00000058 .hidden __umodsi3
000134b4 g       *ABS*	00000000 end
0000def0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
0000e86c g     F .text	0000007c alt_avalon_timer_sc_init
0000d280 g     F .text	00000064 .hidden __clzsi2
0000e5d0 g     F .text	00000224 altera_avalon_jtag_uart_write
0000494c g     F .text	00000004 __sfp_lock_acquire
00005eb4 g     F .text	000000e4 memchr
0000057c g     F .text	000022dc ___vfprintf_internal_r
00004ab0 g     F .text	00000310 _free_r
00005498 g     F .text	00000010 __locale_mb_cur_max
0000f884 g     F .text	00000180 __call_exitprocs
00013358 g     O .bss	00000004 __mlocale_changed
00011834 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00013380 g     O .bss	00000004 _alt_tick_rate
00006ba0 g     F .text	00000148 __lshift
00013384 g     O .bss	00000004 _alt_nticks
0000d91c g     F .text	00000104 read
0000dd2c g     F .text	00000060 alt_sys_init
000067d4 g     F .text	0000028c __multiply
0000e25c g     F .text	00000068 altera_avalon_jtag_uart_close
0000aa18 g     F .text	00000028 .hidden __mulsi3
0000fd7c g       *ABS*	00000000 __ram_rwdata_start
0000fa38 g       *ABS*	00000000 __ram_rodata_start
0001338c g     O .bss	00000028 __malloc_current_mallinfo
000070b4 g     F .text	0000014c __d2b
0000dd8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f670 g     F .text	000000c4 alt_get_fd
0000ea14 g     F .text	00000158 alt_busy_sleep
000093b8 g     F .text	00000054 _close_r
0000f808 g     F .text	0000007c memcmp
0000de4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000134b4 g       *ABS*	00000000 __alt_stack_base
0000de9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002930 g     F .text	00000154 __swsetup_r
0000b2ec g     F .text	000009d0 .hidden __divdf3
0000480c g     F .text	00000118 __sfp
00007318 g     F .text	00000078 __copybits
00010218 g     O .rwdata	00000408 __malloc_av_
00004958 g     F .text	00000004 __sinit_lock_release
0000bf14 g     F .text	0000086c .hidden __muldf3
00007a48 g     F .text	00000054 __sread
0000f568 g     F .text	00000108 alt_find_file
0000ebc8 g     F .text	000000a4 alt_dev_llist_insert
0000d898 g     F .text	00000024 __malloc_lock
0000daa4 g     F .text	000000b0 sbrk
00004550 g     F .text	0000005c _fflush_r
0000940c g     F .text	000000dc _calloc_r
00013354 g       *ABS*	00000000 __bss_start
0000623c g     F .text	00000128 memset
0000026c g     F .text	00000138 main
00013378 g     O .bss	00000004 alt_envp
00013360 g     O .bss	00000004 __malloc_max_total_mem
0000ddec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009aa4 g     F .text	00000018 __swbuf
00007b7c g     F .text	00000008 __sclose
00020000 g       *ABS*	00000000 __alt_heap_limit
000095d8 g     F .text	00000014 fclose
00002cac g     F .text	00001688 _dtoa_r
000056a8 g     F .text	0000080c _malloc_r
00009c18 g     F .text	00000030 __ascii_wctomb
00011854 g     O .rwdata	00000004 alt_errno
00005288 g     F .text	000000c4 _fwalk
0000a864 g     F .text	00000084 .hidden __divsi3
0000498c g     F .text	00000124 _malloc_trim_r
00007b84 g     F .text	000000dc strcmp
0000fa38 g       *ABS*	00000000 __flash_rodata_start
0000bcbc g     F .text	00000088 .hidden __nedf2
0000dcf4 g     F .text	00000038 alt_irq_init
0000da20 g     F .text	00000084 alt_release_fd
0000fc50 g     O .rodata	00000100 .hidden __clz_tab
00013354 g     O .bss	00000004 _PathLocale
00009358 g     F .text	00000060 _write_r
000054c8 g     F .text	00000018 setlocale
0001182c g     O .rwdata	00000004 _impure_ptr
00013370 g     O .bss	00000004 alt_argc
00004334 g     F .text	0000021c __sflush_r
000054b4 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006f44 g     F .text	00000064 __ulp
00004974 g     F .text	00000018 __fp_unlock_all
00011840 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000054e0 g     F .text	0000000c localeconv
0000ec8c g     F .text	00000050 alt_ic_isr_register
00011868 g       *ABS*	00000000 _edata
000134b4 g       *ABS*	00000000 _end
000095ec g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000e2c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000ed64 g     F .text	0000008c alt_ic_irq_disable
00007aa4 g     F .text	0000007c __swrite
00011838 g     O .rwdata	00000004 __malloc_trim_threshold
000054a8 g     F .text	0000000c __locale_msgcharset
0000f7d0 g     F .text	00000038 exit
0000534c g     F .text	000000c4 _fwalk_reent
00006d48 g     F .text	000001fc __mdiff
0000a8e8 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004950 g     F .text	00000004 __sfp_lock_release
0000fa04 g     F .text	00000034 _exit
0000e8e8 g     F .text	0000012c alt_alarm_start
000054ec g     F .text	000001bc __smakebuf_r
000004e4 g     F .text	00000098 strlen
0000f1b4 g     F .text	0000015c open
0000bd44 g     F .text	000000dc .hidden __gedf2
0001183c g     O .rwdata	00000004 __wctomb
00007d5c g     F .text	00000018 __sprint_r
0000ec6c g     F .text	00000020 alt_icache_flush_all
0001185c g     O .rwdata	00000004 alt_priority_mask
0000ecdc g     F .text	00000088 alt_ic_irq_enable
00002858 g     F .text	0000001c __vfprintf_internal
00009c48 g     F .text	0000005c _wctomb_r
0000c780 g     F .text	000008fc .hidden __subdf3
000066e8 g     F .text	000000b0 __lo0bits
00011860 g     O .rwdata	00000008 alt_alarm_list
00009b58 g     F .text	000000c0 wcrtomb
0000d320 g     F .text	000000d8 close
0000d690 g     F .text	00000084 alt_load
00009774 g     F .text	00000080 fputwc
00004954 g     F .text	00000004 __sinit_lock_acquire
00006434 g     F .text	00000148 __multadd
0000640c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108ced04 	addi	r2,r2,13236
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108ced04 	addi	r2,r2,13236
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6d817 	ldw	r2,-25760(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6d817 	ldw	r2,-25760(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d6a60a14 	ori	gp,gp,38952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	108cd514 	ori	r2,r2,13140

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18cd2d14 	ori	r3,r3,13492

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000d6900 	call	d690 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000d82c0 	call	d82c <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe0268>

0000026c <main>:
		{150,250,200,10},
		{250,250,250,10}
};

int main()
{ 
     26c:	defff904 	addi	sp,sp,-28
     270:	dfc00615 	stw	ra,24(sp)
     274:	df000515 	stw	fp,20(sp)
     278:	df000504 	addi	fp,sp,20




	//program divisors
	p = (alt_u32*) SEM_RAM_SLAVE_BASE;
     27c:	008000b4 	movhi	r2,2
     280:	10840804 	addi	r2,r2,4128
     284:	e0bffe15 	stw	r2,-8(fp)
	for (i=0; i<TIME_SETS; i++)
     288:	e03ffc15 	stw	zero,-16(fp)
     28c:	00003506 	br	364 <main+0xf8>
	{
		tmp = 0;
     290:	e03fff15 	stw	zero,-4(fp)
		for (j=TIME_STATES; j>0; j--)
     294:	00800104 	movi	r2,4
     298:	e0bffd15 	stw	r2,-12(fp)
     29c:	00001c06 	br	310 <main+0xa4>
		{
			tmp = (tmp << 8) | divisors[i][j-1];
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	1008923a 	slli	r4,r2,8
     2a8:	e0bffd17 	ldw	r2,-12(fp)
     2ac:	117fffc4 	addi	r5,r2,-1
     2b0:	00800074 	movhi	r2,1
     2b4:	10be8e04 	addi	r2,r2,-1480
     2b8:	e0fffc17 	ldw	r3,-16(fp)
     2bc:	18c7883a 	add	r3,r3,r3
     2c0:	18c7883a 	add	r3,r3,r3
     2c4:	10c5883a 	add	r2,r2,r3
     2c8:	1145883a 	add	r2,r2,r5
     2cc:	10800003 	ldbu	r2,0(r2)
     2d0:	10803fcc 	andi	r2,r2,255
     2d4:	2084b03a 	or	r2,r4,r2
     2d8:	e0bfff15 	stw	r2,-4(fp)
			usleep(1);
     2dc:	01000044 	movi	r4,1
     2e0:	000db540 	call	db54 <usleep>
			printf("Load i=%d , j=%d , tmp = %d, *p = %d\n",i,j,tmp,p);
     2e4:	e0bffe17 	ldw	r2,-8(fp)
     2e8:	d8800015 	stw	r2,0(sp)
     2ec:	e1ffff17 	ldw	r7,-4(fp)
     2f0:	e1bffd17 	ldw	r6,-12(fp)
     2f4:	e17ffc17 	ldw	r5,-16(fp)
     2f8:	01000074 	movhi	r4,1
     2fc:	213e9204 	addi	r4,r4,-1464
     300:	00003d40 	call	3d4 <printf>
	//program divisors
	p = (alt_u32*) SEM_RAM_SLAVE_BASE;
	for (i=0; i<TIME_SETS; i++)
	{
		tmp = 0;
		for (j=TIME_STATES; j>0; j--)
     304:	e0bffd17 	ldw	r2,-12(fp)
     308:	10bfffc4 	addi	r2,r2,-1
     30c:	e0bffd15 	stw	r2,-12(fp)
     310:	e0bffd17 	ldw	r2,-12(fp)
     314:	00bfe216 	blt	zero,r2,2a0 <__alt_data_end+0xfffe02a0>
			tmp = (tmp << 8) | divisors[i][j-1];
			usleep(1);
			printf("Load i=%d , j=%d , tmp = %d, *p = %d\n",i,j,tmp,p);
		}

		*p=tmp;
     318:	e0bffe17 	ldw	r2,-8(fp)
     31c:	e0ffff17 	ldw	r3,-4(fp)
     320:	10c00015 	stw	r3,0(r2)
		p++;
     324:	e0bffe17 	ldw	r2,-8(fp)
     328:	10800104 	addi	r2,r2,4
     32c:	e0bffe15 	stw	r2,-8(fp)
		usleep(1);
     330:	01000044 	movi	r4,1
     334:	000db540 	call	db54 <usleep>
		printf("Load i=%d , j=%d , tmp = %d, *p = %d\n",i,j,tmp,p);
     338:	e0bffe17 	ldw	r2,-8(fp)
     33c:	d8800015 	stw	r2,0(sp)
     340:	e1ffff17 	ldw	r7,-4(fp)
     344:	e1bffd17 	ldw	r6,-12(fp)
     348:	e17ffc17 	ldw	r5,-16(fp)
     34c:	01000074 	movhi	r4,1
     350:	213e9204 	addi	r4,r4,-1464
     354:	00003d40 	call	3d4 <printf>



	//program divisors
	p = (alt_u32*) SEM_RAM_SLAVE_BASE;
	for (i=0; i<TIME_SETS; i++)
     358:	e0bffc17 	ldw	r2,-16(fp)
     35c:	10800044 	addi	r2,r2,1
     360:	e0bffc15 	stw	r2,-16(fp)
     364:	e0bffc17 	ldw	r2,-16(fp)
     368:	10800110 	cmplti	r2,r2,4
     36c:	103fc81e 	bne	r2,zero,290 <__alt_data_end+0xfffe0290>
		printf("Load i=%d , j=%d , tmp = %d, *p = %d\n",i,j,tmp,p);
		//nanosleep({0,6220},NULL);
	}
	//since we use pointers (cached data access) to write divisor RAM, 
	//and not direct i/o access with IOWR, we need to flush cache
	alt_dcache_flush();
     370:	000d3f80 	call	d3f8 <alt_dcache_flush>
	
	//select timeset and run semafor
	IOWR_ALTERA_AVALON_SEM_DIVSET(SEM_CTL_SLAVE_BASE,0x00);
     374:	0007883a 	mov	r3,zero
     378:	008000b4 	movhi	r2,2
     37c:	10840b04 	addi	r2,r2,4140
     380:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SEM_CTL(SEM_CTL_SLAVE_BASE,0x01);
     384:	00c00044 	movi	r3,1
     388:	008000b4 	movhi	r2,2
     38c:	10840a04 	addi	r2,r2,4136
     390:	10c00035 	stwio	r3,0(r2)

	printf("Ready compil 20new\n");
     394:	01000074 	movhi	r4,1
     398:	213e9c04 	addi	r4,r4,-1424
     39c:	00004d00 	call	4d0 <puts>

	while (1)
	{
		;
	}
     3a0:	003fff06 	br	3a0 <__alt_data_end+0xfffe03a0>

000003a4 <_printf_r>:
     3a4:	defffd04 	addi	sp,sp,-12
     3a8:	2805883a 	mov	r2,r5
     3ac:	dfc00015 	stw	ra,0(sp)
     3b0:	d9800115 	stw	r6,4(sp)
     3b4:	d9c00215 	stw	r7,8(sp)
     3b8:	21400217 	ldw	r5,8(r4)
     3bc:	d9c00104 	addi	r7,sp,4
     3c0:	100d883a 	mov	r6,r2
     3c4:	000057c0 	call	57c <___vfprintf_internal_r>
     3c8:	dfc00017 	ldw	ra,0(sp)
     3cc:	dec00304 	addi	sp,sp,12
     3d0:	f800283a 	ret

000003d4 <printf>:
     3d4:	defffc04 	addi	sp,sp,-16
     3d8:	dfc00015 	stw	ra,0(sp)
     3dc:	d9400115 	stw	r5,4(sp)
     3e0:	d9800215 	stw	r6,8(sp)
     3e4:	d9c00315 	stw	r7,12(sp)
     3e8:	00800074 	movhi	r2,1
     3ec:	10860b04 	addi	r2,r2,6188
     3f0:	10800017 	ldw	r2,0(r2)
     3f4:	200b883a 	mov	r5,r4
     3f8:	d9800104 	addi	r6,sp,4
     3fc:	11000217 	ldw	r4,8(r2)
     400:	00028580 	call	2858 <__vfprintf_internal>
     404:	dfc00017 	ldw	ra,0(sp)
     408:	dec00404 	addi	sp,sp,16
     40c:	f800283a 	ret

00000410 <_puts_r>:
     410:	defff604 	addi	sp,sp,-40
     414:	dc000715 	stw	r16,28(sp)
     418:	2021883a 	mov	r16,r4
     41c:	2809883a 	mov	r4,r5
     420:	dc400815 	stw	r17,32(sp)
     424:	dfc00915 	stw	ra,36(sp)
     428:	2823883a 	mov	r17,r5
     42c:	00004e40 	call	4e4 <strlen>
     430:	10c00044 	addi	r3,r2,1
     434:	d8800115 	stw	r2,4(sp)
     438:	00800074 	movhi	r2,1
     43c:	10bea104 	addi	r2,r2,-1404
     440:	d8800215 	stw	r2,8(sp)
     444:	00800044 	movi	r2,1
     448:	d8800315 	stw	r2,12(sp)
     44c:	00800084 	movi	r2,2
     450:	dc400015 	stw	r17,0(sp)
     454:	d8c00615 	stw	r3,24(sp)
     458:	dec00415 	stw	sp,16(sp)
     45c:	d8800515 	stw	r2,20(sp)
     460:	80000226 	beq	r16,zero,46c <_puts_r+0x5c>
     464:	80800e17 	ldw	r2,56(r16)
     468:	10001426 	beq	r2,zero,4bc <_puts_r+0xac>
     46c:	81400217 	ldw	r5,8(r16)
     470:	2880030b 	ldhu	r2,12(r5)
     474:	10c8000c 	andi	r3,r2,8192
     478:	1800061e 	bne	r3,zero,494 <_puts_r+0x84>
     47c:	29001917 	ldw	r4,100(r5)
     480:	00f7ffc4 	movi	r3,-8193
     484:	10880014 	ori	r2,r2,8192
     488:	20c6703a 	and	r3,r4,r3
     48c:	2880030d 	sth	r2,12(r5)
     490:	28c01915 	stw	r3,100(r5)
     494:	d9800404 	addi	r6,sp,16
     498:	8009883a 	mov	r4,r16
     49c:	0004dc00 	call	4dc0 <__sfvwrite_r>
     4a0:	1000091e 	bne	r2,zero,4c8 <_puts_r+0xb8>
     4a4:	00800284 	movi	r2,10
     4a8:	dfc00917 	ldw	ra,36(sp)
     4ac:	dc400817 	ldw	r17,32(sp)
     4b0:	dc000717 	ldw	r16,28(sp)
     4b4:	dec00a04 	addi	sp,sp,40
     4b8:	f800283a 	ret
     4bc:	8009883a 	mov	r4,r16
     4c0:	000493c0 	call	493c <__sinit>
     4c4:	003fe906 	br	46c <__alt_data_end+0xfffe046c>
     4c8:	00bfffc4 	movi	r2,-1
     4cc:	003ff606 	br	4a8 <__alt_data_end+0xfffe04a8>

000004d0 <puts>:
     4d0:	00800074 	movhi	r2,1
     4d4:	10860b04 	addi	r2,r2,6188
     4d8:	200b883a 	mov	r5,r4
     4dc:	11000017 	ldw	r4,0(r2)
     4e0:	00004101 	jmpi	410 <_puts_r>

000004e4 <strlen>:
     4e4:	208000cc 	andi	r2,r4,3
     4e8:	10002026 	beq	r2,zero,56c <strlen+0x88>
     4ec:	20800007 	ldb	r2,0(r4)
     4f0:	10002026 	beq	r2,zero,574 <strlen+0x90>
     4f4:	2005883a 	mov	r2,r4
     4f8:	00000206 	br	504 <strlen+0x20>
     4fc:	10c00007 	ldb	r3,0(r2)
     500:	18001826 	beq	r3,zero,564 <strlen+0x80>
     504:	10800044 	addi	r2,r2,1
     508:	10c000cc 	andi	r3,r2,3
     50c:	183ffb1e 	bne	r3,zero,4fc <__alt_data_end+0xfffe04fc>
     510:	10c00017 	ldw	r3,0(r2)
     514:	01ffbff4 	movhi	r7,65279
     518:	39ffbfc4 	addi	r7,r7,-257
     51c:	00ca303a 	nor	r5,zero,r3
     520:	01a02074 	movhi	r6,32897
     524:	19c7883a 	add	r3,r3,r7
     528:	31a02004 	addi	r6,r6,-32640
     52c:	1946703a 	and	r3,r3,r5
     530:	1986703a 	and	r3,r3,r6
     534:	1800091e 	bne	r3,zero,55c <strlen+0x78>
     538:	10800104 	addi	r2,r2,4
     53c:	10c00017 	ldw	r3,0(r2)
     540:	19cb883a 	add	r5,r3,r7
     544:	00c6303a 	nor	r3,zero,r3
     548:	28c6703a 	and	r3,r5,r3
     54c:	1986703a 	and	r3,r3,r6
     550:	183ff926 	beq	r3,zero,538 <__alt_data_end+0xfffe0538>
     554:	00000106 	br	55c <strlen+0x78>
     558:	10800044 	addi	r2,r2,1
     55c:	10c00007 	ldb	r3,0(r2)
     560:	183ffd1e 	bne	r3,zero,558 <__alt_data_end+0xfffe0558>
     564:	1105c83a 	sub	r2,r2,r4
     568:	f800283a 	ret
     56c:	2005883a 	mov	r2,r4
     570:	003fe706 	br	510 <__alt_data_end+0xfffe0510>
     574:	0005883a 	mov	r2,zero
     578:	f800283a 	ret

0000057c <___vfprintf_internal_r>:
     57c:	deffb804 	addi	sp,sp,-288
     580:	dfc04715 	stw	ra,284(sp)
     584:	ddc04515 	stw	r23,276(sp)
     588:	dd404315 	stw	r21,268(sp)
     58c:	d9002d15 	stw	r4,180(sp)
     590:	282f883a 	mov	r23,r5
     594:	302b883a 	mov	r21,r6
     598:	d9c02e15 	stw	r7,184(sp)
     59c:	df004615 	stw	fp,280(sp)
     5a0:	dd804415 	stw	r22,272(sp)
     5a4:	dd004215 	stw	r20,264(sp)
     5a8:	dcc04115 	stw	r19,260(sp)
     5ac:	dc804015 	stw	r18,256(sp)
     5b0:	dc403f15 	stw	r17,252(sp)
     5b4:	dc003e15 	stw	r16,248(sp)
     5b8:	00054bc0 	call	54bc <_localeconv_r>
     5bc:	10800017 	ldw	r2,0(r2)
     5c0:	1009883a 	mov	r4,r2
     5c4:	d8803415 	stw	r2,208(sp)
     5c8:	00004e40 	call	4e4 <strlen>
     5cc:	d8803715 	stw	r2,220(sp)
     5d0:	d8802d17 	ldw	r2,180(sp)
     5d4:	10000226 	beq	r2,zero,5e0 <___vfprintf_internal_r+0x64>
     5d8:	10800e17 	ldw	r2,56(r2)
     5dc:	1000fb26 	beq	r2,zero,9cc <___vfprintf_internal_r+0x450>
     5e0:	b880030b 	ldhu	r2,12(r23)
     5e4:	10c8000c 	andi	r3,r2,8192
     5e8:	1800061e 	bne	r3,zero,604 <___vfprintf_internal_r+0x88>
     5ec:	b9001917 	ldw	r4,100(r23)
     5f0:	00f7ffc4 	movi	r3,-8193
     5f4:	10880014 	ori	r2,r2,8192
     5f8:	20c6703a 	and	r3,r4,r3
     5fc:	b880030d 	sth	r2,12(r23)
     600:	b8c01915 	stw	r3,100(r23)
     604:	10c0020c 	andi	r3,r2,8
     608:	1800c326 	beq	r3,zero,918 <___vfprintf_internal_r+0x39c>
     60c:	b8c00417 	ldw	r3,16(r23)
     610:	1800c126 	beq	r3,zero,918 <___vfprintf_internal_r+0x39c>
     614:	1080068c 	andi	r2,r2,26
     618:	00c00284 	movi	r3,10
     61c:	10c0c626 	beq	r2,r3,938 <___vfprintf_internal_r+0x3bc>
     620:	d8c00404 	addi	r3,sp,16
     624:	05000074 	movhi	r20,1
     628:	d9001e04 	addi	r4,sp,120
     62c:	a53eb284 	addi	r20,r20,-1334
     630:	d8c01e15 	stw	r3,120(sp)
     634:	d8002015 	stw	zero,128(sp)
     638:	d8001f15 	stw	zero,124(sp)
     63c:	d8003315 	stw	zero,204(sp)
     640:	d8003615 	stw	zero,216(sp)
     644:	d8003815 	stw	zero,224(sp)
     648:	1811883a 	mov	r8,r3
     64c:	d8003915 	stw	zero,228(sp)
     650:	d8003a15 	stw	zero,232(sp)
     654:	d8002f15 	stw	zero,188(sp)
     658:	d9002815 	stw	r4,160(sp)
     65c:	a8800007 	ldb	r2,0(r21)
     660:	10028b26 	beq	r2,zero,1090 <___vfprintf_internal_r+0xb14>
     664:	00c00944 	movi	r3,37
     668:	a823883a 	mov	r17,r21
     66c:	10c0021e 	bne	r2,r3,678 <___vfprintf_internal_r+0xfc>
     670:	00001406 	br	6c4 <___vfprintf_internal_r+0x148>
     674:	10c00326 	beq	r2,r3,684 <___vfprintf_internal_r+0x108>
     678:	8c400044 	addi	r17,r17,1
     67c:	88800007 	ldb	r2,0(r17)
     680:	103ffc1e 	bne	r2,zero,674 <__alt_data_end+0xfffe0674>
     684:	8d61c83a 	sub	r16,r17,r21
     688:	80000e26 	beq	r16,zero,6c4 <___vfprintf_internal_r+0x148>
     68c:	d8c02017 	ldw	r3,128(sp)
     690:	d8801f17 	ldw	r2,124(sp)
     694:	45400015 	stw	r21,0(r8)
     698:	1c07883a 	add	r3,r3,r16
     69c:	10800044 	addi	r2,r2,1
     6a0:	d8c02015 	stw	r3,128(sp)
     6a4:	44000115 	stw	r16,4(r8)
     6a8:	d8801f15 	stw	r2,124(sp)
     6ac:	00c001c4 	movi	r3,7
     6b0:	1880a916 	blt	r3,r2,958 <___vfprintf_internal_r+0x3dc>
     6b4:	42000204 	addi	r8,r8,8
     6b8:	d9402f17 	ldw	r5,188(sp)
     6bc:	2c0b883a 	add	r5,r5,r16
     6c0:	d9402f15 	stw	r5,188(sp)
     6c4:	88800007 	ldb	r2,0(r17)
     6c8:	1000aa26 	beq	r2,zero,974 <___vfprintf_internal_r+0x3f8>
     6cc:	8d400044 	addi	r21,r17,1
     6d0:	8c400047 	ldb	r17,1(r17)
     6d4:	0021883a 	mov	r16,zero
     6d8:	00bfffc4 	movi	r2,-1
     6dc:	0025883a 	mov	r18,zero
     6e0:	dc002905 	stb	r16,164(sp)
     6e4:	d8002785 	stb	zero,158(sp)
     6e8:	d8002b05 	stb	zero,172(sp)
     6ec:	d8802a15 	stw	r2,168(sp)
     6f0:	d8003115 	stw	zero,196(sp)
     6f4:	04c01604 	movi	r19,88
     6f8:	05800244 	movi	r22,9
     6fc:	9021883a 	mov	r16,r18
     700:	4039883a 	mov	fp,r8
     704:	ad400044 	addi	r21,r21,1
     708:	88bff804 	addi	r2,r17,-32
     70c:	98833236 	bltu	r19,r2,13d8 <___vfprintf_internal_r+0xe5c>
     710:	100490ba 	slli	r2,r2,2
     714:	00c00034 	movhi	r3,0
     718:	18c1ca04 	addi	r3,r3,1832
     71c:	10c5883a 	add	r2,r2,r3
     720:	10800017 	ldw	r2,0(r2)
     724:	1000683a 	jmp	r2
     728:	000012d0 	cmplti	zero,zero,75
     72c:	000013d8 	cmpnei	zero,zero,79
     730:	000013d8 	cmpnei	zero,zero,79
     734:	000012f0 	cmpltui	zero,zero,75
     738:	000013d8 	cmpnei	zero,zero,79
     73c:	000013d8 	cmpnei	zero,zero,79
     740:	000013d8 	cmpnei	zero,zero,79
     744:	000013d8 	cmpnei	zero,zero,79
     748:	000013d8 	cmpnei	zero,zero,79
     74c:	000013d8 	cmpnei	zero,zero,79
     750:	000009d8 	cmpnei	zero,zero,39
     754:	000011e0 	cmpeqi	zero,zero,71
     758:	000013d8 	cmpnei	zero,zero,79
     75c:	0000089c 	xori	zero,zero,34
     760:	000009fc 	xorhi	zero,zero,39
     764:	000013d8 	cmpnei	zero,zero,79
     768:	00000a4c 	andi	zero,zero,41
     76c:	00000a58 	cmpnei	zero,zero,41
     770:	00000a58 	cmpnei	zero,zero,41
     774:	00000a58 	cmpnei	zero,zero,41
     778:	00000a58 	cmpnei	zero,zero,41
     77c:	00000a58 	cmpnei	zero,zero,41
     780:	00000a58 	cmpnei	zero,zero,41
     784:	00000a58 	cmpnei	zero,zero,41
     788:	00000a58 	cmpnei	zero,zero,41
     78c:	00000a58 	cmpnei	zero,zero,41
     790:	000013d8 	cmpnei	zero,zero,79
     794:	000013d8 	cmpnei	zero,zero,79
     798:	000013d8 	cmpnei	zero,zero,79
     79c:	000013d8 	cmpnei	zero,zero,79
     7a0:	000013d8 	cmpnei	zero,zero,79
     7a4:	000013d8 	cmpnei	zero,zero,79
     7a8:	000013d8 	cmpnei	zero,zero,79
     7ac:	000013d8 	cmpnei	zero,zero,79
     7b0:	000013d8 	cmpnei	zero,zero,79
     7b4:	000013d8 	cmpnei	zero,zero,79
     7b8:	00000a94 	movui	zero,42
     7bc:	00000b5c 	xori	zero,zero,45
     7c0:	000013d8 	cmpnei	zero,zero,79
     7c4:	00000b5c 	xori	zero,zero,45
     7c8:	000013d8 	cmpnei	zero,zero,79
     7cc:	000013d8 	cmpnei	zero,zero,79
     7d0:	000013d8 	cmpnei	zero,zero,79
     7d4:	000013d8 	cmpnei	zero,zero,79
     7d8:	00000c08 	cmpgei	zero,zero,48
     7dc:	000013d8 	cmpnei	zero,zero,79
     7e0:	000013d8 	cmpnei	zero,zero,79
     7e4:	00000c14 	movui	zero,48
     7e8:	000013d8 	cmpnei	zero,zero,79
     7ec:	000013d8 	cmpnei	zero,zero,79
     7f0:	000013d8 	cmpnei	zero,zero,79
     7f4:	000013d8 	cmpnei	zero,zero,79
     7f8:	000013d8 	cmpnei	zero,zero,79
     7fc:	00001098 	cmpnei	zero,zero,66
     800:	000013d8 	cmpnei	zero,zero,79
     804:	000013d8 	cmpnei	zero,zero,79
     808:	00001104 	movi	zero,68
     80c:	000013d8 	cmpnei	zero,zero,79
     810:	000013d8 	cmpnei	zero,zero,79
     814:	000013d8 	cmpnei	zero,zero,79
     818:	000013d8 	cmpnei	zero,zero,79
     81c:	000013d8 	cmpnei	zero,zero,79
     820:	000013d8 	cmpnei	zero,zero,79
     824:	000013d8 	cmpnei	zero,zero,79
     828:	000013d8 	cmpnei	zero,zero,79
     82c:	000013d8 	cmpnei	zero,zero,79
     830:	000013d8 	cmpnei	zero,zero,79
     834:	0000137c 	xorhi	zero,zero,77
     838:	000012fc 	xorhi	zero,zero,75
     83c:	00000b5c 	xori	zero,zero,45
     840:	00000b5c 	xori	zero,zero,45
     844:	00000b5c 	xori	zero,zero,45
     848:	0000131c 	xori	zero,zero,76
     84c:	000012fc 	xorhi	zero,zero,75
     850:	000013d8 	cmpnei	zero,zero,79
     854:	000013d8 	cmpnei	zero,zero,79
     858:	00001328 	cmpgeui	zero,zero,76
     85c:	000013d8 	cmpnei	zero,zero,79
     860:	0000133c 	xorhi	zero,zero,76
     864:	000011c0 	call	11c <alt_irq_handler+0x20>
     868:	000008a8 	cmpgeui	zero,zero,34
     86c:	000011f8 	rdprs	zero,zero,71
     870:	000013d8 	cmpnei	zero,zero,79
     874:	00001204 	movi	zero,72
     878:	000013d8 	cmpnei	zero,zero,79
     87c:	00001268 	cmpgeui	zero,zero,73
     880:	000013d8 	cmpnei	zero,zero,79
     884:	000013d8 	cmpnei	zero,zero,79
     888:	00001288 	cmpgei	zero,zero,74
     88c:	d8c03117 	ldw	r3,196(sp)
     890:	d8802e15 	stw	r2,184(sp)
     894:	00c7c83a 	sub	r3,zero,r3
     898:	d8c03115 	stw	r3,196(sp)
     89c:	84000114 	ori	r16,r16,4
     8a0:	ac400007 	ldb	r17,0(r21)
     8a4:	003f9706 	br	704 <__alt_data_end+0xfffe0704>
     8a8:	00800c04 	movi	r2,48
     8ac:	d8802705 	stb	r2,156(sp)
     8b0:	00801e04 	movi	r2,120
     8b4:	d8802745 	stb	r2,157(sp)
     8b8:	d9002a17 	ldw	r4,168(sp)
     8bc:	d8802e17 	ldw	r2,184(sp)
     8c0:	d8002785 	stb	zero,158(sp)
     8c4:	e011883a 	mov	r8,fp
     8c8:	10c00104 	addi	r3,r2,4
     8cc:	14c00017 	ldw	r19,0(r2)
     8d0:	002d883a 	mov	r22,zero
     8d4:	80800094 	ori	r2,r16,2
     8d8:	2002ca16 	blt	r4,zero,1404 <___vfprintf_internal_r+0xe88>
     8dc:	00bfdfc4 	movi	r2,-129
     8e0:	80a4703a 	and	r18,r16,r2
     8e4:	d8c02e15 	stw	r3,184(sp)
     8e8:	94800094 	ori	r18,r18,2
     8ec:	9802b41e 	bne	r19,zero,13c0 <___vfprintf_internal_r+0xe44>
     8f0:	01400074 	movhi	r5,1
     8f4:	297eab04 	addi	r5,r5,-1364
     8f8:	d9403915 	stw	r5,228(sp)
     8fc:	04401e04 	movi	r17,120
     900:	d8802a17 	ldw	r2,168(sp)
     904:	0039883a 	mov	fp,zero
     908:	1001fa26 	beq	r2,zero,10f4 <___vfprintf_internal_r+0xb78>
     90c:	0027883a 	mov	r19,zero
     910:	002d883a 	mov	r22,zero
     914:	00021906 	br	117c <___vfprintf_internal_r+0xc00>
     918:	d9002d17 	ldw	r4,180(sp)
     91c:	b80b883a 	mov	r5,r23
     920:	00029300 	call	2930 <__swsetup_r>
     924:	1005dc1e 	bne	r2,zero,2098 <___vfprintf_internal_r+0x1b1c>
     928:	b880030b 	ldhu	r2,12(r23)
     92c:	00c00284 	movi	r3,10
     930:	1080068c 	andi	r2,r2,26
     934:	10ff3a1e 	bne	r2,r3,620 <__alt_data_end+0xfffe0620>
     938:	b880038f 	ldh	r2,14(r23)
     93c:	103f3816 	blt	r2,zero,620 <__alt_data_end+0xfffe0620>
     940:	d9c02e17 	ldw	r7,184(sp)
     944:	d9002d17 	ldw	r4,180(sp)
     948:	a80d883a 	mov	r6,r21
     94c:	b80b883a 	mov	r5,r23
     950:	00028740 	call	2874 <__sbprintf>
     954:	00001106 	br	99c <___vfprintf_internal_r+0x420>
     958:	d9002d17 	ldw	r4,180(sp)
     95c:	d9801e04 	addi	r6,sp,120
     960:	b80b883a 	mov	r5,r23
     964:	0007d5c0 	call	7d5c <__sprint_r>
     968:	1000081e 	bne	r2,zero,98c <___vfprintf_internal_r+0x410>
     96c:	da000404 	addi	r8,sp,16
     970:	003f5106 	br	6b8 <__alt_data_end+0xfffe06b8>
     974:	d8802017 	ldw	r2,128(sp)
     978:	10000426 	beq	r2,zero,98c <___vfprintf_internal_r+0x410>
     97c:	d9002d17 	ldw	r4,180(sp)
     980:	d9801e04 	addi	r6,sp,120
     984:	b80b883a 	mov	r5,r23
     988:	0007d5c0 	call	7d5c <__sprint_r>
     98c:	b880030b 	ldhu	r2,12(r23)
     990:	1080100c 	andi	r2,r2,64
     994:	1005c01e 	bne	r2,zero,2098 <___vfprintf_internal_r+0x1b1c>
     998:	d8802f17 	ldw	r2,188(sp)
     99c:	dfc04717 	ldw	ra,284(sp)
     9a0:	df004617 	ldw	fp,280(sp)
     9a4:	ddc04517 	ldw	r23,276(sp)
     9a8:	dd804417 	ldw	r22,272(sp)
     9ac:	dd404317 	ldw	r21,268(sp)
     9b0:	dd004217 	ldw	r20,264(sp)
     9b4:	dcc04117 	ldw	r19,260(sp)
     9b8:	dc804017 	ldw	r18,256(sp)
     9bc:	dc403f17 	ldw	r17,252(sp)
     9c0:	dc003e17 	ldw	r16,248(sp)
     9c4:	dec04804 	addi	sp,sp,288
     9c8:	f800283a 	ret
     9cc:	d9002d17 	ldw	r4,180(sp)
     9d0:	000493c0 	call	493c <__sinit>
     9d4:	003f0206 	br	5e0 <__alt_data_end+0xfffe05e0>
     9d8:	d9002e17 	ldw	r4,184(sp)
     9dc:	d9402e17 	ldw	r5,184(sp)
     9e0:	21000017 	ldw	r4,0(r4)
     9e4:	28800104 	addi	r2,r5,4
     9e8:	d9003115 	stw	r4,196(sp)
     9ec:	203fa716 	blt	r4,zero,88c <__alt_data_end+0xfffe088c>
     9f0:	d8802e15 	stw	r2,184(sp)
     9f4:	ac400007 	ldb	r17,0(r21)
     9f8:	003f4206 	br	704 <__alt_data_end+0xfffe0704>
     9fc:	ac400007 	ldb	r17,0(r21)
     a00:	01000a84 	movi	r4,42
     a04:	a8c00044 	addi	r3,r21,1
     a08:	89075826 	beq	r17,r4,276c <___vfprintf_internal_r+0x21f0>
     a0c:	8cbff404 	addi	r18,r17,-48
     a10:	b486ae36 	bltu	r22,r18,24cc <___vfprintf_internal_r+0x1f50>
     a14:	0009883a 	mov	r4,zero
     a18:	1823883a 	mov	r17,r3
     a1c:	01400284 	movi	r5,10
     a20:	000aa180 	call	aa18 <__mulsi3>
     a24:	88c00007 	ldb	r3,0(r17)
     a28:	1489883a 	add	r4,r2,r18
     a2c:	8d400044 	addi	r21,r17,1
     a30:	1cbff404 	addi	r18,r3,-48
     a34:	a823883a 	mov	r17,r21
     a38:	b4bff82e 	bgeu	r22,r18,a1c <__alt_data_end+0xfffe0a1c>
     a3c:	1823883a 	mov	r17,r3
     a40:	2005f616 	blt	r4,zero,221c <___vfprintf_internal_r+0x1ca0>
     a44:	d9002a15 	stw	r4,168(sp)
     a48:	003f2f06 	br	708 <__alt_data_end+0xfffe0708>
     a4c:	84002014 	ori	r16,r16,128
     a50:	ac400007 	ldb	r17,0(r21)
     a54:	003f2b06 	br	704 <__alt_data_end+0xfffe0704>
     a58:	8cbff404 	addi	r18,r17,-48
     a5c:	d8003115 	stw	zero,196(sp)
     a60:	0009883a 	mov	r4,zero
     a64:	a823883a 	mov	r17,r21
     a68:	01400284 	movi	r5,10
     a6c:	000aa180 	call	aa18 <__mulsi3>
     a70:	88c00007 	ldb	r3,0(r17)
     a74:	9089883a 	add	r4,r18,r2
     a78:	ad400044 	addi	r21,r21,1
     a7c:	1cbff404 	addi	r18,r3,-48
     a80:	a823883a 	mov	r17,r21
     a84:	b4bff82e 	bgeu	r22,r18,a68 <__alt_data_end+0xfffe0a68>
     a88:	1823883a 	mov	r17,r3
     a8c:	d9003115 	stw	r4,196(sp)
     a90:	003f1d06 	br	708 <__alt_data_end+0xfffe0708>
     a94:	8025883a 	mov	r18,r16
     a98:	dc002903 	ldbu	r16,164(sp)
     a9c:	e011883a 	mov	r8,fp
     aa0:	84003fcc 	andi	r16,r16,255
     aa4:	8007531e 	bne	r16,zero,27f4 <___vfprintf_internal_r+0x2278>
     aa8:	94800414 	ori	r18,r18,16
     aac:	9080080c 	andi	r2,r18,32
     ab0:	1003a326 	beq	r2,zero,1940 <___vfprintf_internal_r+0x13c4>
     ab4:	d9002e17 	ldw	r4,184(sp)
     ab8:	20800117 	ldw	r2,4(r4)
     abc:	24c00017 	ldw	r19,0(r4)
     ac0:	21000204 	addi	r4,r4,8
     ac4:	d9002e15 	stw	r4,184(sp)
     ac8:	102d883a 	mov	r22,r2
     acc:	10047316 	blt	r2,zero,1c9c <___vfprintf_internal_r+0x1720>
     ad0:	d9002a17 	ldw	r4,168(sp)
     ad4:	df002783 	ldbu	fp,158(sp)
     ad8:	2003e416 	blt	r4,zero,1a6c <___vfprintf_internal_r+0x14f0>
     adc:	00ffdfc4 	movi	r3,-129
     ae0:	9d84b03a 	or	r2,r19,r22
     ae4:	90e4703a 	and	r18,r18,r3
     ae8:	10018026 	beq	r2,zero,10ec <___vfprintf_internal_r+0xb70>
     aec:	b003ab26 	beq	r22,zero,199c <___vfprintf_internal_r+0x1420>
     af0:	dc402915 	stw	r17,164(sp)
     af4:	dc001e04 	addi	r16,sp,120
     af8:	b023883a 	mov	r17,r22
     afc:	402d883a 	mov	r22,r8
     b00:	9809883a 	mov	r4,r19
     b04:	880b883a 	mov	r5,r17
     b08:	01800284 	movi	r6,10
     b0c:	000f883a 	mov	r7,zero
     b10:	000a2a00 	call	a2a0 <__umoddi3>
     b14:	10800c04 	addi	r2,r2,48
     b18:	843fffc4 	addi	r16,r16,-1
     b1c:	9809883a 	mov	r4,r19
     b20:	880b883a 	mov	r5,r17
     b24:	80800005 	stb	r2,0(r16)
     b28:	01800284 	movi	r6,10
     b2c:	000f883a 	mov	r7,zero
     b30:	0009ca40 	call	9ca4 <__udivdi3>
     b34:	1027883a 	mov	r19,r2
     b38:	10c4b03a 	or	r2,r2,r3
     b3c:	1823883a 	mov	r17,r3
     b40:	103fef1e 	bne	r2,zero,b00 <__alt_data_end+0xfffe0b00>
     b44:	d8c02817 	ldw	r3,160(sp)
     b48:	dc402917 	ldw	r17,164(sp)
     b4c:	b011883a 	mov	r8,r22
     b50:	1c07c83a 	sub	r3,r3,r16
     b54:	d8c02b15 	stw	r3,172(sp)
     b58:	00005f06 	br	cd8 <___vfprintf_internal_r+0x75c>
     b5c:	8025883a 	mov	r18,r16
     b60:	dc002903 	ldbu	r16,164(sp)
     b64:	e011883a 	mov	r8,fp
     b68:	84003fcc 	andi	r16,r16,255
     b6c:	80071e1e 	bne	r16,zero,27e8 <___vfprintf_internal_r+0x226c>
     b70:	9080020c 	andi	r2,r18,8
     b74:	1004af26 	beq	r2,zero,1e34 <___vfprintf_internal_r+0x18b8>
     b78:	d9002e17 	ldw	r4,184(sp)
     b7c:	d9402e17 	ldw	r5,184(sp)
     b80:	d8802e17 	ldw	r2,184(sp)
     b84:	21000017 	ldw	r4,0(r4)
     b88:	29400117 	ldw	r5,4(r5)
     b8c:	10800204 	addi	r2,r2,8
     b90:	d9003615 	stw	r4,216(sp)
     b94:	d9403815 	stw	r5,224(sp)
     b98:	d8802e15 	stw	r2,184(sp)
     b9c:	d9003617 	ldw	r4,216(sp)
     ba0:	d9403817 	ldw	r5,224(sp)
     ba4:	da003d15 	stw	r8,244(sp)
     ba8:	04000044 	movi	r16,1
     bac:	00079800 	call	7980 <__fpclassifyd>
     bb0:	da003d17 	ldw	r8,244(sp)
     bb4:	1404441e 	bne	r2,r16,1cc8 <___vfprintf_internal_r+0x174c>
     bb8:	d9003617 	ldw	r4,216(sp)
     bbc:	d9403817 	ldw	r5,224(sp)
     bc0:	000d883a 	mov	r6,zero
     bc4:	000f883a 	mov	r7,zero
     bc8:	000be200 	call	be20 <__ledf2>
     bcc:	da003d17 	ldw	r8,244(sp)
     bd0:	1005e316 	blt	r2,zero,2360 <___vfprintf_internal_r+0x1de4>
     bd4:	df002783 	ldbu	fp,158(sp)
     bd8:	008011c4 	movi	r2,71
     bdc:	1445580e 	bge	r2,r17,2140 <___vfprintf_internal_r+0x1bc4>
     be0:	04000074 	movhi	r16,1
     be4:	843ea304 	addi	r16,r16,-1396
     be8:	00c000c4 	movi	r3,3
     bec:	00bfdfc4 	movi	r2,-129
     bf0:	d8c02915 	stw	r3,164(sp)
     bf4:	90a4703a 	and	r18,r18,r2
     bf8:	d8c02b15 	stw	r3,172(sp)
     bfc:	d8002a15 	stw	zero,168(sp)
     c00:	d8003215 	stw	zero,200(sp)
     c04:	00003a06 	br	cf0 <___vfprintf_internal_r+0x774>
     c08:	84000214 	ori	r16,r16,8
     c0c:	ac400007 	ldb	r17,0(r21)
     c10:	003ebc06 	br	704 <__alt_data_end+0xfffe0704>
     c14:	8025883a 	mov	r18,r16
     c18:	dc002903 	ldbu	r16,164(sp)
     c1c:	e011883a 	mov	r8,fp
     c20:	84003fcc 	andi	r16,r16,255
     c24:	8007001e 	bne	r16,zero,2828 <___vfprintf_internal_r+0x22ac>
     c28:	94800414 	ori	r18,r18,16
     c2c:	9080080c 	andi	r2,r18,32
     c30:	1002fa26 	beq	r2,zero,181c <___vfprintf_internal_r+0x12a0>
     c34:	d9002e17 	ldw	r4,184(sp)
     c38:	d9402a17 	ldw	r5,168(sp)
     c3c:	d8002785 	stb	zero,158(sp)
     c40:	20800204 	addi	r2,r4,8
     c44:	24c00017 	ldw	r19,0(r4)
     c48:	25800117 	ldw	r22,4(r4)
     c4c:	2804b116 	blt	r5,zero,1f14 <___vfprintf_internal_r+0x1998>
     c50:	013fdfc4 	movi	r4,-129
     c54:	9d86b03a 	or	r3,r19,r22
     c58:	d8802e15 	stw	r2,184(sp)
     c5c:	9124703a 	and	r18,r18,r4
     c60:	1802fb1e 	bne	r3,zero,1850 <___vfprintf_internal_r+0x12d4>
     c64:	d8c02a17 	ldw	r3,168(sp)
     c68:	0039883a 	mov	fp,zero
     c6c:	1805e526 	beq	r3,zero,2404 <___vfprintf_internal_r+0x1e88>
     c70:	0027883a 	mov	r19,zero
     c74:	002d883a 	mov	r22,zero
     c78:	dc001e04 	addi	r16,sp,120
     c7c:	9806d0fa 	srli	r3,r19,3
     c80:	b008977a 	slli	r4,r22,29
     c84:	b02cd0fa 	srli	r22,r22,3
     c88:	9cc001cc 	andi	r19,r19,7
     c8c:	98800c04 	addi	r2,r19,48
     c90:	843fffc4 	addi	r16,r16,-1
     c94:	20e6b03a 	or	r19,r4,r3
     c98:	80800005 	stb	r2,0(r16)
     c9c:	9d86b03a 	or	r3,r19,r22
     ca0:	183ff61e 	bne	r3,zero,c7c <__alt_data_end+0xfffe0c7c>
     ca4:	90c0004c 	andi	r3,r18,1
     ca8:	18014126 	beq	r3,zero,11b0 <___vfprintf_internal_r+0xc34>
     cac:	10803fcc 	andi	r2,r2,255
     cb0:	1080201c 	xori	r2,r2,128
     cb4:	10bfe004 	addi	r2,r2,-128
     cb8:	00c00c04 	movi	r3,48
     cbc:	10c13c26 	beq	r2,r3,11b0 <___vfprintf_internal_r+0xc34>
     cc0:	80ffffc5 	stb	r3,-1(r16)
     cc4:	d8c02817 	ldw	r3,160(sp)
     cc8:	80bfffc4 	addi	r2,r16,-1
     ccc:	1021883a 	mov	r16,r2
     cd0:	1887c83a 	sub	r3,r3,r2
     cd4:	d8c02b15 	stw	r3,172(sp)
     cd8:	d8802b17 	ldw	r2,172(sp)
     cdc:	d9002a17 	ldw	r4,168(sp)
     ce0:	1100010e 	bge	r2,r4,ce8 <___vfprintf_internal_r+0x76c>
     ce4:	2005883a 	mov	r2,r4
     ce8:	d8802915 	stw	r2,164(sp)
     cec:	d8003215 	stw	zero,200(sp)
     cf0:	e7003fcc 	andi	fp,fp,255
     cf4:	e700201c 	xori	fp,fp,128
     cf8:	e73fe004 	addi	fp,fp,-128
     cfc:	e0000326 	beq	fp,zero,d0c <___vfprintf_internal_r+0x790>
     d00:	d8c02917 	ldw	r3,164(sp)
     d04:	18c00044 	addi	r3,r3,1
     d08:	d8c02915 	stw	r3,164(sp)
     d0c:	90c0008c 	andi	r3,r18,2
     d10:	d8c02c15 	stw	r3,176(sp)
     d14:	18000326 	beq	r3,zero,d24 <___vfprintf_internal_r+0x7a8>
     d18:	d8c02917 	ldw	r3,164(sp)
     d1c:	18c00084 	addi	r3,r3,2
     d20:	d8c02915 	stw	r3,164(sp)
     d24:	90c0210c 	andi	r3,r18,132
     d28:	d8c03015 	stw	r3,192(sp)
     d2c:	1801c51e 	bne	r3,zero,1444 <___vfprintf_internal_r+0xec8>
     d30:	d9003117 	ldw	r4,196(sp)
     d34:	d8c02917 	ldw	r3,164(sp)
     d38:	20e7c83a 	sub	r19,r4,r3
     d3c:	04c1c10e 	bge	zero,r19,1444 <___vfprintf_internal_r+0xec8>
     d40:	02400404 	movi	r9,16
     d44:	d8c02017 	ldw	r3,128(sp)
     d48:	d8801f17 	ldw	r2,124(sp)
     d4c:	4cc52f0e 	bge	r9,r19,220c <___vfprintf_internal_r+0x1c90>
     d50:	01400074 	movhi	r5,1
     d54:	297eb684 	addi	r5,r5,-1318
     d58:	dc403b15 	stw	r17,236(sp)
     d5c:	d9403515 	stw	r5,212(sp)
     d60:	9823883a 	mov	r17,r19
     d64:	482d883a 	mov	r22,r9
     d68:	9027883a 	mov	r19,r18
     d6c:	070001c4 	movi	fp,7
     d70:	8025883a 	mov	r18,r16
     d74:	dc002d17 	ldw	r16,180(sp)
     d78:	00000306 	br	d88 <___vfprintf_internal_r+0x80c>
     d7c:	8c7ffc04 	addi	r17,r17,-16
     d80:	42000204 	addi	r8,r8,8
     d84:	b440130e 	bge	r22,r17,dd4 <___vfprintf_internal_r+0x858>
     d88:	01000074 	movhi	r4,1
     d8c:	18c00404 	addi	r3,r3,16
     d90:	10800044 	addi	r2,r2,1
     d94:	213eb684 	addi	r4,r4,-1318
     d98:	41000015 	stw	r4,0(r8)
     d9c:	45800115 	stw	r22,4(r8)
     da0:	d8c02015 	stw	r3,128(sp)
     da4:	d8801f15 	stw	r2,124(sp)
     da8:	e0bff40e 	bge	fp,r2,d7c <__alt_data_end+0xfffe0d7c>
     dac:	d9801e04 	addi	r6,sp,120
     db0:	b80b883a 	mov	r5,r23
     db4:	8009883a 	mov	r4,r16
     db8:	0007d5c0 	call	7d5c <__sprint_r>
     dbc:	103ef31e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
     dc0:	8c7ffc04 	addi	r17,r17,-16
     dc4:	d8c02017 	ldw	r3,128(sp)
     dc8:	d8801f17 	ldw	r2,124(sp)
     dcc:	da000404 	addi	r8,sp,16
     dd0:	b47fed16 	blt	r22,r17,d88 <__alt_data_end+0xfffe0d88>
     dd4:	9021883a 	mov	r16,r18
     dd8:	9825883a 	mov	r18,r19
     ddc:	8827883a 	mov	r19,r17
     de0:	dc403b17 	ldw	r17,236(sp)
     de4:	d9403517 	ldw	r5,212(sp)
     de8:	98c7883a 	add	r3,r19,r3
     dec:	10800044 	addi	r2,r2,1
     df0:	41400015 	stw	r5,0(r8)
     df4:	44c00115 	stw	r19,4(r8)
     df8:	d8c02015 	stw	r3,128(sp)
     dfc:	d8801f15 	stw	r2,124(sp)
     e00:	010001c4 	movi	r4,7
     e04:	2082c516 	blt	r4,r2,191c <___vfprintf_internal_r+0x13a0>
     e08:	df002787 	ldb	fp,158(sp)
     e0c:	42000204 	addi	r8,r8,8
     e10:	e0000c26 	beq	fp,zero,e44 <___vfprintf_internal_r+0x8c8>
     e14:	d8801f17 	ldw	r2,124(sp)
     e18:	d9002784 	addi	r4,sp,158
     e1c:	18c00044 	addi	r3,r3,1
     e20:	10800044 	addi	r2,r2,1
     e24:	41000015 	stw	r4,0(r8)
     e28:	01000044 	movi	r4,1
     e2c:	41000115 	stw	r4,4(r8)
     e30:	d8c02015 	stw	r3,128(sp)
     e34:	d8801f15 	stw	r2,124(sp)
     e38:	010001c4 	movi	r4,7
     e3c:	20825e16 	blt	r4,r2,17b8 <___vfprintf_internal_r+0x123c>
     e40:	42000204 	addi	r8,r8,8
     e44:	d8802c17 	ldw	r2,176(sp)
     e48:	10000c26 	beq	r2,zero,e7c <___vfprintf_internal_r+0x900>
     e4c:	d8801f17 	ldw	r2,124(sp)
     e50:	d9002704 	addi	r4,sp,156
     e54:	18c00084 	addi	r3,r3,2
     e58:	10800044 	addi	r2,r2,1
     e5c:	41000015 	stw	r4,0(r8)
     e60:	01000084 	movi	r4,2
     e64:	41000115 	stw	r4,4(r8)
     e68:	d8c02015 	stw	r3,128(sp)
     e6c:	d8801f15 	stw	r2,124(sp)
     e70:	010001c4 	movi	r4,7
     e74:	20825816 	blt	r4,r2,17d8 <___vfprintf_internal_r+0x125c>
     e78:	42000204 	addi	r8,r8,8
     e7c:	d9003017 	ldw	r4,192(sp)
     e80:	00802004 	movi	r2,128
     e84:	2081bb26 	beq	r4,r2,1574 <___vfprintf_internal_r+0xff8>
     e88:	d9402a17 	ldw	r5,168(sp)
     e8c:	d8802b17 	ldw	r2,172(sp)
     e90:	28adc83a 	sub	r22,r5,r2
     e94:	0580310e 	bge	zero,r22,f5c <___vfprintf_internal_r+0x9e0>
     e98:	07000404 	movi	fp,16
     e9c:	d8801f17 	ldw	r2,124(sp)
     ea0:	e584360e 	bge	fp,r22,1f7c <___vfprintf_internal_r+0x1a00>
     ea4:	01400074 	movhi	r5,1
     ea8:	297eb284 	addi	r5,r5,-1334
     eac:	dc402a15 	stw	r17,168(sp)
     eb0:	d9402c15 	stw	r5,176(sp)
     eb4:	b023883a 	mov	r17,r22
     eb8:	04c001c4 	movi	r19,7
     ebc:	a82d883a 	mov	r22,r21
     ec0:	902b883a 	mov	r21,r18
     ec4:	8025883a 	mov	r18,r16
     ec8:	dc002d17 	ldw	r16,180(sp)
     ecc:	00000306 	br	edc <___vfprintf_internal_r+0x960>
     ed0:	8c7ffc04 	addi	r17,r17,-16
     ed4:	42000204 	addi	r8,r8,8
     ed8:	e440110e 	bge	fp,r17,f20 <___vfprintf_internal_r+0x9a4>
     edc:	18c00404 	addi	r3,r3,16
     ee0:	10800044 	addi	r2,r2,1
     ee4:	45000015 	stw	r20,0(r8)
     ee8:	47000115 	stw	fp,4(r8)
     eec:	d8c02015 	stw	r3,128(sp)
     ef0:	d8801f15 	stw	r2,124(sp)
     ef4:	98bff60e 	bge	r19,r2,ed0 <__alt_data_end+0xfffe0ed0>
     ef8:	d9801e04 	addi	r6,sp,120
     efc:	b80b883a 	mov	r5,r23
     f00:	8009883a 	mov	r4,r16
     f04:	0007d5c0 	call	7d5c <__sprint_r>
     f08:	103ea01e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
     f0c:	8c7ffc04 	addi	r17,r17,-16
     f10:	d8c02017 	ldw	r3,128(sp)
     f14:	d8801f17 	ldw	r2,124(sp)
     f18:	da000404 	addi	r8,sp,16
     f1c:	e47fef16 	blt	fp,r17,edc <__alt_data_end+0xfffe0edc>
     f20:	9021883a 	mov	r16,r18
     f24:	a825883a 	mov	r18,r21
     f28:	b02b883a 	mov	r21,r22
     f2c:	882d883a 	mov	r22,r17
     f30:	dc402a17 	ldw	r17,168(sp)
     f34:	d9002c17 	ldw	r4,176(sp)
     f38:	1d87883a 	add	r3,r3,r22
     f3c:	10800044 	addi	r2,r2,1
     f40:	41000015 	stw	r4,0(r8)
     f44:	45800115 	stw	r22,4(r8)
     f48:	d8c02015 	stw	r3,128(sp)
     f4c:	d8801f15 	stw	r2,124(sp)
     f50:	010001c4 	movi	r4,7
     f54:	20821016 	blt	r4,r2,1798 <___vfprintf_internal_r+0x121c>
     f58:	42000204 	addi	r8,r8,8
     f5c:	9080400c 	andi	r2,r18,256
     f60:	10013a1e 	bne	r2,zero,144c <___vfprintf_internal_r+0xed0>
     f64:	d9402b17 	ldw	r5,172(sp)
     f68:	d8801f17 	ldw	r2,124(sp)
     f6c:	44000015 	stw	r16,0(r8)
     f70:	1947883a 	add	r3,r3,r5
     f74:	10800044 	addi	r2,r2,1
     f78:	41400115 	stw	r5,4(r8)
     f7c:	d8c02015 	stw	r3,128(sp)
     f80:	d8801f15 	stw	r2,124(sp)
     f84:	010001c4 	movi	r4,7
     f88:	2081f516 	blt	r4,r2,1760 <___vfprintf_internal_r+0x11e4>
     f8c:	42000204 	addi	r8,r8,8
     f90:	9480010c 	andi	r18,r18,4
     f94:	90003226 	beq	r18,zero,1060 <___vfprintf_internal_r+0xae4>
     f98:	d9403117 	ldw	r5,196(sp)
     f9c:	d8802917 	ldw	r2,164(sp)
     fa0:	28a1c83a 	sub	r16,r5,r2
     fa4:	04002e0e 	bge	zero,r16,1060 <___vfprintf_internal_r+0xae4>
     fa8:	04400404 	movi	r17,16
     fac:	d8801f17 	ldw	r2,124(sp)
     fb0:	8c04c40e 	bge	r17,r16,22c4 <___vfprintf_internal_r+0x1d48>
     fb4:	01400074 	movhi	r5,1
     fb8:	297eb684 	addi	r5,r5,-1318
     fbc:	d9403515 	stw	r5,212(sp)
     fc0:	048001c4 	movi	r18,7
     fc4:	dcc02d17 	ldw	r19,180(sp)
     fc8:	00000306 	br	fd8 <___vfprintf_internal_r+0xa5c>
     fcc:	843ffc04 	addi	r16,r16,-16
     fd0:	42000204 	addi	r8,r8,8
     fd4:	8c00130e 	bge	r17,r16,1024 <___vfprintf_internal_r+0xaa8>
     fd8:	01000074 	movhi	r4,1
     fdc:	18c00404 	addi	r3,r3,16
     fe0:	10800044 	addi	r2,r2,1
     fe4:	213eb684 	addi	r4,r4,-1318
     fe8:	41000015 	stw	r4,0(r8)
     fec:	44400115 	stw	r17,4(r8)
     ff0:	d8c02015 	stw	r3,128(sp)
     ff4:	d8801f15 	stw	r2,124(sp)
     ff8:	90bff40e 	bge	r18,r2,fcc <__alt_data_end+0xfffe0fcc>
     ffc:	d9801e04 	addi	r6,sp,120
    1000:	b80b883a 	mov	r5,r23
    1004:	9809883a 	mov	r4,r19
    1008:	0007d5c0 	call	7d5c <__sprint_r>
    100c:	103e5f1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1010:	843ffc04 	addi	r16,r16,-16
    1014:	d8c02017 	ldw	r3,128(sp)
    1018:	d8801f17 	ldw	r2,124(sp)
    101c:	da000404 	addi	r8,sp,16
    1020:	8c3fed16 	blt	r17,r16,fd8 <__alt_data_end+0xfffe0fd8>
    1024:	d9403517 	ldw	r5,212(sp)
    1028:	1c07883a 	add	r3,r3,r16
    102c:	10800044 	addi	r2,r2,1
    1030:	41400015 	stw	r5,0(r8)
    1034:	44000115 	stw	r16,4(r8)
    1038:	d8c02015 	stw	r3,128(sp)
    103c:	d8801f15 	stw	r2,124(sp)
    1040:	010001c4 	movi	r4,7
    1044:	2080060e 	bge	r4,r2,1060 <___vfprintf_internal_r+0xae4>
    1048:	d9002d17 	ldw	r4,180(sp)
    104c:	d9801e04 	addi	r6,sp,120
    1050:	b80b883a 	mov	r5,r23
    1054:	0007d5c0 	call	7d5c <__sprint_r>
    1058:	103e4c1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    105c:	d8c02017 	ldw	r3,128(sp)
    1060:	d8803117 	ldw	r2,196(sp)
    1064:	d9002917 	ldw	r4,164(sp)
    1068:	1100010e 	bge	r2,r4,1070 <___vfprintf_internal_r+0xaf4>
    106c:	2005883a 	mov	r2,r4
    1070:	d9402f17 	ldw	r5,188(sp)
    1074:	288b883a 	add	r5,r5,r2
    1078:	d9402f15 	stw	r5,188(sp)
    107c:	1801c01e 	bne	r3,zero,1780 <___vfprintf_internal_r+0x1204>
    1080:	a8800007 	ldb	r2,0(r21)
    1084:	d8001f15 	stw	zero,124(sp)
    1088:	da000404 	addi	r8,sp,16
    108c:	103d751e 	bne	r2,zero,664 <__alt_data_end+0xfffe0664>
    1090:	a823883a 	mov	r17,r21
    1094:	003d8b06 	br	6c4 <__alt_data_end+0xfffe06c4>
    1098:	8025883a 	mov	r18,r16
    109c:	dc002903 	ldbu	r16,164(sp)
    10a0:	e011883a 	mov	r8,fp
    10a4:	84003fcc 	andi	r16,r16,255
    10a8:	8005e51e 	bne	r16,zero,2840 <___vfprintf_internal_r+0x22c4>
    10ac:	94800414 	ori	r18,r18,16
    10b0:	9080080c 	andi	r2,r18,32
    10b4:	10022b26 	beq	r2,zero,1964 <___vfprintf_internal_r+0x13e8>
    10b8:	d9002e17 	ldw	r4,184(sp)
    10bc:	d9402a17 	ldw	r5,168(sp)
    10c0:	d8002785 	stb	zero,158(sp)
    10c4:	20c00204 	addi	r3,r4,8
    10c8:	24c00017 	ldw	r19,0(r4)
    10cc:	25800117 	ldw	r22,4(r4)
    10d0:	28042e16 	blt	r5,zero,218c <___vfprintf_internal_r+0x1c10>
    10d4:	013fdfc4 	movi	r4,-129
    10d8:	9d84b03a 	or	r2,r19,r22
    10dc:	d8c02e15 	stw	r3,184(sp)
    10e0:	9124703a 	and	r18,r18,r4
    10e4:	0039883a 	mov	fp,zero
    10e8:	103e801e 	bne	r2,zero,aec <__alt_data_end+0xfffe0aec>
    10ec:	d9002a17 	ldw	r4,168(sp)
    10f0:	2002e01e 	bne	r4,zero,1c74 <___vfprintf_internal_r+0x16f8>
    10f4:	d8002a15 	stw	zero,168(sp)
    10f8:	d8002b15 	stw	zero,172(sp)
    10fc:	dc001e04 	addi	r16,sp,120
    1100:	003ef506 	br	cd8 <__alt_data_end+0xfffe0cd8>
    1104:	8025883a 	mov	r18,r16
    1108:	dc002903 	ldbu	r16,164(sp)
    110c:	e011883a 	mov	r8,fp
    1110:	84003fcc 	andi	r16,r16,255
    1114:	8005ba1e 	bne	r16,zero,2800 <___vfprintf_internal_r+0x2284>
    1118:	01000074 	movhi	r4,1
    111c:	213ea604 	addi	r4,r4,-1384
    1120:	d9003915 	stw	r4,228(sp)
    1124:	9080080c 	andi	r2,r18,32
    1128:	10006126 	beq	r2,zero,12b0 <___vfprintf_internal_r+0xd34>
    112c:	d9402e17 	ldw	r5,184(sp)
    1130:	2cc00017 	ldw	r19,0(r5)
    1134:	2d800117 	ldw	r22,4(r5)
    1138:	29400204 	addi	r5,r5,8
    113c:	d9402e15 	stw	r5,184(sp)
    1140:	9080004c 	andi	r2,r18,1
    1144:	1001ac26 	beq	r2,zero,17f8 <___vfprintf_internal_r+0x127c>
    1148:	9d84b03a 	or	r2,r19,r22
    114c:	10038526 	beq	r2,zero,1f64 <___vfprintf_internal_r+0x19e8>
    1150:	d8c02a17 	ldw	r3,168(sp)
    1154:	00800c04 	movi	r2,48
    1158:	d8802705 	stb	r2,156(sp)
    115c:	dc402745 	stb	r17,157(sp)
    1160:	d8002785 	stb	zero,158(sp)
    1164:	90800094 	ori	r2,r18,2
    1168:	18047916 	blt	r3,zero,2350 <___vfprintf_internal_r+0x1dd4>
    116c:	00bfdfc4 	movi	r2,-129
    1170:	90a4703a 	and	r18,r18,r2
    1174:	94800094 	ori	r18,r18,2
    1178:	0039883a 	mov	fp,zero
    117c:	d9003917 	ldw	r4,228(sp)
    1180:	dc001e04 	addi	r16,sp,120
    1184:	988003cc 	andi	r2,r19,15
    1188:	b006973a 	slli	r3,r22,28
    118c:	2085883a 	add	r2,r4,r2
    1190:	9826d13a 	srli	r19,r19,4
    1194:	10800003 	ldbu	r2,0(r2)
    1198:	b02cd13a 	srli	r22,r22,4
    119c:	843fffc4 	addi	r16,r16,-1
    11a0:	1ce6b03a 	or	r19,r3,r19
    11a4:	80800005 	stb	r2,0(r16)
    11a8:	9d84b03a 	or	r2,r19,r22
    11ac:	103ff51e 	bne	r2,zero,1184 <__alt_data_end+0xfffe1184>
    11b0:	d8c02817 	ldw	r3,160(sp)
    11b4:	1c07c83a 	sub	r3,r3,r16
    11b8:	d8c02b15 	stw	r3,172(sp)
    11bc:	003ec606 	br	cd8 <__alt_data_end+0xfffe0cd8>
    11c0:	8025883a 	mov	r18,r16
    11c4:	dc002903 	ldbu	r16,164(sp)
    11c8:	e011883a 	mov	r8,fp
    11cc:	84003fcc 	andi	r16,r16,255
    11d0:	803e9626 	beq	r16,zero,c2c <__alt_data_end+0xfffe0c2c>
    11d4:	d8c02b03 	ldbu	r3,172(sp)
    11d8:	d8c02785 	stb	r3,158(sp)
    11dc:	003e9306 	br	c2c <__alt_data_end+0xfffe0c2c>
    11e0:	00c00044 	movi	r3,1
    11e4:	d8c02905 	stb	r3,164(sp)
    11e8:	00c00ac4 	movi	r3,43
    11ec:	d8c02b05 	stb	r3,172(sp)
    11f0:	ac400007 	ldb	r17,0(r21)
    11f4:	003d4306 	br	704 <__alt_data_end+0xfffe0704>
    11f8:	84000814 	ori	r16,r16,32
    11fc:	ac400007 	ldb	r17,0(r21)
    1200:	003d4006 	br	704 <__alt_data_end+0xfffe0704>
    1204:	d8802e17 	ldw	r2,184(sp)
    1208:	8025883a 	mov	r18,r16
    120c:	d8002785 	stb	zero,158(sp)
    1210:	14000017 	ldw	r16,0(r2)
    1214:	e011883a 	mov	r8,fp
    1218:	14c00104 	addi	r19,r2,4
    121c:	80042d26 	beq	r16,zero,22d4 <___vfprintf_internal_r+0x1d58>
    1220:	d8c02a17 	ldw	r3,168(sp)
    1224:	1803e416 	blt	r3,zero,21b8 <___vfprintf_internal_r+0x1c3c>
    1228:	180d883a 	mov	r6,r3
    122c:	000b883a 	mov	r5,zero
    1230:	8009883a 	mov	r4,r16
    1234:	df003d15 	stw	fp,244(sp)
    1238:	0005eb40 	call	5eb4 <memchr>
    123c:	da003d17 	ldw	r8,244(sp)
    1240:	10046826 	beq	r2,zero,23e4 <___vfprintf_internal_r+0x1e68>
    1244:	1405c83a 	sub	r2,r2,r16
    1248:	d8802b15 	stw	r2,172(sp)
    124c:	1003e016 	blt	r2,zero,21d0 <___vfprintf_internal_r+0x1c54>
    1250:	df002783 	ldbu	fp,158(sp)
    1254:	d8802915 	stw	r2,164(sp)
    1258:	dcc02e15 	stw	r19,184(sp)
    125c:	d8002a15 	stw	zero,168(sp)
    1260:	d8003215 	stw	zero,200(sp)
    1264:	003ea206 	br	cf0 <__alt_data_end+0xfffe0cf0>
    1268:	8025883a 	mov	r18,r16
    126c:	dc002903 	ldbu	r16,164(sp)
    1270:	e011883a 	mov	r8,fp
    1274:	84003fcc 	andi	r16,r16,255
    1278:	803f8d26 	beq	r16,zero,10b0 <__alt_data_end+0xfffe10b0>
    127c:	d8c02b03 	ldbu	r3,172(sp)
    1280:	d8c02785 	stb	r3,158(sp)
    1284:	003f8a06 	br	10b0 <__alt_data_end+0xfffe10b0>
    1288:	8025883a 	mov	r18,r16
    128c:	dc002903 	ldbu	r16,164(sp)
    1290:	e011883a 	mov	r8,fp
    1294:	84003fcc 	andi	r16,r16,255
    1298:	8005661e 	bne	r16,zero,2834 <___vfprintf_internal_r+0x22b8>
    129c:	01000074 	movhi	r4,1
    12a0:	213eab04 	addi	r4,r4,-1364
    12a4:	d9003915 	stw	r4,228(sp)
    12a8:	9080080c 	andi	r2,r18,32
    12ac:	103f9f1e 	bne	r2,zero,112c <__alt_data_end+0xfffe112c>
    12b0:	9080040c 	andi	r2,r18,16
    12b4:	1002eb26 	beq	r2,zero,1e64 <___vfprintf_internal_r+0x18e8>
    12b8:	d8802e17 	ldw	r2,184(sp)
    12bc:	002d883a 	mov	r22,zero
    12c0:	14c00017 	ldw	r19,0(r2)
    12c4:	10800104 	addi	r2,r2,4
    12c8:	d8802e15 	stw	r2,184(sp)
    12cc:	003f9c06 	br	1140 <__alt_data_end+0xfffe1140>
    12d0:	d8802b07 	ldb	r2,172(sp)
    12d4:	1002e11e 	bne	r2,zero,1e5c <___vfprintf_internal_r+0x18e0>
    12d8:	00c00044 	movi	r3,1
    12dc:	d8c02905 	stb	r3,164(sp)
    12e0:	00c00804 	movi	r3,32
    12e4:	d8c02b05 	stb	r3,172(sp)
    12e8:	ac400007 	ldb	r17,0(r21)
    12ec:	003d0506 	br	704 <__alt_data_end+0xfffe0704>
    12f0:	84000054 	ori	r16,r16,1
    12f4:	ac400007 	ldb	r17,0(r21)
    12f8:	003d0206 	br	704 <__alt_data_end+0xfffe0704>
    12fc:	8025883a 	mov	r18,r16
    1300:	dc002903 	ldbu	r16,164(sp)
    1304:	e011883a 	mov	r8,fp
    1308:	84003fcc 	andi	r16,r16,255
    130c:	803de726 	beq	r16,zero,aac <__alt_data_end+0xfffe0aac>
    1310:	d8c02b03 	ldbu	r3,172(sp)
    1314:	d8c02785 	stb	r3,158(sp)
    1318:	003de406 	br	aac <__alt_data_end+0xfffe0aac>
    131c:	84001014 	ori	r16,r16,64
    1320:	ac400007 	ldb	r17,0(r21)
    1324:	003cf706 	br	704 <__alt_data_end+0xfffe0704>
    1328:	ac400007 	ldb	r17,0(r21)
    132c:	00801b04 	movi	r2,108
    1330:	88838f26 	beq	r17,r2,2170 <___vfprintf_internal_r+0x1bf4>
    1334:	84000414 	ori	r16,r16,16
    1338:	003cf206 	br	704 <__alt_data_end+0xfffe0704>
    133c:	8025883a 	mov	r18,r16
    1340:	dc002903 	ldbu	r16,164(sp)
    1344:	e011883a 	mov	r8,fp
    1348:	84003fcc 	andi	r16,r16,255
    134c:	80053f1e 	bne	r16,zero,284c <___vfprintf_internal_r+0x22d0>
    1350:	9080080c 	andi	r2,r18,32
    1354:	1002d226 	beq	r2,zero,1ea0 <___vfprintf_internal_r+0x1924>
    1358:	d9002e17 	ldw	r4,184(sp)
    135c:	d9402f17 	ldw	r5,188(sp)
    1360:	20800017 	ldw	r2,0(r4)
    1364:	2807d7fa 	srai	r3,r5,31
    1368:	21000104 	addi	r4,r4,4
    136c:	d9002e15 	stw	r4,184(sp)
    1370:	11400015 	stw	r5,0(r2)
    1374:	10c00115 	stw	r3,4(r2)
    1378:	003cb806 	br	65c <__alt_data_end+0xfffe065c>
    137c:	d8c02e17 	ldw	r3,184(sp)
    1380:	d9002e17 	ldw	r4,184(sp)
    1384:	8025883a 	mov	r18,r16
    1388:	18800017 	ldw	r2,0(r3)
    138c:	21000104 	addi	r4,r4,4
    1390:	00c00044 	movi	r3,1
    1394:	e011883a 	mov	r8,fp
    1398:	d8c02915 	stw	r3,164(sp)
    139c:	d8002785 	stb	zero,158(sp)
    13a0:	d8801405 	stb	r2,80(sp)
    13a4:	d9002e15 	stw	r4,184(sp)
    13a8:	d8c02b15 	stw	r3,172(sp)
    13ac:	d8002a15 	stw	zero,168(sp)
    13b0:	d8003215 	stw	zero,200(sp)
    13b4:	dc001404 	addi	r16,sp,80
    13b8:	0039883a 	mov	fp,zero
    13bc:	003e5306 	br	d0c <__alt_data_end+0xfffe0d0c>
    13c0:	01000074 	movhi	r4,1
    13c4:	213eab04 	addi	r4,r4,-1364
    13c8:	0039883a 	mov	fp,zero
    13cc:	d9003915 	stw	r4,228(sp)
    13d0:	04401e04 	movi	r17,120
    13d4:	003f6906 	br	117c <__alt_data_end+0xfffe117c>
    13d8:	8025883a 	mov	r18,r16
    13dc:	dc002903 	ldbu	r16,164(sp)
    13e0:	e011883a 	mov	r8,fp
    13e4:	84003fcc 	andi	r16,r16,255
    13e8:	8005081e 	bne	r16,zero,280c <___vfprintf_internal_r+0x2290>
    13ec:	883d6126 	beq	r17,zero,974 <__alt_data_end+0xfffe0974>
    13f0:	00c00044 	movi	r3,1
    13f4:	d8c02915 	stw	r3,164(sp)
    13f8:	dc401405 	stb	r17,80(sp)
    13fc:	d8002785 	stb	zero,158(sp)
    1400:	003fe906 	br	13a8 <__alt_data_end+0xfffe13a8>
    1404:	01400074 	movhi	r5,1
    1408:	297eab04 	addi	r5,r5,-1364
    140c:	d9403915 	stw	r5,228(sp)
    1410:	d8c02e15 	stw	r3,184(sp)
    1414:	1025883a 	mov	r18,r2
    1418:	04401e04 	movi	r17,120
    141c:	9d84b03a 	or	r2,r19,r22
    1420:	1000fc1e 	bne	r2,zero,1814 <___vfprintf_internal_r+0x1298>
    1424:	0039883a 	mov	fp,zero
    1428:	00800084 	movi	r2,2
    142c:	10803fcc 	andi	r2,r2,255
    1430:	00c00044 	movi	r3,1
    1434:	10c20f26 	beq	r2,r3,1c74 <___vfprintf_internal_r+0x16f8>
    1438:	00c00084 	movi	r3,2
    143c:	10fd3326 	beq	r2,r3,90c <__alt_data_end+0xfffe090c>
    1440:	003e0b06 	br	c70 <__alt_data_end+0xfffe0c70>
    1444:	d8c02017 	ldw	r3,128(sp)
    1448:	003e7106 	br	e10 <__alt_data_end+0xfffe0e10>
    144c:	00801944 	movi	r2,101
    1450:	14407e0e 	bge	r2,r17,164c <___vfprintf_internal_r+0x10d0>
    1454:	d9003617 	ldw	r4,216(sp)
    1458:	d9403817 	ldw	r5,224(sp)
    145c:	000d883a 	mov	r6,zero
    1460:	000f883a 	mov	r7,zero
    1464:	d8c03c15 	stw	r3,240(sp)
    1468:	da003d15 	stw	r8,244(sp)
    146c:	000bcbc0 	call	bcbc <__eqdf2>
    1470:	d8c03c17 	ldw	r3,240(sp)
    1474:	da003d17 	ldw	r8,244(sp)
    1478:	1000f71e 	bne	r2,zero,1858 <___vfprintf_internal_r+0x12dc>
    147c:	d8801f17 	ldw	r2,124(sp)
    1480:	01000074 	movhi	r4,1
    1484:	213eb204 	addi	r4,r4,-1336
    1488:	18c00044 	addi	r3,r3,1
    148c:	10800044 	addi	r2,r2,1
    1490:	41000015 	stw	r4,0(r8)
    1494:	01000044 	movi	r4,1
    1498:	41000115 	stw	r4,4(r8)
    149c:	d8c02015 	stw	r3,128(sp)
    14a0:	d8801f15 	stw	r2,124(sp)
    14a4:	010001c4 	movi	r4,7
    14a8:	2082b816 	blt	r4,r2,1f8c <___vfprintf_internal_r+0x1a10>
    14ac:	42000204 	addi	r8,r8,8
    14b0:	d8802617 	ldw	r2,152(sp)
    14b4:	d9403317 	ldw	r5,204(sp)
    14b8:	11400216 	blt	r2,r5,14c4 <___vfprintf_internal_r+0xf48>
    14bc:	9080004c 	andi	r2,r18,1
    14c0:	103eb326 	beq	r2,zero,f90 <__alt_data_end+0xfffe0f90>
    14c4:	d8803717 	ldw	r2,220(sp)
    14c8:	d9003417 	ldw	r4,208(sp)
    14cc:	d9403717 	ldw	r5,220(sp)
    14d0:	1887883a 	add	r3,r3,r2
    14d4:	d8801f17 	ldw	r2,124(sp)
    14d8:	41000015 	stw	r4,0(r8)
    14dc:	41400115 	stw	r5,4(r8)
    14e0:	10800044 	addi	r2,r2,1
    14e4:	d8c02015 	stw	r3,128(sp)
    14e8:	d8801f15 	stw	r2,124(sp)
    14ec:	010001c4 	movi	r4,7
    14f0:	20832916 	blt	r4,r2,2198 <___vfprintf_internal_r+0x1c1c>
    14f4:	42000204 	addi	r8,r8,8
    14f8:	d8803317 	ldw	r2,204(sp)
    14fc:	143fffc4 	addi	r16,r2,-1
    1500:	043ea30e 	bge	zero,r16,f90 <__alt_data_end+0xfffe0f90>
    1504:	04400404 	movi	r17,16
    1508:	d8801f17 	ldw	r2,124(sp)
    150c:	8c00880e 	bge	r17,r16,1730 <___vfprintf_internal_r+0x11b4>
    1510:	01400074 	movhi	r5,1
    1514:	297eb284 	addi	r5,r5,-1334
    1518:	d9402c15 	stw	r5,176(sp)
    151c:	058001c4 	movi	r22,7
    1520:	dcc02d17 	ldw	r19,180(sp)
    1524:	00000306 	br	1534 <___vfprintf_internal_r+0xfb8>
    1528:	42000204 	addi	r8,r8,8
    152c:	843ffc04 	addi	r16,r16,-16
    1530:	8c00820e 	bge	r17,r16,173c <___vfprintf_internal_r+0x11c0>
    1534:	18c00404 	addi	r3,r3,16
    1538:	10800044 	addi	r2,r2,1
    153c:	45000015 	stw	r20,0(r8)
    1540:	44400115 	stw	r17,4(r8)
    1544:	d8c02015 	stw	r3,128(sp)
    1548:	d8801f15 	stw	r2,124(sp)
    154c:	b0bff60e 	bge	r22,r2,1528 <__alt_data_end+0xfffe1528>
    1550:	d9801e04 	addi	r6,sp,120
    1554:	b80b883a 	mov	r5,r23
    1558:	9809883a 	mov	r4,r19
    155c:	0007d5c0 	call	7d5c <__sprint_r>
    1560:	103d0a1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1564:	d8c02017 	ldw	r3,128(sp)
    1568:	d8801f17 	ldw	r2,124(sp)
    156c:	da000404 	addi	r8,sp,16
    1570:	003fee06 	br	152c <__alt_data_end+0xfffe152c>
    1574:	d9403117 	ldw	r5,196(sp)
    1578:	d8802917 	ldw	r2,164(sp)
    157c:	28adc83a 	sub	r22,r5,r2
    1580:	05be410e 	bge	zero,r22,e88 <__alt_data_end+0xfffe0e88>
    1584:	07000404 	movi	fp,16
    1588:	d8801f17 	ldw	r2,124(sp)
    158c:	e5838f0e 	bge	fp,r22,23cc <___vfprintf_internal_r+0x1e50>
    1590:	01400074 	movhi	r5,1
    1594:	297eb284 	addi	r5,r5,-1334
    1598:	dc403015 	stw	r17,192(sp)
    159c:	d9402c15 	stw	r5,176(sp)
    15a0:	b023883a 	mov	r17,r22
    15a4:	04c001c4 	movi	r19,7
    15a8:	a82d883a 	mov	r22,r21
    15ac:	902b883a 	mov	r21,r18
    15b0:	8025883a 	mov	r18,r16
    15b4:	dc002d17 	ldw	r16,180(sp)
    15b8:	00000306 	br	15c8 <___vfprintf_internal_r+0x104c>
    15bc:	8c7ffc04 	addi	r17,r17,-16
    15c0:	42000204 	addi	r8,r8,8
    15c4:	e440110e 	bge	fp,r17,160c <___vfprintf_internal_r+0x1090>
    15c8:	18c00404 	addi	r3,r3,16
    15cc:	10800044 	addi	r2,r2,1
    15d0:	45000015 	stw	r20,0(r8)
    15d4:	47000115 	stw	fp,4(r8)
    15d8:	d8c02015 	stw	r3,128(sp)
    15dc:	d8801f15 	stw	r2,124(sp)
    15e0:	98bff60e 	bge	r19,r2,15bc <__alt_data_end+0xfffe15bc>
    15e4:	d9801e04 	addi	r6,sp,120
    15e8:	b80b883a 	mov	r5,r23
    15ec:	8009883a 	mov	r4,r16
    15f0:	0007d5c0 	call	7d5c <__sprint_r>
    15f4:	103ce51e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    15f8:	8c7ffc04 	addi	r17,r17,-16
    15fc:	d8c02017 	ldw	r3,128(sp)
    1600:	d8801f17 	ldw	r2,124(sp)
    1604:	da000404 	addi	r8,sp,16
    1608:	e47fef16 	blt	fp,r17,15c8 <__alt_data_end+0xfffe15c8>
    160c:	9021883a 	mov	r16,r18
    1610:	a825883a 	mov	r18,r21
    1614:	b02b883a 	mov	r21,r22
    1618:	882d883a 	mov	r22,r17
    161c:	dc403017 	ldw	r17,192(sp)
    1620:	d9002c17 	ldw	r4,176(sp)
    1624:	1d87883a 	add	r3,r3,r22
    1628:	10800044 	addi	r2,r2,1
    162c:	41000015 	stw	r4,0(r8)
    1630:	45800115 	stw	r22,4(r8)
    1634:	d8c02015 	stw	r3,128(sp)
    1638:	d8801f15 	stw	r2,124(sp)
    163c:	010001c4 	movi	r4,7
    1640:	20818e16 	blt	r4,r2,1c7c <___vfprintf_internal_r+0x1700>
    1644:	42000204 	addi	r8,r8,8
    1648:	003e0f06 	br	e88 <__alt_data_end+0xfffe0e88>
    164c:	d9403317 	ldw	r5,204(sp)
    1650:	00800044 	movi	r2,1
    1654:	18c00044 	addi	r3,r3,1
    1658:	1141530e 	bge	r2,r5,1ba8 <___vfprintf_internal_r+0x162c>
    165c:	dc401f17 	ldw	r17,124(sp)
    1660:	00800044 	movi	r2,1
    1664:	40800115 	stw	r2,4(r8)
    1668:	8c400044 	addi	r17,r17,1
    166c:	44000015 	stw	r16,0(r8)
    1670:	d8c02015 	stw	r3,128(sp)
    1674:	dc401f15 	stw	r17,124(sp)
    1678:	008001c4 	movi	r2,7
    167c:	14416b16 	blt	r2,r17,1c2c <___vfprintf_internal_r+0x16b0>
    1680:	42000204 	addi	r8,r8,8
    1684:	d8803717 	ldw	r2,220(sp)
    1688:	d9003417 	ldw	r4,208(sp)
    168c:	8c400044 	addi	r17,r17,1
    1690:	10c7883a 	add	r3,r2,r3
    1694:	40800115 	stw	r2,4(r8)
    1698:	41000015 	stw	r4,0(r8)
    169c:	d8c02015 	stw	r3,128(sp)
    16a0:	dc401f15 	stw	r17,124(sp)
    16a4:	008001c4 	movi	r2,7
    16a8:	14416916 	blt	r2,r17,1c50 <___vfprintf_internal_r+0x16d4>
    16ac:	45800204 	addi	r22,r8,8
    16b0:	d9003617 	ldw	r4,216(sp)
    16b4:	d9403817 	ldw	r5,224(sp)
    16b8:	000d883a 	mov	r6,zero
    16bc:	000f883a 	mov	r7,zero
    16c0:	d8c03c15 	stw	r3,240(sp)
    16c4:	000bcbc0 	call	bcbc <__eqdf2>
    16c8:	d8c03c17 	ldw	r3,240(sp)
    16cc:	1000bc26 	beq	r2,zero,19c0 <___vfprintf_internal_r+0x1444>
    16d0:	d9403317 	ldw	r5,204(sp)
    16d4:	84000044 	addi	r16,r16,1
    16d8:	8c400044 	addi	r17,r17,1
    16dc:	28bfffc4 	addi	r2,r5,-1
    16e0:	1887883a 	add	r3,r3,r2
    16e4:	b0800115 	stw	r2,4(r22)
    16e8:	b4000015 	stw	r16,0(r22)
    16ec:	d8c02015 	stw	r3,128(sp)
    16f0:	dc401f15 	stw	r17,124(sp)
    16f4:	008001c4 	movi	r2,7
    16f8:	14414316 	blt	r2,r17,1c08 <___vfprintf_internal_r+0x168c>
    16fc:	b5800204 	addi	r22,r22,8
    1700:	d9003a17 	ldw	r4,232(sp)
    1704:	df0022c4 	addi	fp,sp,139
    1708:	8c400044 	addi	r17,r17,1
    170c:	20c7883a 	add	r3,r4,r3
    1710:	b7000015 	stw	fp,0(r22)
    1714:	b1000115 	stw	r4,4(r22)
    1718:	d8c02015 	stw	r3,128(sp)
    171c:	dc401f15 	stw	r17,124(sp)
    1720:	008001c4 	movi	r2,7
    1724:	14400e16 	blt	r2,r17,1760 <___vfprintf_internal_r+0x11e4>
    1728:	b2000204 	addi	r8,r22,8
    172c:	003e1806 	br	f90 <__alt_data_end+0xfffe0f90>
    1730:	01000074 	movhi	r4,1
    1734:	213eb284 	addi	r4,r4,-1334
    1738:	d9002c15 	stw	r4,176(sp)
    173c:	d9002c17 	ldw	r4,176(sp)
    1740:	1c07883a 	add	r3,r3,r16
    1744:	44000115 	stw	r16,4(r8)
    1748:	41000015 	stw	r4,0(r8)
    174c:	10800044 	addi	r2,r2,1
    1750:	d8c02015 	stw	r3,128(sp)
    1754:	d8801f15 	stw	r2,124(sp)
    1758:	010001c4 	movi	r4,7
    175c:	20be0b0e 	bge	r4,r2,f8c <__alt_data_end+0xfffe0f8c>
    1760:	d9002d17 	ldw	r4,180(sp)
    1764:	d9801e04 	addi	r6,sp,120
    1768:	b80b883a 	mov	r5,r23
    176c:	0007d5c0 	call	7d5c <__sprint_r>
    1770:	103c861e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1774:	d8c02017 	ldw	r3,128(sp)
    1778:	da000404 	addi	r8,sp,16
    177c:	003e0406 	br	f90 <__alt_data_end+0xfffe0f90>
    1780:	d9002d17 	ldw	r4,180(sp)
    1784:	d9801e04 	addi	r6,sp,120
    1788:	b80b883a 	mov	r5,r23
    178c:	0007d5c0 	call	7d5c <__sprint_r>
    1790:	103e3b26 	beq	r2,zero,1080 <__alt_data_end+0xfffe1080>
    1794:	003c7d06 	br	98c <__alt_data_end+0xfffe098c>
    1798:	d9002d17 	ldw	r4,180(sp)
    179c:	d9801e04 	addi	r6,sp,120
    17a0:	b80b883a 	mov	r5,r23
    17a4:	0007d5c0 	call	7d5c <__sprint_r>
    17a8:	103c781e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    17ac:	d8c02017 	ldw	r3,128(sp)
    17b0:	da000404 	addi	r8,sp,16
    17b4:	003de906 	br	f5c <__alt_data_end+0xfffe0f5c>
    17b8:	d9002d17 	ldw	r4,180(sp)
    17bc:	d9801e04 	addi	r6,sp,120
    17c0:	b80b883a 	mov	r5,r23
    17c4:	0007d5c0 	call	7d5c <__sprint_r>
    17c8:	103c701e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    17cc:	d8c02017 	ldw	r3,128(sp)
    17d0:	da000404 	addi	r8,sp,16
    17d4:	003d9b06 	br	e44 <__alt_data_end+0xfffe0e44>
    17d8:	d9002d17 	ldw	r4,180(sp)
    17dc:	d9801e04 	addi	r6,sp,120
    17e0:	b80b883a 	mov	r5,r23
    17e4:	0007d5c0 	call	7d5c <__sprint_r>
    17e8:	103c681e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    17ec:	d8c02017 	ldw	r3,128(sp)
    17f0:	da000404 	addi	r8,sp,16
    17f4:	003da106 	br	e7c <__alt_data_end+0xfffe0e7c>
    17f8:	d9402a17 	ldw	r5,168(sp)
    17fc:	d8002785 	stb	zero,158(sp)
    1800:	283f0616 	blt	r5,zero,141c <__alt_data_end+0xfffe141c>
    1804:	00ffdfc4 	movi	r3,-129
    1808:	9d84b03a 	or	r2,r19,r22
    180c:	90e4703a 	and	r18,r18,r3
    1810:	103c3b26 	beq	r2,zero,900 <__alt_data_end+0xfffe0900>
    1814:	0039883a 	mov	fp,zero
    1818:	003e5806 	br	117c <__alt_data_end+0xfffe117c>
    181c:	9080040c 	andi	r2,r18,16
    1820:	1001b326 	beq	r2,zero,1ef0 <___vfprintf_internal_r+0x1974>
    1824:	d8c02e17 	ldw	r3,184(sp)
    1828:	d9002a17 	ldw	r4,168(sp)
    182c:	d8002785 	stb	zero,158(sp)
    1830:	18800104 	addi	r2,r3,4
    1834:	1cc00017 	ldw	r19,0(r3)
    1838:	002d883a 	mov	r22,zero
    183c:	2001b516 	blt	r4,zero,1f14 <___vfprintf_internal_r+0x1998>
    1840:	00ffdfc4 	movi	r3,-129
    1844:	d8802e15 	stw	r2,184(sp)
    1848:	90e4703a 	and	r18,r18,r3
    184c:	983d0526 	beq	r19,zero,c64 <__alt_data_end+0xfffe0c64>
    1850:	0039883a 	mov	fp,zero
    1854:	003d0806 	br	c78 <__alt_data_end+0xfffe0c78>
    1858:	dc402617 	ldw	r17,152(sp)
    185c:	0441d30e 	bge	zero,r17,1fac <___vfprintf_internal_r+0x1a30>
    1860:	dc403217 	ldw	r17,200(sp)
    1864:	d8803317 	ldw	r2,204(sp)
    1868:	1440010e 	bge	r2,r17,1870 <___vfprintf_internal_r+0x12f4>
    186c:	1023883a 	mov	r17,r2
    1870:	04400a0e 	bge	zero,r17,189c <___vfprintf_internal_r+0x1320>
    1874:	d8801f17 	ldw	r2,124(sp)
    1878:	1c47883a 	add	r3,r3,r17
    187c:	44000015 	stw	r16,0(r8)
    1880:	10800044 	addi	r2,r2,1
    1884:	44400115 	stw	r17,4(r8)
    1888:	d8c02015 	stw	r3,128(sp)
    188c:	d8801f15 	stw	r2,124(sp)
    1890:	010001c4 	movi	r4,7
    1894:	20826516 	blt	r4,r2,222c <___vfprintf_internal_r+0x1cb0>
    1898:	42000204 	addi	r8,r8,8
    189c:	88026116 	blt	r17,zero,2224 <___vfprintf_internal_r+0x1ca8>
    18a0:	d9003217 	ldw	r4,200(sp)
    18a4:	2463c83a 	sub	r17,r4,r17
    18a8:	04407b0e 	bge	zero,r17,1a98 <___vfprintf_internal_r+0x151c>
    18ac:	05800404 	movi	r22,16
    18b0:	d8801f17 	ldw	r2,124(sp)
    18b4:	b4419d0e 	bge	r22,r17,1f2c <___vfprintf_internal_r+0x19b0>
    18b8:	01000074 	movhi	r4,1
    18bc:	213eb284 	addi	r4,r4,-1334
    18c0:	d9002c15 	stw	r4,176(sp)
    18c4:	070001c4 	movi	fp,7
    18c8:	dcc02d17 	ldw	r19,180(sp)
    18cc:	00000306 	br	18dc <___vfprintf_internal_r+0x1360>
    18d0:	42000204 	addi	r8,r8,8
    18d4:	8c7ffc04 	addi	r17,r17,-16
    18d8:	b441970e 	bge	r22,r17,1f38 <___vfprintf_internal_r+0x19bc>
    18dc:	18c00404 	addi	r3,r3,16
    18e0:	10800044 	addi	r2,r2,1
    18e4:	45000015 	stw	r20,0(r8)
    18e8:	45800115 	stw	r22,4(r8)
    18ec:	d8c02015 	stw	r3,128(sp)
    18f0:	d8801f15 	stw	r2,124(sp)
    18f4:	e0bff60e 	bge	fp,r2,18d0 <__alt_data_end+0xfffe18d0>
    18f8:	d9801e04 	addi	r6,sp,120
    18fc:	b80b883a 	mov	r5,r23
    1900:	9809883a 	mov	r4,r19
    1904:	0007d5c0 	call	7d5c <__sprint_r>
    1908:	103c201e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    190c:	d8c02017 	ldw	r3,128(sp)
    1910:	d8801f17 	ldw	r2,124(sp)
    1914:	da000404 	addi	r8,sp,16
    1918:	003fee06 	br	18d4 <__alt_data_end+0xfffe18d4>
    191c:	d9002d17 	ldw	r4,180(sp)
    1920:	d9801e04 	addi	r6,sp,120
    1924:	b80b883a 	mov	r5,r23
    1928:	0007d5c0 	call	7d5c <__sprint_r>
    192c:	103c171e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1930:	d8c02017 	ldw	r3,128(sp)
    1934:	df002787 	ldb	fp,158(sp)
    1938:	da000404 	addi	r8,sp,16
    193c:	003d3406 	br	e10 <__alt_data_end+0xfffe0e10>
    1940:	9080040c 	andi	r2,r18,16
    1944:	10016126 	beq	r2,zero,1ecc <___vfprintf_internal_r+0x1950>
    1948:	d9402e17 	ldw	r5,184(sp)
    194c:	2cc00017 	ldw	r19,0(r5)
    1950:	29400104 	addi	r5,r5,4
    1954:	d9402e15 	stw	r5,184(sp)
    1958:	982dd7fa 	srai	r22,r19,31
    195c:	b005883a 	mov	r2,r22
    1960:	003c5a06 	br	acc <__alt_data_end+0xfffe0acc>
    1964:	9080040c 	andi	r2,r18,16
    1968:	10003526 	beq	r2,zero,1a40 <___vfprintf_internal_r+0x14c4>
    196c:	d8c02e17 	ldw	r3,184(sp)
    1970:	d9002a17 	ldw	r4,168(sp)
    1974:	d8002785 	stb	zero,158(sp)
    1978:	18800104 	addi	r2,r3,4
    197c:	1cc00017 	ldw	r19,0(r3)
    1980:	002d883a 	mov	r22,zero
    1984:	20003716 	blt	r4,zero,1a64 <___vfprintf_internal_r+0x14e8>
    1988:	00ffdfc4 	movi	r3,-129
    198c:	d8802e15 	stw	r2,184(sp)
    1990:	90e4703a 	and	r18,r18,r3
    1994:	0039883a 	mov	fp,zero
    1998:	983dd426 	beq	r19,zero,10ec <__alt_data_end+0xfffe10ec>
    199c:	00800244 	movi	r2,9
    19a0:	14fc5336 	bltu	r2,r19,af0 <__alt_data_end+0xfffe0af0>
    19a4:	d8c02817 	ldw	r3,160(sp)
    19a8:	dc001dc4 	addi	r16,sp,119
    19ac:	9cc00c04 	addi	r19,r19,48
    19b0:	1c07c83a 	sub	r3,r3,r16
    19b4:	dcc01dc5 	stb	r19,119(sp)
    19b8:	d8c02b15 	stw	r3,172(sp)
    19bc:	003cc606 	br	cd8 <__alt_data_end+0xfffe0cd8>
    19c0:	d8803317 	ldw	r2,204(sp)
    19c4:	143fffc4 	addi	r16,r2,-1
    19c8:	043f4d0e 	bge	zero,r16,1700 <__alt_data_end+0xfffe1700>
    19cc:	07000404 	movi	fp,16
    19d0:	e400810e 	bge	fp,r16,1bd8 <___vfprintf_internal_r+0x165c>
    19d4:	01400074 	movhi	r5,1
    19d8:	297eb284 	addi	r5,r5,-1334
    19dc:	d9402c15 	stw	r5,176(sp)
    19e0:	01c001c4 	movi	r7,7
    19e4:	dcc02d17 	ldw	r19,180(sp)
    19e8:	00000306 	br	19f8 <___vfprintf_internal_r+0x147c>
    19ec:	b5800204 	addi	r22,r22,8
    19f0:	843ffc04 	addi	r16,r16,-16
    19f4:	e4007b0e 	bge	fp,r16,1be4 <___vfprintf_internal_r+0x1668>
    19f8:	18c00404 	addi	r3,r3,16
    19fc:	8c400044 	addi	r17,r17,1
    1a00:	b5000015 	stw	r20,0(r22)
    1a04:	b7000115 	stw	fp,4(r22)
    1a08:	d8c02015 	stw	r3,128(sp)
    1a0c:	dc401f15 	stw	r17,124(sp)
    1a10:	3c7ff60e 	bge	r7,r17,19ec <__alt_data_end+0xfffe19ec>
    1a14:	d9801e04 	addi	r6,sp,120
    1a18:	b80b883a 	mov	r5,r23
    1a1c:	9809883a 	mov	r4,r19
    1a20:	d9c03c15 	stw	r7,240(sp)
    1a24:	0007d5c0 	call	7d5c <__sprint_r>
    1a28:	d9c03c17 	ldw	r7,240(sp)
    1a2c:	103bd71e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1a30:	d8c02017 	ldw	r3,128(sp)
    1a34:	dc401f17 	ldw	r17,124(sp)
    1a38:	dd800404 	addi	r22,sp,16
    1a3c:	003fec06 	br	19f0 <__alt_data_end+0xfffe19f0>
    1a40:	9080100c 	andi	r2,r18,64
    1a44:	d8002785 	stb	zero,158(sp)
    1a48:	10010e26 	beq	r2,zero,1e84 <___vfprintf_internal_r+0x1908>
    1a4c:	d9402e17 	ldw	r5,184(sp)
    1a50:	d8c02a17 	ldw	r3,168(sp)
    1a54:	002d883a 	mov	r22,zero
    1a58:	28800104 	addi	r2,r5,4
    1a5c:	2cc0000b 	ldhu	r19,0(r5)
    1a60:	183fc90e 	bge	r3,zero,1988 <__alt_data_end+0xfffe1988>
    1a64:	d8802e15 	stw	r2,184(sp)
    1a68:	0039883a 	mov	fp,zero
    1a6c:	9d84b03a 	or	r2,r19,r22
    1a70:	103c1e1e 	bne	r2,zero,aec <__alt_data_end+0xfffe0aec>
    1a74:	00800044 	movi	r2,1
    1a78:	003e6c06 	br	142c <__alt_data_end+0xfffe142c>
    1a7c:	d9002d17 	ldw	r4,180(sp)
    1a80:	d9801e04 	addi	r6,sp,120
    1a84:	b80b883a 	mov	r5,r23
    1a88:	0007d5c0 	call	7d5c <__sprint_r>
    1a8c:	103bbf1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1a90:	d8c02017 	ldw	r3,128(sp)
    1a94:	da000404 	addi	r8,sp,16
    1a98:	d9003217 	ldw	r4,200(sp)
    1a9c:	d8802617 	ldw	r2,152(sp)
    1aa0:	d9403317 	ldw	r5,204(sp)
    1aa4:	8123883a 	add	r17,r16,r4
    1aa8:	11400216 	blt	r2,r5,1ab4 <___vfprintf_internal_r+0x1538>
    1aac:	9100004c 	andi	r4,r18,1
    1ab0:	20000d26 	beq	r4,zero,1ae8 <___vfprintf_internal_r+0x156c>
    1ab4:	d9003717 	ldw	r4,220(sp)
    1ab8:	d9403417 	ldw	r5,208(sp)
    1abc:	1907883a 	add	r3,r3,r4
    1ac0:	d9001f17 	ldw	r4,124(sp)
    1ac4:	41400015 	stw	r5,0(r8)
    1ac8:	d9403717 	ldw	r5,220(sp)
    1acc:	21000044 	addi	r4,r4,1
    1ad0:	d8c02015 	stw	r3,128(sp)
    1ad4:	41400115 	stw	r5,4(r8)
    1ad8:	d9001f15 	stw	r4,124(sp)
    1adc:	014001c4 	movi	r5,7
    1ae0:	2901e816 	blt	r5,r4,2284 <___vfprintf_internal_r+0x1d08>
    1ae4:	42000204 	addi	r8,r8,8
    1ae8:	d9003317 	ldw	r4,204(sp)
    1aec:	8121883a 	add	r16,r16,r4
    1af0:	2085c83a 	sub	r2,r4,r2
    1af4:	8461c83a 	sub	r16,r16,r17
    1af8:	1400010e 	bge	r2,r16,1b00 <___vfprintf_internal_r+0x1584>
    1afc:	1021883a 	mov	r16,r2
    1b00:	04000a0e 	bge	zero,r16,1b2c <___vfprintf_internal_r+0x15b0>
    1b04:	d9001f17 	ldw	r4,124(sp)
    1b08:	1c07883a 	add	r3,r3,r16
    1b0c:	44400015 	stw	r17,0(r8)
    1b10:	21000044 	addi	r4,r4,1
    1b14:	44000115 	stw	r16,4(r8)
    1b18:	d8c02015 	stw	r3,128(sp)
    1b1c:	d9001f15 	stw	r4,124(sp)
    1b20:	014001c4 	movi	r5,7
    1b24:	2901fb16 	blt	r5,r4,2314 <___vfprintf_internal_r+0x1d98>
    1b28:	42000204 	addi	r8,r8,8
    1b2c:	8001f716 	blt	r16,zero,230c <___vfprintf_internal_r+0x1d90>
    1b30:	1421c83a 	sub	r16,r2,r16
    1b34:	043d160e 	bge	zero,r16,f90 <__alt_data_end+0xfffe0f90>
    1b38:	04400404 	movi	r17,16
    1b3c:	d8801f17 	ldw	r2,124(sp)
    1b40:	8c3efb0e 	bge	r17,r16,1730 <__alt_data_end+0xfffe1730>
    1b44:	01400074 	movhi	r5,1
    1b48:	297eb284 	addi	r5,r5,-1334
    1b4c:	d9402c15 	stw	r5,176(sp)
    1b50:	058001c4 	movi	r22,7
    1b54:	dcc02d17 	ldw	r19,180(sp)
    1b58:	00000306 	br	1b68 <___vfprintf_internal_r+0x15ec>
    1b5c:	42000204 	addi	r8,r8,8
    1b60:	843ffc04 	addi	r16,r16,-16
    1b64:	8c3ef50e 	bge	r17,r16,173c <__alt_data_end+0xfffe173c>
    1b68:	18c00404 	addi	r3,r3,16
    1b6c:	10800044 	addi	r2,r2,1
    1b70:	45000015 	stw	r20,0(r8)
    1b74:	44400115 	stw	r17,4(r8)
    1b78:	d8c02015 	stw	r3,128(sp)
    1b7c:	d8801f15 	stw	r2,124(sp)
    1b80:	b0bff60e 	bge	r22,r2,1b5c <__alt_data_end+0xfffe1b5c>
    1b84:	d9801e04 	addi	r6,sp,120
    1b88:	b80b883a 	mov	r5,r23
    1b8c:	9809883a 	mov	r4,r19
    1b90:	0007d5c0 	call	7d5c <__sprint_r>
    1b94:	103b7d1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1b98:	d8c02017 	ldw	r3,128(sp)
    1b9c:	d8801f17 	ldw	r2,124(sp)
    1ba0:	da000404 	addi	r8,sp,16
    1ba4:	003fee06 	br	1b60 <__alt_data_end+0xfffe1b60>
    1ba8:	9088703a 	and	r4,r18,r2
    1bac:	203eab1e 	bne	r4,zero,165c <__alt_data_end+0xfffe165c>
    1bb0:	dc401f17 	ldw	r17,124(sp)
    1bb4:	40800115 	stw	r2,4(r8)
    1bb8:	44000015 	stw	r16,0(r8)
    1bbc:	8c400044 	addi	r17,r17,1
    1bc0:	d8c02015 	stw	r3,128(sp)
    1bc4:	dc401f15 	stw	r17,124(sp)
    1bc8:	008001c4 	movi	r2,7
    1bcc:	14400e16 	blt	r2,r17,1c08 <___vfprintf_internal_r+0x168c>
    1bd0:	45800204 	addi	r22,r8,8
    1bd4:	003eca06 	br	1700 <__alt_data_end+0xfffe1700>
    1bd8:	01000074 	movhi	r4,1
    1bdc:	213eb284 	addi	r4,r4,-1334
    1be0:	d9002c15 	stw	r4,176(sp)
    1be4:	d8802c17 	ldw	r2,176(sp)
    1be8:	1c07883a 	add	r3,r3,r16
    1bec:	8c400044 	addi	r17,r17,1
    1bf0:	b0800015 	stw	r2,0(r22)
    1bf4:	b4000115 	stw	r16,4(r22)
    1bf8:	d8c02015 	stw	r3,128(sp)
    1bfc:	dc401f15 	stw	r17,124(sp)
    1c00:	008001c4 	movi	r2,7
    1c04:	147ebd0e 	bge	r2,r17,16fc <__alt_data_end+0xfffe16fc>
    1c08:	d9002d17 	ldw	r4,180(sp)
    1c0c:	d9801e04 	addi	r6,sp,120
    1c10:	b80b883a 	mov	r5,r23
    1c14:	0007d5c0 	call	7d5c <__sprint_r>
    1c18:	103b5c1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1c1c:	d8c02017 	ldw	r3,128(sp)
    1c20:	dc401f17 	ldw	r17,124(sp)
    1c24:	dd800404 	addi	r22,sp,16
    1c28:	003eb506 	br	1700 <__alt_data_end+0xfffe1700>
    1c2c:	d9002d17 	ldw	r4,180(sp)
    1c30:	d9801e04 	addi	r6,sp,120
    1c34:	b80b883a 	mov	r5,r23
    1c38:	0007d5c0 	call	7d5c <__sprint_r>
    1c3c:	103b531e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1c40:	d8c02017 	ldw	r3,128(sp)
    1c44:	dc401f17 	ldw	r17,124(sp)
    1c48:	da000404 	addi	r8,sp,16
    1c4c:	003e8d06 	br	1684 <__alt_data_end+0xfffe1684>
    1c50:	d9002d17 	ldw	r4,180(sp)
    1c54:	d9801e04 	addi	r6,sp,120
    1c58:	b80b883a 	mov	r5,r23
    1c5c:	0007d5c0 	call	7d5c <__sprint_r>
    1c60:	103b4a1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1c64:	d8c02017 	ldw	r3,128(sp)
    1c68:	dc401f17 	ldw	r17,124(sp)
    1c6c:	dd800404 	addi	r22,sp,16
    1c70:	003e8f06 	br	16b0 <__alt_data_end+0xfffe16b0>
    1c74:	0027883a 	mov	r19,zero
    1c78:	003f4a06 	br	19a4 <__alt_data_end+0xfffe19a4>
    1c7c:	d9002d17 	ldw	r4,180(sp)
    1c80:	d9801e04 	addi	r6,sp,120
    1c84:	b80b883a 	mov	r5,r23
    1c88:	0007d5c0 	call	7d5c <__sprint_r>
    1c8c:	103b3f1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1c90:	d8c02017 	ldw	r3,128(sp)
    1c94:	da000404 	addi	r8,sp,16
    1c98:	003c7b06 	br	e88 <__alt_data_end+0xfffe0e88>
    1c9c:	d9402a17 	ldw	r5,168(sp)
    1ca0:	04e7c83a 	sub	r19,zero,r19
    1ca4:	07000b44 	movi	fp,45
    1ca8:	9804c03a 	cmpne	r2,r19,zero
    1cac:	05adc83a 	sub	r22,zero,r22
    1cb0:	df002785 	stb	fp,158(sp)
    1cb4:	b0adc83a 	sub	r22,r22,r2
    1cb8:	28017b16 	blt	r5,zero,22a8 <___vfprintf_internal_r+0x1d2c>
    1cbc:	00bfdfc4 	movi	r2,-129
    1cc0:	90a4703a 	and	r18,r18,r2
    1cc4:	003b8906 	br	aec <__alt_data_end+0xfffe0aec>
    1cc8:	d9003617 	ldw	r4,216(sp)
    1ccc:	d9403817 	ldw	r5,224(sp)
    1cd0:	da003d15 	stw	r8,244(sp)
    1cd4:	00079800 	call	7980 <__fpclassifyd>
    1cd8:	da003d17 	ldw	r8,244(sp)
    1cdc:	1000f026 	beq	r2,zero,20a0 <___vfprintf_internal_r+0x1b24>
    1ce0:	d9002a17 	ldw	r4,168(sp)
    1ce4:	05bff7c4 	movi	r22,-33
    1ce8:	00bfffc4 	movi	r2,-1
    1cec:	8dac703a 	and	r22,r17,r22
    1cf0:	20820026 	beq	r4,r2,24f4 <___vfprintf_internal_r+0x1f78>
    1cf4:	008011c4 	movi	r2,71
    1cf8:	b081f726 	beq	r22,r2,24d8 <___vfprintf_internal_r+0x1f5c>
    1cfc:	d9003817 	ldw	r4,224(sp)
    1d00:	90c04014 	ori	r3,r18,256
    1d04:	d8c02c15 	stw	r3,176(sp)
    1d08:	20021516 	blt	r4,zero,2560 <___vfprintf_internal_r+0x1fe4>
    1d0c:	dcc03817 	ldw	r19,224(sp)
    1d10:	d8002905 	stb	zero,164(sp)
    1d14:	00801984 	movi	r2,102
    1d18:	8881f926 	beq	r17,r2,2500 <___vfprintf_internal_r+0x1f84>
    1d1c:	00801184 	movi	r2,70
    1d20:	88821c26 	beq	r17,r2,2594 <___vfprintf_internal_r+0x2018>
    1d24:	00801144 	movi	r2,69
    1d28:	b081ef26 	beq	r22,r2,24e8 <___vfprintf_internal_r+0x1f6c>
    1d2c:	d8c02a17 	ldw	r3,168(sp)
    1d30:	d8802104 	addi	r2,sp,132
    1d34:	d8800315 	stw	r2,12(sp)
    1d38:	d9403617 	ldw	r5,216(sp)
    1d3c:	d8802504 	addi	r2,sp,148
    1d40:	d9002d17 	ldw	r4,180(sp)
    1d44:	d8800215 	stw	r2,8(sp)
    1d48:	d8802604 	addi	r2,sp,152
    1d4c:	d8c00015 	stw	r3,0(sp)
    1d50:	d8800115 	stw	r2,4(sp)
    1d54:	01c00084 	movi	r7,2
    1d58:	980d883a 	mov	r6,r19
    1d5c:	d8c03c15 	stw	r3,240(sp)
    1d60:	da003d15 	stw	r8,244(sp)
    1d64:	0002cac0 	call	2cac <_dtoa_r>
    1d68:	1021883a 	mov	r16,r2
    1d6c:	008019c4 	movi	r2,103
    1d70:	d8c03c17 	ldw	r3,240(sp)
    1d74:	da003d17 	ldw	r8,244(sp)
    1d78:	88817126 	beq	r17,r2,2340 <___vfprintf_internal_r+0x1dc4>
    1d7c:	008011c4 	movi	r2,71
    1d80:	88829126 	beq	r17,r2,27c8 <___vfprintf_internal_r+0x224c>
    1d84:	80f9883a 	add	fp,r16,r3
    1d88:	d9003617 	ldw	r4,216(sp)
    1d8c:	000d883a 	mov	r6,zero
    1d90:	000f883a 	mov	r7,zero
    1d94:	980b883a 	mov	r5,r19
    1d98:	da003d15 	stw	r8,244(sp)
    1d9c:	000bcbc0 	call	bcbc <__eqdf2>
    1da0:	da003d17 	ldw	r8,244(sp)
    1da4:	10018d26 	beq	r2,zero,23dc <___vfprintf_internal_r+0x1e60>
    1da8:	d8802117 	ldw	r2,132(sp)
    1dac:	1700062e 	bgeu	r2,fp,1dc8 <___vfprintf_internal_r+0x184c>
    1db0:	01000c04 	movi	r4,48
    1db4:	10c00044 	addi	r3,r2,1
    1db8:	d8c02115 	stw	r3,132(sp)
    1dbc:	11000005 	stb	r4,0(r2)
    1dc0:	d8802117 	ldw	r2,132(sp)
    1dc4:	173ffb36 	bltu	r2,fp,1db4 <__alt_data_end+0xfffe1db4>
    1dc8:	1405c83a 	sub	r2,r2,r16
    1dcc:	d8803315 	stw	r2,204(sp)
    1dd0:	008011c4 	movi	r2,71
    1dd4:	b0817626 	beq	r22,r2,23b0 <___vfprintf_internal_r+0x1e34>
    1dd8:	00801944 	movi	r2,101
    1ddc:	1442800e 	bge	r2,r17,27e0 <___vfprintf_internal_r+0x2264>
    1de0:	d8c02617 	ldw	r3,152(sp)
    1de4:	00801984 	movi	r2,102
    1de8:	d8c03215 	stw	r3,200(sp)
    1dec:	8881fe26 	beq	r17,r2,25e8 <___vfprintf_internal_r+0x206c>
    1df0:	d8c03217 	ldw	r3,200(sp)
    1df4:	d9003317 	ldw	r4,204(sp)
    1df8:	1901dd16 	blt	r3,r4,2570 <___vfprintf_internal_r+0x1ff4>
    1dfc:	9480004c 	andi	r18,r18,1
    1e00:	90022b1e 	bne	r18,zero,26b0 <___vfprintf_internal_r+0x2134>
    1e04:	1805883a 	mov	r2,r3
    1e08:	18028316 	blt	r3,zero,2818 <___vfprintf_internal_r+0x229c>
    1e0c:	d8c03217 	ldw	r3,200(sp)
    1e10:	044019c4 	movi	r17,103
    1e14:	d8c02b15 	stw	r3,172(sp)
    1e18:	df002907 	ldb	fp,164(sp)
    1e1c:	e001531e 	bne	fp,zero,236c <___vfprintf_internal_r+0x1df0>
    1e20:	df002783 	ldbu	fp,158(sp)
    1e24:	d8802915 	stw	r2,164(sp)
    1e28:	dc802c17 	ldw	r18,176(sp)
    1e2c:	d8002a15 	stw	zero,168(sp)
    1e30:	003baf06 	br	cf0 <__alt_data_end+0xfffe0cf0>
    1e34:	d8c02e17 	ldw	r3,184(sp)
    1e38:	d9002e17 	ldw	r4,184(sp)
    1e3c:	d9402e17 	ldw	r5,184(sp)
    1e40:	18c00017 	ldw	r3,0(r3)
    1e44:	21000117 	ldw	r4,4(r4)
    1e48:	29400204 	addi	r5,r5,8
    1e4c:	d8c03615 	stw	r3,216(sp)
    1e50:	d9003815 	stw	r4,224(sp)
    1e54:	d9402e15 	stw	r5,184(sp)
    1e58:	003b5006 	br	b9c <__alt_data_end+0xfffe0b9c>
    1e5c:	ac400007 	ldb	r17,0(r21)
    1e60:	003a2806 	br	704 <__alt_data_end+0xfffe0704>
    1e64:	9080100c 	andi	r2,r18,64
    1e68:	1000a826 	beq	r2,zero,210c <___vfprintf_internal_r+0x1b90>
    1e6c:	d8c02e17 	ldw	r3,184(sp)
    1e70:	002d883a 	mov	r22,zero
    1e74:	1cc0000b 	ldhu	r19,0(r3)
    1e78:	18c00104 	addi	r3,r3,4
    1e7c:	d8c02e15 	stw	r3,184(sp)
    1e80:	003caf06 	br	1140 <__alt_data_end+0xfffe1140>
    1e84:	d9002e17 	ldw	r4,184(sp)
    1e88:	d9402a17 	ldw	r5,168(sp)
    1e8c:	002d883a 	mov	r22,zero
    1e90:	20800104 	addi	r2,r4,4
    1e94:	24c00017 	ldw	r19,0(r4)
    1e98:	283ebb0e 	bge	r5,zero,1988 <__alt_data_end+0xfffe1988>
    1e9c:	003ef106 	br	1a64 <__alt_data_end+0xfffe1a64>
    1ea0:	9080040c 	andi	r2,r18,16
    1ea4:	1000921e 	bne	r2,zero,20f0 <___vfprintf_internal_r+0x1b74>
    1ea8:	9480100c 	andi	r18,r18,64
    1eac:	90013926 	beq	r18,zero,2394 <___vfprintf_internal_r+0x1e18>
    1eb0:	d9402e17 	ldw	r5,184(sp)
    1eb4:	d8c02f17 	ldw	r3,188(sp)
    1eb8:	28800017 	ldw	r2,0(r5)
    1ebc:	29400104 	addi	r5,r5,4
    1ec0:	d9402e15 	stw	r5,184(sp)
    1ec4:	10c0000d 	sth	r3,0(r2)
    1ec8:	0039e406 	br	65c <__alt_data_end+0xfffe065c>
    1ecc:	9080100c 	andi	r2,r18,64
    1ed0:	10008026 	beq	r2,zero,20d4 <___vfprintf_internal_r+0x1b58>
    1ed4:	d8802e17 	ldw	r2,184(sp)
    1ed8:	14c0000f 	ldh	r19,0(r2)
    1edc:	10800104 	addi	r2,r2,4
    1ee0:	d8802e15 	stw	r2,184(sp)
    1ee4:	982dd7fa 	srai	r22,r19,31
    1ee8:	b005883a 	mov	r2,r22
    1eec:	003af706 	br	acc <__alt_data_end+0xfffe0acc>
    1ef0:	9080100c 	andi	r2,r18,64
    1ef4:	d8002785 	stb	zero,158(sp)
    1ef8:	10008a1e 	bne	r2,zero,2124 <___vfprintf_internal_r+0x1ba8>
    1efc:	d9002e17 	ldw	r4,184(sp)
    1f00:	d9402a17 	ldw	r5,168(sp)
    1f04:	002d883a 	mov	r22,zero
    1f08:	20800104 	addi	r2,r4,4
    1f0c:	24c00017 	ldw	r19,0(r4)
    1f10:	283e4b0e 	bge	r5,zero,1840 <__alt_data_end+0xfffe1840>
    1f14:	9d86b03a 	or	r3,r19,r22
    1f18:	d8802e15 	stw	r2,184(sp)
    1f1c:	183e4c1e 	bne	r3,zero,1850 <__alt_data_end+0xfffe1850>
    1f20:	0039883a 	mov	fp,zero
    1f24:	0005883a 	mov	r2,zero
    1f28:	003d4006 	br	142c <__alt_data_end+0xfffe142c>
    1f2c:	01400074 	movhi	r5,1
    1f30:	297eb284 	addi	r5,r5,-1334
    1f34:	d9402c15 	stw	r5,176(sp)
    1f38:	d9402c17 	ldw	r5,176(sp)
    1f3c:	1c47883a 	add	r3,r3,r17
    1f40:	10800044 	addi	r2,r2,1
    1f44:	41400015 	stw	r5,0(r8)
    1f48:	44400115 	stw	r17,4(r8)
    1f4c:	d8c02015 	stw	r3,128(sp)
    1f50:	d8801f15 	stw	r2,124(sp)
    1f54:	010001c4 	movi	r4,7
    1f58:	20bec816 	blt	r4,r2,1a7c <__alt_data_end+0xfffe1a7c>
    1f5c:	42000204 	addi	r8,r8,8
    1f60:	003ecd06 	br	1a98 <__alt_data_end+0xfffe1a98>
    1f64:	d9002a17 	ldw	r4,168(sp)
    1f68:	d8002785 	stb	zero,158(sp)
    1f6c:	203d2d16 	blt	r4,zero,1424 <__alt_data_end+0xfffe1424>
    1f70:	00bfdfc4 	movi	r2,-129
    1f74:	90a4703a 	and	r18,r18,r2
    1f78:	003a6106 	br	900 <__alt_data_end+0xfffe0900>
    1f7c:	01000074 	movhi	r4,1
    1f80:	213eb284 	addi	r4,r4,-1334
    1f84:	d9002c15 	stw	r4,176(sp)
    1f88:	003bea06 	br	f34 <__alt_data_end+0xfffe0f34>
    1f8c:	d9002d17 	ldw	r4,180(sp)
    1f90:	d9801e04 	addi	r6,sp,120
    1f94:	b80b883a 	mov	r5,r23
    1f98:	0007d5c0 	call	7d5c <__sprint_r>
    1f9c:	103a7b1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    1fa0:	d8c02017 	ldw	r3,128(sp)
    1fa4:	da000404 	addi	r8,sp,16
    1fa8:	003d4106 	br	14b0 <__alt_data_end+0xfffe14b0>
    1fac:	d8801f17 	ldw	r2,124(sp)
    1fb0:	01400074 	movhi	r5,1
    1fb4:	01000044 	movi	r4,1
    1fb8:	18c00044 	addi	r3,r3,1
    1fbc:	10800044 	addi	r2,r2,1
    1fc0:	297eb204 	addi	r5,r5,-1336
    1fc4:	41000115 	stw	r4,4(r8)
    1fc8:	41400015 	stw	r5,0(r8)
    1fcc:	d8c02015 	stw	r3,128(sp)
    1fd0:	d8801f15 	stw	r2,124(sp)
    1fd4:	010001c4 	movi	r4,7
    1fd8:	20805c16 	blt	r4,r2,214c <___vfprintf_internal_r+0x1bd0>
    1fdc:	42000204 	addi	r8,r8,8
    1fe0:	8800041e 	bne	r17,zero,1ff4 <___vfprintf_internal_r+0x1a78>
    1fe4:	d8803317 	ldw	r2,204(sp)
    1fe8:	1000021e 	bne	r2,zero,1ff4 <___vfprintf_internal_r+0x1a78>
    1fec:	9080004c 	andi	r2,r18,1
    1ff0:	103be726 	beq	r2,zero,f90 <__alt_data_end+0xfffe0f90>
    1ff4:	d9003717 	ldw	r4,220(sp)
    1ff8:	d8801f17 	ldw	r2,124(sp)
    1ffc:	d9403417 	ldw	r5,208(sp)
    2000:	20c7883a 	add	r3,r4,r3
    2004:	10800044 	addi	r2,r2,1
    2008:	41000115 	stw	r4,4(r8)
    200c:	41400015 	stw	r5,0(r8)
    2010:	d8c02015 	stw	r3,128(sp)
    2014:	d8801f15 	stw	r2,124(sp)
    2018:	010001c4 	movi	r4,7
    201c:	20812116 	blt	r4,r2,24a4 <___vfprintf_internal_r+0x1f28>
    2020:	42000204 	addi	r8,r8,8
    2024:	0463c83a 	sub	r17,zero,r17
    2028:	0440730e 	bge	zero,r17,21f8 <___vfprintf_internal_r+0x1c7c>
    202c:	05800404 	movi	r22,16
    2030:	b440860e 	bge	r22,r17,224c <___vfprintf_internal_r+0x1cd0>
    2034:	01400074 	movhi	r5,1
    2038:	297eb284 	addi	r5,r5,-1334
    203c:	d9402c15 	stw	r5,176(sp)
    2040:	070001c4 	movi	fp,7
    2044:	dcc02d17 	ldw	r19,180(sp)
    2048:	00000306 	br	2058 <___vfprintf_internal_r+0x1adc>
    204c:	42000204 	addi	r8,r8,8
    2050:	8c7ffc04 	addi	r17,r17,-16
    2054:	b440800e 	bge	r22,r17,2258 <___vfprintf_internal_r+0x1cdc>
    2058:	18c00404 	addi	r3,r3,16
    205c:	10800044 	addi	r2,r2,1
    2060:	45000015 	stw	r20,0(r8)
    2064:	45800115 	stw	r22,4(r8)
    2068:	d8c02015 	stw	r3,128(sp)
    206c:	d8801f15 	stw	r2,124(sp)
    2070:	e0bff60e 	bge	fp,r2,204c <__alt_data_end+0xfffe204c>
    2074:	d9801e04 	addi	r6,sp,120
    2078:	b80b883a 	mov	r5,r23
    207c:	9809883a 	mov	r4,r19
    2080:	0007d5c0 	call	7d5c <__sprint_r>
    2084:	103a411e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    2088:	d8c02017 	ldw	r3,128(sp)
    208c:	d8801f17 	ldw	r2,124(sp)
    2090:	da000404 	addi	r8,sp,16
    2094:	003fee06 	br	2050 <__alt_data_end+0xfffe2050>
    2098:	00bfffc4 	movi	r2,-1
    209c:	003a3f06 	br	99c <__alt_data_end+0xfffe099c>
    20a0:	008011c4 	movi	r2,71
    20a4:	1440b816 	blt	r2,r17,2388 <___vfprintf_internal_r+0x1e0c>
    20a8:	04000074 	movhi	r16,1
    20ac:	843ea404 	addi	r16,r16,-1392
    20b0:	00c000c4 	movi	r3,3
    20b4:	00bfdfc4 	movi	r2,-129
    20b8:	d8c02915 	stw	r3,164(sp)
    20bc:	90a4703a 	and	r18,r18,r2
    20c0:	df002783 	ldbu	fp,158(sp)
    20c4:	d8c02b15 	stw	r3,172(sp)
    20c8:	d8002a15 	stw	zero,168(sp)
    20cc:	d8003215 	stw	zero,200(sp)
    20d0:	003b0706 	br	cf0 <__alt_data_end+0xfffe0cf0>
    20d4:	d8c02e17 	ldw	r3,184(sp)
    20d8:	1cc00017 	ldw	r19,0(r3)
    20dc:	18c00104 	addi	r3,r3,4
    20e0:	d8c02e15 	stw	r3,184(sp)
    20e4:	982dd7fa 	srai	r22,r19,31
    20e8:	b005883a 	mov	r2,r22
    20ec:	003a7706 	br	acc <__alt_data_end+0xfffe0acc>
    20f0:	d8c02e17 	ldw	r3,184(sp)
    20f4:	d9002f17 	ldw	r4,188(sp)
    20f8:	18800017 	ldw	r2,0(r3)
    20fc:	18c00104 	addi	r3,r3,4
    2100:	d8c02e15 	stw	r3,184(sp)
    2104:	11000015 	stw	r4,0(r2)
    2108:	00395406 	br	65c <__alt_data_end+0xfffe065c>
    210c:	d9002e17 	ldw	r4,184(sp)
    2110:	002d883a 	mov	r22,zero
    2114:	24c00017 	ldw	r19,0(r4)
    2118:	21000104 	addi	r4,r4,4
    211c:	d9002e15 	stw	r4,184(sp)
    2120:	003c0706 	br	1140 <__alt_data_end+0xfffe1140>
    2124:	d9402e17 	ldw	r5,184(sp)
    2128:	d8c02a17 	ldw	r3,168(sp)
    212c:	002d883a 	mov	r22,zero
    2130:	28800104 	addi	r2,r5,4
    2134:	2cc0000b 	ldhu	r19,0(r5)
    2138:	183dc10e 	bge	r3,zero,1840 <__alt_data_end+0xfffe1840>
    213c:	003f7506 	br	1f14 <__alt_data_end+0xfffe1f14>
    2140:	04000074 	movhi	r16,1
    2144:	843ea204 	addi	r16,r16,-1400
    2148:	003aa706 	br	be8 <__alt_data_end+0xfffe0be8>
    214c:	d9002d17 	ldw	r4,180(sp)
    2150:	d9801e04 	addi	r6,sp,120
    2154:	b80b883a 	mov	r5,r23
    2158:	0007d5c0 	call	7d5c <__sprint_r>
    215c:	103a0b1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    2160:	dc402617 	ldw	r17,152(sp)
    2164:	d8c02017 	ldw	r3,128(sp)
    2168:	da000404 	addi	r8,sp,16
    216c:	003f9c06 	br	1fe0 <__alt_data_end+0xfffe1fe0>
    2170:	ac400043 	ldbu	r17,1(r21)
    2174:	84000814 	ori	r16,r16,32
    2178:	ad400044 	addi	r21,r21,1
    217c:	8c403fcc 	andi	r17,r17,255
    2180:	8c40201c 	xori	r17,r17,128
    2184:	8c7fe004 	addi	r17,r17,-128
    2188:	00395e06 	br	704 <__alt_data_end+0xfffe0704>
    218c:	d8c02e15 	stw	r3,184(sp)
    2190:	0039883a 	mov	fp,zero
    2194:	003e3506 	br	1a6c <__alt_data_end+0xfffe1a6c>
    2198:	d9002d17 	ldw	r4,180(sp)
    219c:	d9801e04 	addi	r6,sp,120
    21a0:	b80b883a 	mov	r5,r23
    21a4:	0007d5c0 	call	7d5c <__sprint_r>
    21a8:	1039f81e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    21ac:	d8c02017 	ldw	r3,128(sp)
    21b0:	da000404 	addi	r8,sp,16
    21b4:	003cd006 	br	14f8 <__alt_data_end+0xfffe14f8>
    21b8:	8009883a 	mov	r4,r16
    21bc:	df003d15 	stw	fp,244(sp)
    21c0:	00004e40 	call	4e4 <strlen>
    21c4:	d8802b15 	stw	r2,172(sp)
    21c8:	da003d17 	ldw	r8,244(sp)
    21cc:	103c200e 	bge	r2,zero,1250 <__alt_data_end+0xfffe1250>
    21d0:	0005883a 	mov	r2,zero
    21d4:	003c1e06 	br	1250 <__alt_data_end+0xfffe1250>
    21d8:	d9002d17 	ldw	r4,180(sp)
    21dc:	d9801e04 	addi	r6,sp,120
    21e0:	b80b883a 	mov	r5,r23
    21e4:	0007d5c0 	call	7d5c <__sprint_r>
    21e8:	1039e81e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    21ec:	d8c02017 	ldw	r3,128(sp)
    21f0:	d8801f17 	ldw	r2,124(sp)
    21f4:	da000404 	addi	r8,sp,16
    21f8:	d9403317 	ldw	r5,204(sp)
    21fc:	10800044 	addi	r2,r2,1
    2200:	44000015 	stw	r16,0(r8)
    2204:	28c7883a 	add	r3,r5,r3
    2208:	003b5b06 	br	f78 <__alt_data_end+0xfffe0f78>
    220c:	01000074 	movhi	r4,1
    2210:	213eb684 	addi	r4,r4,-1318
    2214:	d9003515 	stw	r4,212(sp)
    2218:	003af206 	br	de4 <__alt_data_end+0xfffe0de4>
    221c:	013fffc4 	movi	r4,-1
    2220:	003a0806 	br	a44 <__alt_data_end+0xfffe0a44>
    2224:	0023883a 	mov	r17,zero
    2228:	003d9d06 	br	18a0 <__alt_data_end+0xfffe18a0>
    222c:	d9002d17 	ldw	r4,180(sp)
    2230:	d9801e04 	addi	r6,sp,120
    2234:	b80b883a 	mov	r5,r23
    2238:	0007d5c0 	call	7d5c <__sprint_r>
    223c:	1039d31e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    2240:	d8c02017 	ldw	r3,128(sp)
    2244:	da000404 	addi	r8,sp,16
    2248:	003d9406 	br	189c <__alt_data_end+0xfffe189c>
    224c:	01000074 	movhi	r4,1
    2250:	213eb284 	addi	r4,r4,-1334
    2254:	d9002c15 	stw	r4,176(sp)
    2258:	d9002c17 	ldw	r4,176(sp)
    225c:	1c47883a 	add	r3,r3,r17
    2260:	10800044 	addi	r2,r2,1
    2264:	41000015 	stw	r4,0(r8)
    2268:	44400115 	stw	r17,4(r8)
    226c:	d8c02015 	stw	r3,128(sp)
    2270:	d8801f15 	stw	r2,124(sp)
    2274:	010001c4 	movi	r4,7
    2278:	20bfd716 	blt	r4,r2,21d8 <__alt_data_end+0xfffe21d8>
    227c:	42000204 	addi	r8,r8,8
    2280:	003fdd06 	br	21f8 <__alt_data_end+0xfffe21f8>
    2284:	d9002d17 	ldw	r4,180(sp)
    2288:	d9801e04 	addi	r6,sp,120
    228c:	b80b883a 	mov	r5,r23
    2290:	0007d5c0 	call	7d5c <__sprint_r>
    2294:	1039bd1e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    2298:	d8802617 	ldw	r2,152(sp)
    229c:	d8c02017 	ldw	r3,128(sp)
    22a0:	da000404 	addi	r8,sp,16
    22a4:	003e1006 	br	1ae8 <__alt_data_end+0xfffe1ae8>
    22a8:	00800044 	movi	r2,1
    22ac:	10803fcc 	andi	r2,r2,255
    22b0:	00c00044 	movi	r3,1
    22b4:	10fa0d26 	beq	r2,r3,aec <__alt_data_end+0xfffe0aec>
    22b8:	00c00084 	movi	r3,2
    22bc:	10fbaf26 	beq	r2,r3,117c <__alt_data_end+0xfffe117c>
    22c0:	003a6d06 	br	c78 <__alt_data_end+0xfffe0c78>
    22c4:	01000074 	movhi	r4,1
    22c8:	213eb684 	addi	r4,r4,-1318
    22cc:	d9003515 	stw	r4,212(sp)
    22d0:	003b5406 	br	1024 <__alt_data_end+0xfffe1024>
    22d4:	d8802a17 	ldw	r2,168(sp)
    22d8:	00c00184 	movi	r3,6
    22dc:	1880012e 	bgeu	r3,r2,22e4 <___vfprintf_internal_r+0x1d68>
    22e0:	1805883a 	mov	r2,r3
    22e4:	d8802b15 	stw	r2,172(sp)
    22e8:	1000ef16 	blt	r2,zero,26a8 <___vfprintf_internal_r+0x212c>
    22ec:	04000074 	movhi	r16,1
    22f0:	d8802915 	stw	r2,164(sp)
    22f4:	dcc02e15 	stw	r19,184(sp)
    22f8:	d8002a15 	stw	zero,168(sp)
    22fc:	d8003215 	stw	zero,200(sp)
    2300:	843eb004 	addi	r16,r16,-1344
    2304:	0039883a 	mov	fp,zero
    2308:	003a8006 	br	d0c <__alt_data_end+0xfffe0d0c>
    230c:	0021883a 	mov	r16,zero
    2310:	003e0706 	br	1b30 <__alt_data_end+0xfffe1b30>
    2314:	d9002d17 	ldw	r4,180(sp)
    2318:	d9801e04 	addi	r6,sp,120
    231c:	b80b883a 	mov	r5,r23
    2320:	0007d5c0 	call	7d5c <__sprint_r>
    2324:	1039991e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    2328:	d8802617 	ldw	r2,152(sp)
    232c:	d9403317 	ldw	r5,204(sp)
    2330:	d8c02017 	ldw	r3,128(sp)
    2334:	da000404 	addi	r8,sp,16
    2338:	2885c83a 	sub	r2,r5,r2
    233c:	003dfb06 	br	1b2c <__alt_data_end+0xfffe1b2c>
    2340:	9080004c 	andi	r2,r18,1
    2344:	103e8f1e 	bne	r2,zero,1d84 <__alt_data_end+0xfffe1d84>
    2348:	d8802117 	ldw	r2,132(sp)
    234c:	003e9e06 	br	1dc8 <__alt_data_end+0xfffe1dc8>
    2350:	1025883a 	mov	r18,r2
    2354:	0039883a 	mov	fp,zero
    2358:	00800084 	movi	r2,2
    235c:	003fd306 	br	22ac <__alt_data_end+0xfffe22ac>
    2360:	07000b44 	movi	fp,45
    2364:	df002785 	stb	fp,158(sp)
    2368:	003a1b06 	br	bd8 <__alt_data_end+0xfffe0bd8>
    236c:	00c00b44 	movi	r3,45
    2370:	d8c02785 	stb	r3,158(sp)
    2374:	d8802915 	stw	r2,164(sp)
    2378:	dc802c17 	ldw	r18,176(sp)
    237c:	d8002a15 	stw	zero,168(sp)
    2380:	07000b44 	movi	fp,45
    2384:	003a5e06 	br	d00 <__alt_data_end+0xfffe0d00>
    2388:	04000074 	movhi	r16,1
    238c:	843ea504 	addi	r16,r16,-1388
    2390:	003f4706 	br	20b0 <__alt_data_end+0xfffe20b0>
    2394:	d9002e17 	ldw	r4,184(sp)
    2398:	d9402f17 	ldw	r5,188(sp)
    239c:	20800017 	ldw	r2,0(r4)
    23a0:	21000104 	addi	r4,r4,4
    23a4:	d9002e15 	stw	r4,184(sp)
    23a8:	11400015 	stw	r5,0(r2)
    23ac:	0038ab06 	br	65c <__alt_data_end+0xfffe065c>
    23b0:	dd802617 	ldw	r22,152(sp)
    23b4:	00bfff44 	movi	r2,-3
    23b8:	b0801c16 	blt	r22,r2,242c <___vfprintf_internal_r+0x1eb0>
    23bc:	d9402a17 	ldw	r5,168(sp)
    23c0:	2d801a16 	blt	r5,r22,242c <___vfprintf_internal_r+0x1eb0>
    23c4:	dd803215 	stw	r22,200(sp)
    23c8:	003e8906 	br	1df0 <__alt_data_end+0xfffe1df0>
    23cc:	01000074 	movhi	r4,1
    23d0:	213eb284 	addi	r4,r4,-1334
    23d4:	d9002c15 	stw	r4,176(sp)
    23d8:	003c9106 	br	1620 <__alt_data_end+0xfffe1620>
    23dc:	e005883a 	mov	r2,fp
    23e0:	003e7906 	br	1dc8 <__alt_data_end+0xfffe1dc8>
    23e4:	d9002a17 	ldw	r4,168(sp)
    23e8:	df002783 	ldbu	fp,158(sp)
    23ec:	dcc02e15 	stw	r19,184(sp)
    23f0:	d9002915 	stw	r4,164(sp)
    23f4:	d9002b15 	stw	r4,172(sp)
    23f8:	d8002a15 	stw	zero,168(sp)
    23fc:	d8003215 	stw	zero,200(sp)
    2400:	003a3b06 	br	cf0 <__alt_data_end+0xfffe0cf0>
    2404:	9080004c 	andi	r2,r18,1
    2408:	0039883a 	mov	fp,zero
    240c:	10000426 	beq	r2,zero,2420 <___vfprintf_internal_r+0x1ea4>
    2410:	00800c04 	movi	r2,48
    2414:	dc001dc4 	addi	r16,sp,119
    2418:	d8801dc5 	stb	r2,119(sp)
    241c:	003b6406 	br	11b0 <__alt_data_end+0xfffe11b0>
    2420:	d8002b15 	stw	zero,172(sp)
    2424:	dc001e04 	addi	r16,sp,120
    2428:	003a2b06 	br	cd8 <__alt_data_end+0xfffe0cd8>
    242c:	8c7fff84 	addi	r17,r17,-2
    2430:	b5bfffc4 	addi	r22,r22,-1
    2434:	dd802615 	stw	r22,152(sp)
    2438:	dc4022c5 	stb	r17,139(sp)
    243c:	b000bf16 	blt	r22,zero,273c <___vfprintf_internal_r+0x21c0>
    2440:	00800ac4 	movi	r2,43
    2444:	d8802305 	stb	r2,140(sp)
    2448:	00800244 	movi	r2,9
    244c:	15807016 	blt	r2,r22,2610 <___vfprintf_internal_r+0x2094>
    2450:	00800c04 	movi	r2,48
    2454:	b5800c04 	addi	r22,r22,48
    2458:	d8802345 	stb	r2,141(sp)
    245c:	dd802385 	stb	r22,142(sp)
    2460:	d88023c4 	addi	r2,sp,143
    2464:	df0022c4 	addi	fp,sp,139
    2468:	d8c03317 	ldw	r3,204(sp)
    246c:	1739c83a 	sub	fp,r2,fp
    2470:	d9003317 	ldw	r4,204(sp)
    2474:	e0c7883a 	add	r3,fp,r3
    2478:	df003a15 	stw	fp,232(sp)
    247c:	d8c02b15 	stw	r3,172(sp)
    2480:	00800044 	movi	r2,1
    2484:	1100b30e 	bge	r2,r4,2754 <___vfprintf_internal_r+0x21d8>
    2488:	d8c02b17 	ldw	r3,172(sp)
    248c:	18c00044 	addi	r3,r3,1
    2490:	d8c02b15 	stw	r3,172(sp)
    2494:	1805883a 	mov	r2,r3
    2498:	1800ac16 	blt	r3,zero,274c <___vfprintf_internal_r+0x21d0>
    249c:	d8003215 	stw	zero,200(sp)
    24a0:	003e5d06 	br	1e18 <__alt_data_end+0xfffe1e18>
    24a4:	d9002d17 	ldw	r4,180(sp)
    24a8:	d9801e04 	addi	r6,sp,120
    24ac:	b80b883a 	mov	r5,r23
    24b0:	0007d5c0 	call	7d5c <__sprint_r>
    24b4:	1039351e 	bne	r2,zero,98c <__alt_data_end+0xfffe098c>
    24b8:	dc402617 	ldw	r17,152(sp)
    24bc:	d8c02017 	ldw	r3,128(sp)
    24c0:	d8801f17 	ldw	r2,124(sp)
    24c4:	da000404 	addi	r8,sp,16
    24c8:	003ed606 	br	2024 <__alt_data_end+0xfffe2024>
    24cc:	182b883a 	mov	r21,r3
    24d0:	d8002a15 	stw	zero,168(sp)
    24d4:	00388c06 	br	708 <__alt_data_end+0xfffe0708>
    24d8:	d8802a17 	ldw	r2,168(sp)
    24dc:	103e071e 	bne	r2,zero,1cfc <__alt_data_end+0xfffe1cfc>
    24e0:	dc002a15 	stw	r16,168(sp)
    24e4:	003e0506 	br	1cfc <__alt_data_end+0xfffe1cfc>
    24e8:	d9002a17 	ldw	r4,168(sp)
    24ec:	20c00044 	addi	r3,r4,1
    24f0:	003e0f06 	br	1d30 <__alt_data_end+0xfffe1d30>
    24f4:	01400184 	movi	r5,6
    24f8:	d9402a15 	stw	r5,168(sp)
    24fc:	003dff06 	br	1cfc <__alt_data_end+0xfffe1cfc>
    2500:	d8802104 	addi	r2,sp,132
    2504:	d8800315 	stw	r2,12(sp)
    2508:	d8802504 	addi	r2,sp,148
    250c:	d8800215 	stw	r2,8(sp)
    2510:	d8802604 	addi	r2,sp,152
    2514:	d8800115 	stw	r2,4(sp)
    2518:	d8802a17 	ldw	r2,168(sp)
    251c:	d9403617 	ldw	r5,216(sp)
    2520:	d9002d17 	ldw	r4,180(sp)
    2524:	d8800015 	stw	r2,0(sp)
    2528:	01c000c4 	movi	r7,3
    252c:	980d883a 	mov	r6,r19
    2530:	da003d15 	stw	r8,244(sp)
    2534:	0002cac0 	call	2cac <_dtoa_r>
    2538:	d8c02a17 	ldw	r3,168(sp)
    253c:	da003d17 	ldw	r8,244(sp)
    2540:	1021883a 	mov	r16,r2
    2544:	10f9883a 	add	fp,r2,r3
    2548:	81000007 	ldb	r4,0(r16)
    254c:	00800c04 	movi	r2,48
    2550:	20805e26 	beq	r4,r2,26cc <___vfprintf_internal_r+0x2150>
    2554:	d8c02617 	ldw	r3,152(sp)
    2558:	e0f9883a 	add	fp,fp,r3
    255c:	003e0a06 	br	1d88 <__alt_data_end+0xfffe1d88>
    2560:	00c00b44 	movi	r3,45
    2564:	24e0003c 	xorhi	r19,r4,32768
    2568:	d8c02905 	stb	r3,164(sp)
    256c:	003de906 	br	1d14 <__alt_data_end+0xfffe1d14>
    2570:	d8c03217 	ldw	r3,200(sp)
    2574:	00c07a0e 	bge	zero,r3,2760 <___vfprintf_internal_r+0x21e4>
    2578:	00800044 	movi	r2,1
    257c:	d9003317 	ldw	r4,204(sp)
    2580:	1105883a 	add	r2,r2,r4
    2584:	d8802b15 	stw	r2,172(sp)
    2588:	10004e16 	blt	r2,zero,26c4 <___vfprintf_internal_r+0x2148>
    258c:	044019c4 	movi	r17,103
    2590:	003e2106 	br	1e18 <__alt_data_end+0xfffe1e18>
    2594:	d9002a17 	ldw	r4,168(sp)
    2598:	d8802104 	addi	r2,sp,132
    259c:	d8800315 	stw	r2,12(sp)
    25a0:	d9000015 	stw	r4,0(sp)
    25a4:	d8802504 	addi	r2,sp,148
    25a8:	d9403617 	ldw	r5,216(sp)
    25ac:	d9002d17 	ldw	r4,180(sp)
    25b0:	d8800215 	stw	r2,8(sp)
    25b4:	d8802604 	addi	r2,sp,152
    25b8:	d8800115 	stw	r2,4(sp)
    25bc:	01c000c4 	movi	r7,3
    25c0:	980d883a 	mov	r6,r19
    25c4:	da003d15 	stw	r8,244(sp)
    25c8:	0002cac0 	call	2cac <_dtoa_r>
    25cc:	d8c02a17 	ldw	r3,168(sp)
    25d0:	da003d17 	ldw	r8,244(sp)
    25d4:	1021883a 	mov	r16,r2
    25d8:	00801184 	movi	r2,70
    25dc:	80f9883a 	add	fp,r16,r3
    25e0:	88bfd926 	beq	r17,r2,2548 <__alt_data_end+0xfffe2548>
    25e4:	003de806 	br	1d88 <__alt_data_end+0xfffe1d88>
    25e8:	d9002a17 	ldw	r4,168(sp)
    25ec:	00c04d0e 	bge	zero,r3,2724 <___vfprintf_internal_r+0x21a8>
    25f0:	2000441e 	bne	r4,zero,2704 <___vfprintf_internal_r+0x2188>
    25f4:	9480004c 	andi	r18,r18,1
    25f8:	9000421e 	bne	r18,zero,2704 <___vfprintf_internal_r+0x2188>
    25fc:	1805883a 	mov	r2,r3
    2600:	18006f16 	blt	r3,zero,27c0 <___vfprintf_internal_r+0x2244>
    2604:	d8c03217 	ldw	r3,200(sp)
    2608:	d8c02b15 	stw	r3,172(sp)
    260c:	003e0206 	br	1e18 <__alt_data_end+0xfffe1e18>
    2610:	df0022c4 	addi	fp,sp,139
    2614:	dc002a15 	stw	r16,168(sp)
    2618:	4027883a 	mov	r19,r8
    261c:	e021883a 	mov	r16,fp
    2620:	b009883a 	mov	r4,r22
    2624:	01400284 	movi	r5,10
    2628:	000a8e80 	call	a8e8 <__modsi3>
    262c:	10800c04 	addi	r2,r2,48
    2630:	843fffc4 	addi	r16,r16,-1
    2634:	b009883a 	mov	r4,r22
    2638:	01400284 	movi	r5,10
    263c:	80800005 	stb	r2,0(r16)
    2640:	000a8640 	call	a864 <__divsi3>
    2644:	102d883a 	mov	r22,r2
    2648:	00800244 	movi	r2,9
    264c:	15bff416 	blt	r2,r22,2620 <__alt_data_end+0xfffe2620>
    2650:	9811883a 	mov	r8,r19
    2654:	b0800c04 	addi	r2,r22,48
    2658:	8027883a 	mov	r19,r16
    265c:	997fffc4 	addi	r5,r19,-1
    2660:	98bfffc5 	stb	r2,-1(r19)
    2664:	dc002a17 	ldw	r16,168(sp)
    2668:	2f006d2e 	bgeu	r5,fp,2820 <___vfprintf_internal_r+0x22a4>
    266c:	d9c02384 	addi	r7,sp,142
    2670:	3ccfc83a 	sub	r7,r7,r19
    2674:	d9002344 	addi	r4,sp,141
    2678:	e1cf883a 	add	r7,fp,r7
    267c:	00000106 	br	2684 <___vfprintf_internal_r+0x2108>
    2680:	28800003 	ldbu	r2,0(r5)
    2684:	20800005 	stb	r2,0(r4)
    2688:	21000044 	addi	r4,r4,1
    268c:	29400044 	addi	r5,r5,1
    2690:	393ffb1e 	bne	r7,r4,2680 <__alt_data_end+0xfffe2680>
    2694:	d8802304 	addi	r2,sp,140
    2698:	14c5c83a 	sub	r2,r2,r19
    269c:	d8c02344 	addi	r3,sp,141
    26a0:	1885883a 	add	r2,r3,r2
    26a4:	003f7006 	br	2468 <__alt_data_end+0xfffe2468>
    26a8:	0005883a 	mov	r2,zero
    26ac:	003f0f06 	br	22ec <__alt_data_end+0xfffe22ec>
    26b0:	d8c03217 	ldw	r3,200(sp)
    26b4:	18c00044 	addi	r3,r3,1
    26b8:	d8c02b15 	stw	r3,172(sp)
    26bc:	1805883a 	mov	r2,r3
    26c0:	183fb20e 	bge	r3,zero,258c <__alt_data_end+0xfffe258c>
    26c4:	0005883a 	mov	r2,zero
    26c8:	003fb006 	br	258c <__alt_data_end+0xfffe258c>
    26cc:	d9003617 	ldw	r4,216(sp)
    26d0:	000d883a 	mov	r6,zero
    26d4:	000f883a 	mov	r7,zero
    26d8:	980b883a 	mov	r5,r19
    26dc:	d8c03c15 	stw	r3,240(sp)
    26e0:	da003d15 	stw	r8,244(sp)
    26e4:	000bcbc0 	call	bcbc <__eqdf2>
    26e8:	d8c03c17 	ldw	r3,240(sp)
    26ec:	da003d17 	ldw	r8,244(sp)
    26f0:	103f9826 	beq	r2,zero,2554 <__alt_data_end+0xfffe2554>
    26f4:	00800044 	movi	r2,1
    26f8:	10c7c83a 	sub	r3,r2,r3
    26fc:	d8c02615 	stw	r3,152(sp)
    2700:	003f9506 	br	2558 <__alt_data_end+0xfffe2558>
    2704:	d9002a17 	ldw	r4,168(sp)
    2708:	d8c03217 	ldw	r3,200(sp)
    270c:	20800044 	addi	r2,r4,1
    2710:	1885883a 	add	r2,r3,r2
    2714:	d8802b15 	stw	r2,172(sp)
    2718:	103dbf0e 	bge	r2,zero,1e18 <__alt_data_end+0xfffe1e18>
    271c:	0005883a 	mov	r2,zero
    2720:	003dbd06 	br	1e18 <__alt_data_end+0xfffe1e18>
    2724:	2000201e 	bne	r4,zero,27a8 <___vfprintf_internal_r+0x222c>
    2728:	9480004c 	andi	r18,r18,1
    272c:	90001e1e 	bne	r18,zero,27a8 <___vfprintf_internal_r+0x222c>
    2730:	00800044 	movi	r2,1
    2734:	d8802b15 	stw	r2,172(sp)
    2738:	003db706 	br	1e18 <__alt_data_end+0xfffe1e18>
    273c:	00800b44 	movi	r2,45
    2740:	05adc83a 	sub	r22,zero,r22
    2744:	d8802305 	stb	r2,140(sp)
    2748:	003f3f06 	br	2448 <__alt_data_end+0xfffe2448>
    274c:	0005883a 	mov	r2,zero
    2750:	003f5206 	br	249c <__alt_data_end+0xfffe249c>
    2754:	90a4703a 	and	r18,r18,r2
    2758:	903f4e26 	beq	r18,zero,2494 <__alt_data_end+0xfffe2494>
    275c:	003f4a06 	br	2488 <__alt_data_end+0xfffe2488>
    2760:	00800084 	movi	r2,2
    2764:	10c5c83a 	sub	r2,r2,r3
    2768:	003f8406 	br	257c <__alt_data_end+0xfffe257c>
    276c:	d9402e17 	ldw	r5,184(sp)
    2770:	d9002e17 	ldw	r4,184(sp)
    2774:	ac400043 	ldbu	r17,1(r21)
    2778:	29400017 	ldw	r5,0(r5)
    277c:	20800104 	addi	r2,r4,4
    2780:	d8802e15 	stw	r2,184(sp)
    2784:	d9402a15 	stw	r5,168(sp)
    2788:	182b883a 	mov	r21,r3
    278c:	283e7b0e 	bge	r5,zero,217c <__alt_data_end+0xfffe217c>
    2790:	8c403fcc 	andi	r17,r17,255
    2794:	017fffc4 	movi	r5,-1
    2798:	8c40201c 	xori	r17,r17,128
    279c:	d9402a15 	stw	r5,168(sp)
    27a0:	8c7fe004 	addi	r17,r17,-128
    27a4:	0037d706 	br	704 <__alt_data_end+0xfffe0704>
    27a8:	d8c02a17 	ldw	r3,168(sp)
    27ac:	18c00084 	addi	r3,r3,2
    27b0:	d8c02b15 	stw	r3,172(sp)
    27b4:	1805883a 	mov	r2,r3
    27b8:	183d970e 	bge	r3,zero,1e18 <__alt_data_end+0xfffe1e18>
    27bc:	003fd706 	br	271c <__alt_data_end+0xfffe271c>
    27c0:	0005883a 	mov	r2,zero
    27c4:	003f8f06 	br	2604 <__alt_data_end+0xfffe2604>
    27c8:	9080004c 	andi	r2,r18,1
    27cc:	103f821e 	bne	r2,zero,25d8 <__alt_data_end+0xfffe25d8>
    27d0:	d8802117 	ldw	r2,132(sp)
    27d4:	1405c83a 	sub	r2,r2,r16
    27d8:	d8803315 	stw	r2,204(sp)
    27dc:	b47ef426 	beq	r22,r17,23b0 <__alt_data_end+0xfffe23b0>
    27e0:	dd802617 	ldw	r22,152(sp)
    27e4:	003f1206 	br	2430 <__alt_data_end+0xfffe2430>
    27e8:	d8c02b03 	ldbu	r3,172(sp)
    27ec:	d8c02785 	stb	r3,158(sp)
    27f0:	0038df06 	br	b70 <__alt_data_end+0xfffe0b70>
    27f4:	d8c02b03 	ldbu	r3,172(sp)
    27f8:	d8c02785 	stb	r3,158(sp)
    27fc:	0038aa06 	br	aa8 <__alt_data_end+0xfffe0aa8>
    2800:	d8c02b03 	ldbu	r3,172(sp)
    2804:	d8c02785 	stb	r3,158(sp)
    2808:	003a4306 	br	1118 <__alt_data_end+0xfffe1118>
    280c:	d8c02b03 	ldbu	r3,172(sp)
    2810:	d8c02785 	stb	r3,158(sp)
    2814:	003af506 	br	13ec <__alt_data_end+0xfffe13ec>
    2818:	0005883a 	mov	r2,zero
    281c:	003d7b06 	br	1e0c <__alt_data_end+0xfffe1e0c>
    2820:	d8802344 	addi	r2,sp,141
    2824:	003f1006 	br	2468 <__alt_data_end+0xfffe2468>
    2828:	d8c02b03 	ldbu	r3,172(sp)
    282c:	d8c02785 	stb	r3,158(sp)
    2830:	0038fd06 	br	c28 <__alt_data_end+0xfffe0c28>
    2834:	d8c02b03 	ldbu	r3,172(sp)
    2838:	d8c02785 	stb	r3,158(sp)
    283c:	003a9706 	br	129c <__alt_data_end+0xfffe129c>
    2840:	d8c02b03 	ldbu	r3,172(sp)
    2844:	d8c02785 	stb	r3,158(sp)
    2848:	003a1806 	br	10ac <__alt_data_end+0xfffe10ac>
    284c:	d8c02b03 	ldbu	r3,172(sp)
    2850:	d8c02785 	stb	r3,158(sp)
    2854:	003abe06 	br	1350 <__alt_data_end+0xfffe1350>

00002858 <__vfprintf_internal>:
    2858:	00800074 	movhi	r2,1
    285c:	10860b04 	addi	r2,r2,6188
    2860:	300f883a 	mov	r7,r6
    2864:	280d883a 	mov	r6,r5
    2868:	200b883a 	mov	r5,r4
    286c:	11000017 	ldw	r4,0(r2)
    2870:	000057c1 	jmpi	57c <___vfprintf_internal_r>

00002874 <__sbprintf>:
    2874:	2880030b 	ldhu	r2,12(r5)
    2878:	2ac01917 	ldw	r11,100(r5)
    287c:	2a80038b 	ldhu	r10,14(r5)
    2880:	2a400717 	ldw	r9,28(r5)
    2884:	2a000917 	ldw	r8,36(r5)
    2888:	defee204 	addi	sp,sp,-1144
    288c:	00c10004 	movi	r3,1024
    2890:	dc011a15 	stw	r16,1128(sp)
    2894:	10bfff4c 	andi	r2,r2,65533
    2898:	2821883a 	mov	r16,r5
    289c:	d8cb883a 	add	r5,sp,r3
    28a0:	dc811c15 	stw	r18,1136(sp)
    28a4:	dc411b15 	stw	r17,1132(sp)
    28a8:	dfc11d15 	stw	ra,1140(sp)
    28ac:	2025883a 	mov	r18,r4
    28b0:	d881030d 	sth	r2,1036(sp)
    28b4:	dac11915 	stw	r11,1124(sp)
    28b8:	da81038d 	sth	r10,1038(sp)
    28bc:	da410715 	stw	r9,1052(sp)
    28c0:	da010915 	stw	r8,1060(sp)
    28c4:	dec10015 	stw	sp,1024(sp)
    28c8:	dec10415 	stw	sp,1040(sp)
    28cc:	d8c10215 	stw	r3,1032(sp)
    28d0:	d8c10515 	stw	r3,1044(sp)
    28d4:	d8010615 	stw	zero,1048(sp)
    28d8:	000057c0 	call	57c <___vfprintf_internal_r>
    28dc:	1023883a 	mov	r17,r2
    28e0:	10000416 	blt	r2,zero,28f4 <__sbprintf+0x80>
    28e4:	d9410004 	addi	r5,sp,1024
    28e8:	9009883a 	mov	r4,r18
    28ec:	00045500 	call	4550 <_fflush_r>
    28f0:	10000d1e 	bne	r2,zero,2928 <__sbprintf+0xb4>
    28f4:	d881030b 	ldhu	r2,1036(sp)
    28f8:	1080100c 	andi	r2,r2,64
    28fc:	10000326 	beq	r2,zero,290c <__sbprintf+0x98>
    2900:	8080030b 	ldhu	r2,12(r16)
    2904:	10801014 	ori	r2,r2,64
    2908:	8080030d 	sth	r2,12(r16)
    290c:	8805883a 	mov	r2,r17
    2910:	dfc11d17 	ldw	ra,1140(sp)
    2914:	dc811c17 	ldw	r18,1136(sp)
    2918:	dc411b17 	ldw	r17,1132(sp)
    291c:	dc011a17 	ldw	r16,1128(sp)
    2920:	dec11e04 	addi	sp,sp,1144
    2924:	f800283a 	ret
    2928:	047fffc4 	movi	r17,-1
    292c:	003ff106 	br	28f4 <__alt_data_end+0xfffe28f4>

00002930 <__swsetup_r>:
    2930:	00800074 	movhi	r2,1
    2934:	defffd04 	addi	sp,sp,-12
    2938:	10860b04 	addi	r2,r2,6188
    293c:	dc400115 	stw	r17,4(sp)
    2940:	2023883a 	mov	r17,r4
    2944:	11000017 	ldw	r4,0(r2)
    2948:	dc000015 	stw	r16,0(sp)
    294c:	dfc00215 	stw	ra,8(sp)
    2950:	2821883a 	mov	r16,r5
    2954:	20000226 	beq	r4,zero,2960 <__swsetup_r+0x30>
    2958:	20800e17 	ldw	r2,56(r4)
    295c:	10003126 	beq	r2,zero,2a24 <__swsetup_r+0xf4>
    2960:	8080030b 	ldhu	r2,12(r16)
    2964:	10c0020c 	andi	r3,r2,8
    2968:	1009883a 	mov	r4,r2
    296c:	18000f26 	beq	r3,zero,29ac <__swsetup_r+0x7c>
    2970:	80c00417 	ldw	r3,16(r16)
    2974:	18001526 	beq	r3,zero,29cc <__swsetup_r+0x9c>
    2978:	1100004c 	andi	r4,r2,1
    297c:	20001c1e 	bne	r4,zero,29f0 <__swsetup_r+0xc0>
    2980:	1080008c 	andi	r2,r2,2
    2984:	1000291e 	bne	r2,zero,2a2c <__swsetup_r+0xfc>
    2988:	80800517 	ldw	r2,20(r16)
    298c:	80800215 	stw	r2,8(r16)
    2990:	18001c26 	beq	r3,zero,2a04 <__swsetup_r+0xd4>
    2994:	0005883a 	mov	r2,zero
    2998:	dfc00217 	ldw	ra,8(sp)
    299c:	dc400117 	ldw	r17,4(sp)
    29a0:	dc000017 	ldw	r16,0(sp)
    29a4:	dec00304 	addi	sp,sp,12
    29a8:	f800283a 	ret
    29ac:	2080040c 	andi	r2,r4,16
    29b0:	10002e26 	beq	r2,zero,2a6c <__swsetup_r+0x13c>
    29b4:	2080010c 	andi	r2,r4,4
    29b8:	10001e1e 	bne	r2,zero,2a34 <__swsetup_r+0x104>
    29bc:	80c00417 	ldw	r3,16(r16)
    29c0:	20800214 	ori	r2,r4,8
    29c4:	8080030d 	sth	r2,12(r16)
    29c8:	183feb1e 	bne	r3,zero,2978 <__alt_data_end+0xfffe2978>
    29cc:	1100a00c 	andi	r4,r2,640
    29d0:	01408004 	movi	r5,512
    29d4:	217fe826 	beq	r4,r5,2978 <__alt_data_end+0xfffe2978>
    29d8:	800b883a 	mov	r5,r16
    29dc:	8809883a 	mov	r4,r17
    29e0:	00054ec0 	call	54ec <__smakebuf_r>
    29e4:	8080030b 	ldhu	r2,12(r16)
    29e8:	80c00417 	ldw	r3,16(r16)
    29ec:	003fe206 	br	2978 <__alt_data_end+0xfffe2978>
    29f0:	80800517 	ldw	r2,20(r16)
    29f4:	80000215 	stw	zero,8(r16)
    29f8:	0085c83a 	sub	r2,zero,r2
    29fc:	80800615 	stw	r2,24(r16)
    2a00:	183fe41e 	bne	r3,zero,2994 <__alt_data_end+0xfffe2994>
    2a04:	80c0030b 	ldhu	r3,12(r16)
    2a08:	0005883a 	mov	r2,zero
    2a0c:	1900200c 	andi	r4,r3,128
    2a10:	203fe126 	beq	r4,zero,2998 <__alt_data_end+0xfffe2998>
    2a14:	18c01014 	ori	r3,r3,64
    2a18:	80c0030d 	sth	r3,12(r16)
    2a1c:	00bfffc4 	movi	r2,-1
    2a20:	003fdd06 	br	2998 <__alt_data_end+0xfffe2998>
    2a24:	000493c0 	call	493c <__sinit>
    2a28:	003fcd06 	br	2960 <__alt_data_end+0xfffe2960>
    2a2c:	0005883a 	mov	r2,zero
    2a30:	003fd606 	br	298c <__alt_data_end+0xfffe298c>
    2a34:	81400c17 	ldw	r5,48(r16)
    2a38:	28000626 	beq	r5,zero,2a54 <__swsetup_r+0x124>
    2a3c:	80801004 	addi	r2,r16,64
    2a40:	28800326 	beq	r5,r2,2a50 <__swsetup_r+0x120>
    2a44:	8809883a 	mov	r4,r17
    2a48:	0004ab00 	call	4ab0 <_free_r>
    2a4c:	8100030b 	ldhu	r4,12(r16)
    2a50:	80000c15 	stw	zero,48(r16)
    2a54:	80c00417 	ldw	r3,16(r16)
    2a58:	00bff6c4 	movi	r2,-37
    2a5c:	1108703a 	and	r4,r2,r4
    2a60:	80000115 	stw	zero,4(r16)
    2a64:	80c00015 	stw	r3,0(r16)
    2a68:	003fd506 	br	29c0 <__alt_data_end+0xfffe29c0>
    2a6c:	00800244 	movi	r2,9
    2a70:	88800015 	stw	r2,0(r17)
    2a74:	20801014 	ori	r2,r4,64
    2a78:	8080030d 	sth	r2,12(r16)
    2a7c:	00bfffc4 	movi	r2,-1
    2a80:	003fc506 	br	2998 <__alt_data_end+0xfffe2998>

00002a84 <quorem>:
    2a84:	defff204 	addi	sp,sp,-56
    2a88:	ddc00b15 	stw	r23,44(sp)
    2a8c:	20800417 	ldw	r2,16(r4)
    2a90:	2dc00417 	ldw	r23,16(r5)
    2a94:	dfc00d15 	stw	ra,52(sp)
    2a98:	df000c15 	stw	fp,48(sp)
    2a9c:	dd800a15 	stw	r22,40(sp)
    2aa0:	dd400915 	stw	r21,36(sp)
    2aa4:	dd000815 	stw	r20,32(sp)
    2aa8:	dcc00715 	stw	r19,28(sp)
    2aac:	dc800615 	stw	r18,24(sp)
    2ab0:	dc400515 	stw	r17,20(sp)
    2ab4:	dc000415 	stw	r16,16(sp)
    2ab8:	15c07a16 	blt	r2,r23,2ca4 <quorem+0x220>
    2abc:	bdffffc4 	addi	r23,r23,-1
    2ac0:	bde9883a 	add	r20,r23,r23
    2ac4:	28c00504 	addi	r3,r5,20
    2ac8:	a529883a 	add	r20,r20,r20
    2acc:	1d39883a 	add	fp,r3,r20
    2ad0:	24c00504 	addi	r19,r4,20
    2ad4:	d9400215 	stw	r5,8(sp)
    2ad8:	9d29883a 	add	r20,r19,r20
    2adc:	e1400017 	ldw	r5,0(fp)
    2ae0:	d9000015 	stw	r4,0(sp)
    2ae4:	a1000017 	ldw	r4,0(r20)
    2ae8:	29400044 	addi	r5,r5,1
    2aec:	d8c00115 	stw	r3,4(sp)
    2af0:	dd000315 	stw	r20,12(sp)
    2af4:	000a95c0 	call	a95c <__udivsi3>
    2af8:	1025883a 	mov	r18,r2
    2afc:	10003026 	beq	r2,zero,2bc0 <quorem+0x13c>
    2b00:	dc400117 	ldw	r17,4(sp)
    2b04:	9829883a 	mov	r20,r19
    2b08:	002d883a 	mov	r22,zero
    2b0c:	0021883a 	mov	r16,zero
    2b10:	8d400017 	ldw	r21,0(r17)
    2b14:	900b883a 	mov	r5,r18
    2b18:	8c400104 	addi	r17,r17,4
    2b1c:	a93fffcc 	andi	r4,r21,65535
    2b20:	000aa180 	call	aa18 <__mulsi3>
    2b24:	a808d43a 	srli	r4,r21,16
    2b28:	900b883a 	mov	r5,r18
    2b2c:	15ad883a 	add	r22,r2,r22
    2b30:	000aa180 	call	aa18 <__mulsi3>
    2b34:	a1000017 	ldw	r4,0(r20)
    2b38:	b00cd43a 	srli	r6,r22,16
    2b3c:	b0ffffcc 	andi	r3,r22,65535
    2b40:	217fffcc 	andi	r5,r4,65535
    2b44:	2c21883a 	add	r16,r5,r16
    2b48:	80c7c83a 	sub	r3,r16,r3
    2b4c:	2008d43a 	srli	r4,r4,16
    2b50:	1185883a 	add	r2,r2,r6
    2b54:	1821d43a 	srai	r16,r3,16
    2b58:	117fffcc 	andi	r5,r2,65535
    2b5c:	2149c83a 	sub	r4,r4,r5
    2b60:	2421883a 	add	r16,r4,r16
    2b64:	8008943a 	slli	r4,r16,16
    2b68:	18ffffcc 	andi	r3,r3,65535
    2b6c:	102cd43a 	srli	r22,r2,16
    2b70:	20c8b03a 	or	r4,r4,r3
    2b74:	a1000015 	stw	r4,0(r20)
    2b78:	8021d43a 	srai	r16,r16,16
    2b7c:	a5000104 	addi	r20,r20,4
    2b80:	e47fe32e 	bgeu	fp,r17,2b10 <__alt_data_end+0xfffe2b10>
    2b84:	d8c00317 	ldw	r3,12(sp)
    2b88:	18800017 	ldw	r2,0(r3)
    2b8c:	10000c1e 	bne	r2,zero,2bc0 <quorem+0x13c>
    2b90:	18bfff04 	addi	r2,r3,-4
    2b94:	9880082e 	bgeu	r19,r2,2bb8 <quorem+0x134>
    2b98:	18ffff17 	ldw	r3,-4(r3)
    2b9c:	18000326 	beq	r3,zero,2bac <quorem+0x128>
    2ba0:	00000506 	br	2bb8 <quorem+0x134>
    2ba4:	10c00017 	ldw	r3,0(r2)
    2ba8:	1800031e 	bne	r3,zero,2bb8 <quorem+0x134>
    2bac:	10bfff04 	addi	r2,r2,-4
    2bb0:	bdffffc4 	addi	r23,r23,-1
    2bb4:	98bffb36 	bltu	r19,r2,2ba4 <__alt_data_end+0xfffe2ba4>
    2bb8:	d8c00017 	ldw	r3,0(sp)
    2bbc:	1dc00415 	stw	r23,16(r3)
    2bc0:	d9400217 	ldw	r5,8(sp)
    2bc4:	d9000017 	ldw	r4,0(sp)
    2bc8:	0006ce80 	call	6ce8 <__mcmp>
    2bcc:	10002816 	blt	r2,zero,2c70 <quorem+0x1ec>
    2bd0:	dc400117 	ldw	r17,4(sp)
    2bd4:	94800044 	addi	r18,r18,1
    2bd8:	980d883a 	mov	r6,r19
    2bdc:	0007883a 	mov	r3,zero
    2be0:	31000017 	ldw	r4,0(r6)
    2be4:	89400017 	ldw	r5,0(r17)
    2be8:	31800104 	addi	r6,r6,4
    2bec:	20bfffcc 	andi	r2,r4,65535
    2bf0:	10c7883a 	add	r3,r2,r3
    2bf4:	28bfffcc 	andi	r2,r5,65535
    2bf8:	1885c83a 	sub	r2,r3,r2
    2bfc:	280ad43a 	srli	r5,r5,16
    2c00:	2008d43a 	srli	r4,r4,16
    2c04:	1007d43a 	srai	r3,r2,16
    2c08:	10bfffcc 	andi	r2,r2,65535
    2c0c:	2149c83a 	sub	r4,r4,r5
    2c10:	20c9883a 	add	r4,r4,r3
    2c14:	200a943a 	slli	r5,r4,16
    2c18:	8c400104 	addi	r17,r17,4
    2c1c:	2007d43a 	srai	r3,r4,16
    2c20:	2884b03a 	or	r2,r5,r2
    2c24:	30bfff15 	stw	r2,-4(r6)
    2c28:	e47fed2e 	bgeu	fp,r17,2be0 <__alt_data_end+0xfffe2be0>
    2c2c:	bdc5883a 	add	r2,r23,r23
    2c30:	1085883a 	add	r2,r2,r2
    2c34:	9887883a 	add	r3,r19,r2
    2c38:	18800017 	ldw	r2,0(r3)
    2c3c:	10000c1e 	bne	r2,zero,2c70 <quorem+0x1ec>
    2c40:	18bfff04 	addi	r2,r3,-4
    2c44:	9880082e 	bgeu	r19,r2,2c68 <quorem+0x1e4>
    2c48:	18ffff17 	ldw	r3,-4(r3)
    2c4c:	18000326 	beq	r3,zero,2c5c <quorem+0x1d8>
    2c50:	00000506 	br	2c68 <quorem+0x1e4>
    2c54:	10c00017 	ldw	r3,0(r2)
    2c58:	1800031e 	bne	r3,zero,2c68 <quorem+0x1e4>
    2c5c:	10bfff04 	addi	r2,r2,-4
    2c60:	bdffffc4 	addi	r23,r23,-1
    2c64:	98bffb36 	bltu	r19,r2,2c54 <__alt_data_end+0xfffe2c54>
    2c68:	d8c00017 	ldw	r3,0(sp)
    2c6c:	1dc00415 	stw	r23,16(r3)
    2c70:	9005883a 	mov	r2,r18
    2c74:	dfc00d17 	ldw	ra,52(sp)
    2c78:	df000c17 	ldw	fp,48(sp)
    2c7c:	ddc00b17 	ldw	r23,44(sp)
    2c80:	dd800a17 	ldw	r22,40(sp)
    2c84:	dd400917 	ldw	r21,36(sp)
    2c88:	dd000817 	ldw	r20,32(sp)
    2c8c:	dcc00717 	ldw	r19,28(sp)
    2c90:	dc800617 	ldw	r18,24(sp)
    2c94:	dc400517 	ldw	r17,20(sp)
    2c98:	dc000417 	ldw	r16,16(sp)
    2c9c:	dec00e04 	addi	sp,sp,56
    2ca0:	f800283a 	ret
    2ca4:	0005883a 	mov	r2,zero
    2ca8:	003ff206 	br	2c74 <__alt_data_end+0xfffe2c74>

00002cac <_dtoa_r>:
    2cac:	20801017 	ldw	r2,64(r4)
    2cb0:	deffde04 	addi	sp,sp,-136
    2cb4:	df002015 	stw	fp,128(sp)
    2cb8:	dcc01b15 	stw	r19,108(sp)
    2cbc:	dc801a15 	stw	r18,104(sp)
    2cc0:	dc401915 	stw	r17,100(sp)
    2cc4:	dc001815 	stw	r16,96(sp)
    2cc8:	dfc02115 	stw	ra,132(sp)
    2ccc:	ddc01f15 	stw	r23,124(sp)
    2cd0:	dd801e15 	stw	r22,120(sp)
    2cd4:	dd401d15 	stw	r21,116(sp)
    2cd8:	dd001c15 	stw	r20,112(sp)
    2cdc:	d9c00315 	stw	r7,12(sp)
    2ce0:	2039883a 	mov	fp,r4
    2ce4:	3023883a 	mov	r17,r6
    2ce8:	2825883a 	mov	r18,r5
    2cec:	dc002417 	ldw	r16,144(sp)
    2cf0:	3027883a 	mov	r19,r6
    2cf4:	10000826 	beq	r2,zero,2d18 <_dtoa_r+0x6c>
    2cf8:	21801117 	ldw	r6,68(r4)
    2cfc:	00c00044 	movi	r3,1
    2d00:	100b883a 	mov	r5,r2
    2d04:	1986983a 	sll	r3,r3,r6
    2d08:	11800115 	stw	r6,4(r2)
    2d0c:	10c00215 	stw	r3,8(r2)
    2d10:	000640c0 	call	640c <_Bfree>
    2d14:	e0001015 	stw	zero,64(fp)
    2d18:	88002e16 	blt	r17,zero,2dd4 <_dtoa_r+0x128>
    2d1c:	80000015 	stw	zero,0(r16)
    2d20:	889ffc2c 	andhi	r2,r17,32752
    2d24:	00dffc34 	movhi	r3,32752
    2d28:	10c01c26 	beq	r2,r3,2d9c <_dtoa_r+0xf0>
    2d2c:	000d883a 	mov	r6,zero
    2d30:	000f883a 	mov	r7,zero
    2d34:	9009883a 	mov	r4,r18
    2d38:	980b883a 	mov	r5,r19
    2d3c:	000bcbc0 	call	bcbc <__eqdf2>
    2d40:	10002b1e 	bne	r2,zero,2df0 <_dtoa_r+0x144>
    2d44:	d9c02317 	ldw	r7,140(sp)
    2d48:	00800044 	movi	r2,1
    2d4c:	38800015 	stw	r2,0(r7)
    2d50:	d8802517 	ldw	r2,148(sp)
    2d54:	10019e26 	beq	r2,zero,33d0 <_dtoa_r+0x724>
    2d58:	d8c02517 	ldw	r3,148(sp)
    2d5c:	00800074 	movhi	r2,1
    2d60:	10beb244 	addi	r2,r2,-1335
    2d64:	18800015 	stw	r2,0(r3)
    2d68:	10bfffc4 	addi	r2,r2,-1
    2d6c:	dfc02117 	ldw	ra,132(sp)
    2d70:	df002017 	ldw	fp,128(sp)
    2d74:	ddc01f17 	ldw	r23,124(sp)
    2d78:	dd801e17 	ldw	r22,120(sp)
    2d7c:	dd401d17 	ldw	r21,116(sp)
    2d80:	dd001c17 	ldw	r20,112(sp)
    2d84:	dcc01b17 	ldw	r19,108(sp)
    2d88:	dc801a17 	ldw	r18,104(sp)
    2d8c:	dc401917 	ldw	r17,100(sp)
    2d90:	dc001817 	ldw	r16,96(sp)
    2d94:	dec02204 	addi	sp,sp,136
    2d98:	f800283a 	ret
    2d9c:	d8c02317 	ldw	r3,140(sp)
    2da0:	0089c3c4 	movi	r2,9999
    2da4:	18800015 	stw	r2,0(r3)
    2da8:	90017726 	beq	r18,zero,3388 <_dtoa_r+0x6dc>
    2dac:	00800074 	movhi	r2,1
    2db0:	10bebe04 	addi	r2,r2,-1288
    2db4:	d9002517 	ldw	r4,148(sp)
    2db8:	203fec26 	beq	r4,zero,2d6c <__alt_data_end+0xfffe2d6c>
    2dbc:	10c000c7 	ldb	r3,3(r2)
    2dc0:	1801781e 	bne	r3,zero,33a4 <_dtoa_r+0x6f8>
    2dc4:	10c000c4 	addi	r3,r2,3
    2dc8:	d9802517 	ldw	r6,148(sp)
    2dcc:	30c00015 	stw	r3,0(r6)
    2dd0:	003fe606 	br	2d6c <__alt_data_end+0xfffe2d6c>
    2dd4:	04e00034 	movhi	r19,32768
    2dd8:	9cffffc4 	addi	r19,r19,-1
    2ddc:	00800044 	movi	r2,1
    2de0:	8ce6703a 	and	r19,r17,r19
    2de4:	80800015 	stw	r2,0(r16)
    2de8:	9823883a 	mov	r17,r19
    2dec:	003fcc06 	br	2d20 <__alt_data_end+0xfffe2d20>
    2df0:	d8800204 	addi	r2,sp,8
    2df4:	d8800015 	stw	r2,0(sp)
    2df8:	d9c00104 	addi	r7,sp,4
    2dfc:	900b883a 	mov	r5,r18
    2e00:	980d883a 	mov	r6,r19
    2e04:	e009883a 	mov	r4,fp
    2e08:	8820d53a 	srli	r16,r17,20
    2e0c:	00070b40 	call	70b4 <__d2b>
    2e10:	d8800915 	stw	r2,36(sp)
    2e14:	8001651e 	bne	r16,zero,33ac <_dtoa_r+0x700>
    2e18:	dd800217 	ldw	r22,8(sp)
    2e1c:	dc000117 	ldw	r16,4(sp)
    2e20:	00800804 	movi	r2,32
    2e24:	b421883a 	add	r16,r22,r16
    2e28:	80c10c84 	addi	r3,r16,1074
    2e2c:	10c2d10e 	bge	r2,r3,3974 <_dtoa_r+0xcc8>
    2e30:	00801004 	movi	r2,64
    2e34:	81010484 	addi	r4,r16,1042
    2e38:	10c7c83a 	sub	r3,r2,r3
    2e3c:	9108d83a 	srl	r4,r18,r4
    2e40:	88e2983a 	sll	r17,r17,r3
    2e44:	2448b03a 	or	r4,r4,r17
    2e48:	000d1d80 	call	d1d8 <__floatunsidf>
    2e4c:	017f8434 	movhi	r5,65040
    2e50:	01800044 	movi	r6,1
    2e54:	1009883a 	mov	r4,r2
    2e58:	194b883a 	add	r5,r3,r5
    2e5c:	843fffc4 	addi	r16,r16,-1
    2e60:	d9801115 	stw	r6,68(sp)
    2e64:	000d883a 	mov	r6,zero
    2e68:	01cffe34 	movhi	r7,16376
    2e6c:	000c7800 	call	c780 <__subdf3>
    2e70:	0198dbf4 	movhi	r6,25455
    2e74:	01cff4f4 	movhi	r7,16339
    2e78:	3190d844 	addi	r6,r6,17249
    2e7c:	39e1e9c4 	addi	r7,r7,-30809
    2e80:	1009883a 	mov	r4,r2
    2e84:	180b883a 	mov	r5,r3
    2e88:	000bf140 	call	bf14 <__muldf3>
    2e8c:	01a2d874 	movhi	r6,35681
    2e90:	01cff1f4 	movhi	r7,16327
    2e94:	31b22cc4 	addi	r6,r6,-14157
    2e98:	39e28a04 	addi	r7,r7,-30168
    2e9c:	180b883a 	mov	r5,r3
    2ea0:	1009883a 	mov	r4,r2
    2ea4:	000aa400 	call	aa40 <__adddf3>
    2ea8:	8009883a 	mov	r4,r16
    2eac:	1029883a 	mov	r20,r2
    2eb0:	1823883a 	mov	r17,r3
    2eb4:	000d0fc0 	call	d0fc <__floatsidf>
    2eb8:	019427f4 	movhi	r6,20639
    2ebc:	01cff4f4 	movhi	r7,16339
    2ec0:	319e7ec4 	addi	r6,r6,31227
    2ec4:	39d104c4 	addi	r7,r7,17427
    2ec8:	1009883a 	mov	r4,r2
    2ecc:	180b883a 	mov	r5,r3
    2ed0:	000bf140 	call	bf14 <__muldf3>
    2ed4:	100d883a 	mov	r6,r2
    2ed8:	180f883a 	mov	r7,r3
    2edc:	a009883a 	mov	r4,r20
    2ee0:	880b883a 	mov	r5,r17
    2ee4:	000aa400 	call	aa40 <__adddf3>
    2ee8:	1009883a 	mov	r4,r2
    2eec:	180b883a 	mov	r5,r3
    2ef0:	1029883a 	mov	r20,r2
    2ef4:	1823883a 	mov	r17,r3
    2ef8:	000d07c0 	call	d07c <__fixdfsi>
    2efc:	000d883a 	mov	r6,zero
    2f00:	000f883a 	mov	r7,zero
    2f04:	a009883a 	mov	r4,r20
    2f08:	880b883a 	mov	r5,r17
    2f0c:	d8800515 	stw	r2,20(sp)
    2f10:	000be200 	call	be20 <__ledf2>
    2f14:	10028716 	blt	r2,zero,3934 <_dtoa_r+0xc88>
    2f18:	d8c00517 	ldw	r3,20(sp)
    2f1c:	00800584 	movi	r2,22
    2f20:	10c27536 	bltu	r2,r3,38f8 <_dtoa_r+0xc4c>
    2f24:	180490fa 	slli	r2,r3,3
    2f28:	00c00074 	movhi	r3,1
    2f2c:	18feda04 	addi	r3,r3,-1176
    2f30:	1885883a 	add	r2,r3,r2
    2f34:	11000017 	ldw	r4,0(r2)
    2f38:	11400117 	ldw	r5,4(r2)
    2f3c:	900d883a 	mov	r6,r18
    2f40:	980f883a 	mov	r7,r19
    2f44:	000bd440 	call	bd44 <__gedf2>
    2f48:	00828d0e 	bge	zero,r2,3980 <_dtoa_r+0xcd4>
    2f4c:	d9000517 	ldw	r4,20(sp)
    2f50:	d8000e15 	stw	zero,56(sp)
    2f54:	213fffc4 	addi	r4,r4,-1
    2f58:	d9000515 	stw	r4,20(sp)
    2f5c:	b42dc83a 	sub	r22,r22,r16
    2f60:	b5bfffc4 	addi	r22,r22,-1
    2f64:	b0026f16 	blt	r22,zero,3924 <_dtoa_r+0xc78>
    2f68:	d8000815 	stw	zero,32(sp)
    2f6c:	d9c00517 	ldw	r7,20(sp)
    2f70:	38026416 	blt	r7,zero,3904 <_dtoa_r+0xc58>
    2f74:	b1ed883a 	add	r22,r22,r7
    2f78:	d9c00d15 	stw	r7,52(sp)
    2f7c:	d8000a15 	stw	zero,40(sp)
    2f80:	d9800317 	ldw	r6,12(sp)
    2f84:	00800244 	movi	r2,9
    2f88:	11811436 	bltu	r2,r6,33dc <_dtoa_r+0x730>
    2f8c:	00800144 	movi	r2,5
    2f90:	1184e10e 	bge	r2,r6,4318 <_dtoa_r+0x166c>
    2f94:	31bfff04 	addi	r6,r6,-4
    2f98:	d9800315 	stw	r6,12(sp)
    2f9c:	0023883a 	mov	r17,zero
    2fa0:	d9800317 	ldw	r6,12(sp)
    2fa4:	008000c4 	movi	r2,3
    2fa8:	30836726 	beq	r6,r2,3d48 <_dtoa_r+0x109c>
    2fac:	1183410e 	bge	r2,r6,3cb4 <_dtoa_r+0x1008>
    2fb0:	d9c00317 	ldw	r7,12(sp)
    2fb4:	00800104 	movi	r2,4
    2fb8:	38827c26 	beq	r7,r2,39ac <_dtoa_r+0xd00>
    2fbc:	00800144 	movi	r2,5
    2fc0:	3884c41e 	bne	r7,r2,42d4 <_dtoa_r+0x1628>
    2fc4:	00800044 	movi	r2,1
    2fc8:	d8800b15 	stw	r2,44(sp)
    2fcc:	d8c00517 	ldw	r3,20(sp)
    2fd0:	d9002217 	ldw	r4,136(sp)
    2fd4:	1907883a 	add	r3,r3,r4
    2fd8:	19800044 	addi	r6,r3,1
    2fdc:	d8c00c15 	stw	r3,48(sp)
    2fe0:	d9800615 	stw	r6,24(sp)
    2fe4:	0183a40e 	bge	zero,r6,3e78 <_dtoa_r+0x11cc>
    2fe8:	d9800617 	ldw	r6,24(sp)
    2fec:	3021883a 	mov	r16,r6
    2ff0:	e0001115 	stw	zero,68(fp)
    2ff4:	008005c4 	movi	r2,23
    2ff8:	1184c92e 	bgeu	r2,r6,4320 <_dtoa_r+0x1674>
    2ffc:	00c00044 	movi	r3,1
    3000:	00800104 	movi	r2,4
    3004:	1085883a 	add	r2,r2,r2
    3008:	11000504 	addi	r4,r2,20
    300c:	180b883a 	mov	r5,r3
    3010:	18c00044 	addi	r3,r3,1
    3014:	313ffb2e 	bgeu	r6,r4,3004 <__alt_data_end+0xfffe3004>
    3018:	e1401115 	stw	r5,68(fp)
    301c:	e009883a 	mov	r4,fp
    3020:	00063640 	call	6364 <_Balloc>
    3024:	d8800715 	stw	r2,28(sp)
    3028:	e0801015 	stw	r2,64(fp)
    302c:	00800384 	movi	r2,14
    3030:	1400f736 	bltu	r2,r16,3410 <_dtoa_r+0x764>
    3034:	8800f626 	beq	r17,zero,3410 <_dtoa_r+0x764>
    3038:	d9c00517 	ldw	r7,20(sp)
    303c:	01c39a0e 	bge	zero,r7,3ea8 <_dtoa_r+0x11fc>
    3040:	388003cc 	andi	r2,r7,15
    3044:	100490fa 	slli	r2,r2,3
    3048:	382bd13a 	srai	r21,r7,4
    304c:	00c00074 	movhi	r3,1
    3050:	18feda04 	addi	r3,r3,-1176
    3054:	1885883a 	add	r2,r3,r2
    3058:	a8c0040c 	andi	r3,r21,16
    305c:	12400017 	ldw	r9,0(r2)
    3060:	12000117 	ldw	r8,4(r2)
    3064:	18037926 	beq	r3,zero,3e4c <_dtoa_r+0x11a0>
    3068:	00800074 	movhi	r2,1
    306c:	10bed004 	addi	r2,r2,-1216
    3070:	11800817 	ldw	r6,32(r2)
    3074:	11c00917 	ldw	r7,36(r2)
    3078:	9009883a 	mov	r4,r18
    307c:	980b883a 	mov	r5,r19
    3080:	da001715 	stw	r8,92(sp)
    3084:	da401615 	stw	r9,88(sp)
    3088:	000b2ec0 	call	b2ec <__divdf3>
    308c:	da001717 	ldw	r8,92(sp)
    3090:	da401617 	ldw	r9,88(sp)
    3094:	ad4003cc 	andi	r21,r21,15
    3098:	040000c4 	movi	r16,3
    309c:	1023883a 	mov	r17,r2
    30a0:	1829883a 	mov	r20,r3
    30a4:	a8001126 	beq	r21,zero,30ec <_dtoa_r+0x440>
    30a8:	05c00074 	movhi	r23,1
    30ac:	bdfed004 	addi	r23,r23,-1216
    30b0:	4805883a 	mov	r2,r9
    30b4:	4007883a 	mov	r3,r8
    30b8:	a980004c 	andi	r6,r21,1
    30bc:	1009883a 	mov	r4,r2
    30c0:	a82bd07a 	srai	r21,r21,1
    30c4:	180b883a 	mov	r5,r3
    30c8:	30000426 	beq	r6,zero,30dc <_dtoa_r+0x430>
    30cc:	b9800017 	ldw	r6,0(r23)
    30d0:	b9c00117 	ldw	r7,4(r23)
    30d4:	84000044 	addi	r16,r16,1
    30d8:	000bf140 	call	bf14 <__muldf3>
    30dc:	bdc00204 	addi	r23,r23,8
    30e0:	a83ff51e 	bne	r21,zero,30b8 <__alt_data_end+0xfffe30b8>
    30e4:	1013883a 	mov	r9,r2
    30e8:	1811883a 	mov	r8,r3
    30ec:	480d883a 	mov	r6,r9
    30f0:	400f883a 	mov	r7,r8
    30f4:	8809883a 	mov	r4,r17
    30f8:	a00b883a 	mov	r5,r20
    30fc:	000b2ec0 	call	b2ec <__divdf3>
    3100:	d8800f15 	stw	r2,60(sp)
    3104:	d8c01015 	stw	r3,64(sp)
    3108:	d8c00e17 	ldw	r3,56(sp)
    310c:	18000626 	beq	r3,zero,3128 <_dtoa_r+0x47c>
    3110:	d9000f17 	ldw	r4,60(sp)
    3114:	d9401017 	ldw	r5,64(sp)
    3118:	000d883a 	mov	r6,zero
    311c:	01cffc34 	movhi	r7,16368
    3120:	000be200 	call	be20 <__ledf2>
    3124:	10040b16 	blt	r2,zero,4154 <_dtoa_r+0x14a8>
    3128:	8009883a 	mov	r4,r16
    312c:	000d0fc0 	call	d0fc <__floatsidf>
    3130:	d9800f17 	ldw	r6,60(sp)
    3134:	d9c01017 	ldw	r7,64(sp)
    3138:	1009883a 	mov	r4,r2
    313c:	180b883a 	mov	r5,r3
    3140:	000bf140 	call	bf14 <__muldf3>
    3144:	000d883a 	mov	r6,zero
    3148:	01d00734 	movhi	r7,16412
    314c:	1009883a 	mov	r4,r2
    3150:	180b883a 	mov	r5,r3
    3154:	000aa400 	call	aa40 <__adddf3>
    3158:	1021883a 	mov	r16,r2
    315c:	d8800617 	ldw	r2,24(sp)
    3160:	047f3034 	movhi	r17,64704
    3164:	1c63883a 	add	r17,r3,r17
    3168:	10031826 	beq	r2,zero,3dcc <_dtoa_r+0x1120>
    316c:	d8c00517 	ldw	r3,20(sp)
    3170:	db000617 	ldw	r12,24(sp)
    3174:	d8c01315 	stw	r3,76(sp)
    3178:	d9000b17 	ldw	r4,44(sp)
    317c:	20038f26 	beq	r4,zero,3fbc <_dtoa_r+0x1310>
    3180:	60bfffc4 	addi	r2,r12,-1
    3184:	100490fa 	slli	r2,r2,3
    3188:	00c00074 	movhi	r3,1
    318c:	18feda04 	addi	r3,r3,-1176
    3190:	1885883a 	add	r2,r3,r2
    3194:	11800017 	ldw	r6,0(r2)
    3198:	11c00117 	ldw	r7,4(r2)
    319c:	d8800717 	ldw	r2,28(sp)
    31a0:	0009883a 	mov	r4,zero
    31a4:	014ff834 	movhi	r5,16352
    31a8:	db001615 	stw	r12,88(sp)
    31ac:	15c00044 	addi	r23,r2,1
    31b0:	000b2ec0 	call	b2ec <__divdf3>
    31b4:	800d883a 	mov	r6,r16
    31b8:	880f883a 	mov	r7,r17
    31bc:	1009883a 	mov	r4,r2
    31c0:	180b883a 	mov	r5,r3
    31c4:	000c7800 	call	c780 <__subdf3>
    31c8:	d9401017 	ldw	r5,64(sp)
    31cc:	d9000f17 	ldw	r4,60(sp)
    31d0:	102b883a 	mov	r21,r2
    31d4:	d8c01215 	stw	r3,72(sp)
    31d8:	000d07c0 	call	d07c <__fixdfsi>
    31dc:	1009883a 	mov	r4,r2
    31e0:	1029883a 	mov	r20,r2
    31e4:	000d0fc0 	call	d0fc <__floatsidf>
    31e8:	d9000f17 	ldw	r4,60(sp)
    31ec:	d9401017 	ldw	r5,64(sp)
    31f0:	100d883a 	mov	r6,r2
    31f4:	180f883a 	mov	r7,r3
    31f8:	000c7800 	call	c780 <__subdf3>
    31fc:	1823883a 	mov	r17,r3
    3200:	d8c00717 	ldw	r3,28(sp)
    3204:	d9401217 	ldw	r5,72(sp)
    3208:	a2000c04 	addi	r8,r20,48
    320c:	1021883a 	mov	r16,r2
    3210:	1a000005 	stb	r8,0(r3)
    3214:	800d883a 	mov	r6,r16
    3218:	880f883a 	mov	r7,r17
    321c:	a809883a 	mov	r4,r21
    3220:	4029883a 	mov	r20,r8
    3224:	000bd440 	call	bd44 <__gedf2>
    3228:	00841d16 	blt	zero,r2,42a0 <_dtoa_r+0x15f4>
    322c:	800d883a 	mov	r6,r16
    3230:	880f883a 	mov	r7,r17
    3234:	0009883a 	mov	r4,zero
    3238:	014ffc34 	movhi	r5,16368
    323c:	000c7800 	call	c780 <__subdf3>
    3240:	d9401217 	ldw	r5,72(sp)
    3244:	100d883a 	mov	r6,r2
    3248:	180f883a 	mov	r7,r3
    324c:	a809883a 	mov	r4,r21
    3250:	000bd440 	call	bd44 <__gedf2>
    3254:	db001617 	ldw	r12,88(sp)
    3258:	00840e16 	blt	zero,r2,4294 <_dtoa_r+0x15e8>
    325c:	00800044 	movi	r2,1
    3260:	13006b0e 	bge	r2,r12,3410 <_dtoa_r+0x764>
    3264:	d9000717 	ldw	r4,28(sp)
    3268:	dd800f15 	stw	r22,60(sp)
    326c:	dcc01015 	stw	r19,64(sp)
    3270:	2319883a 	add	r12,r4,r12
    3274:	dcc01217 	ldw	r19,72(sp)
    3278:	602d883a 	mov	r22,r12
    327c:	dc801215 	stw	r18,72(sp)
    3280:	b825883a 	mov	r18,r23
    3284:	00000906 	br	32ac <_dtoa_r+0x600>
    3288:	000c7800 	call	c780 <__subdf3>
    328c:	a80d883a 	mov	r6,r21
    3290:	980f883a 	mov	r7,r19
    3294:	1009883a 	mov	r4,r2
    3298:	180b883a 	mov	r5,r3
    329c:	000be200 	call	be20 <__ledf2>
    32a0:	1003e816 	blt	r2,zero,4244 <_dtoa_r+0x1598>
    32a4:	b825883a 	mov	r18,r23
    32a8:	bd83e926 	beq	r23,r22,4250 <_dtoa_r+0x15a4>
    32ac:	a809883a 	mov	r4,r21
    32b0:	980b883a 	mov	r5,r19
    32b4:	000d883a 	mov	r6,zero
    32b8:	01d00934 	movhi	r7,16420
    32bc:	000bf140 	call	bf14 <__muldf3>
    32c0:	000d883a 	mov	r6,zero
    32c4:	01d00934 	movhi	r7,16420
    32c8:	8009883a 	mov	r4,r16
    32cc:	880b883a 	mov	r5,r17
    32d0:	102b883a 	mov	r21,r2
    32d4:	1827883a 	mov	r19,r3
    32d8:	000bf140 	call	bf14 <__muldf3>
    32dc:	180b883a 	mov	r5,r3
    32e0:	1009883a 	mov	r4,r2
    32e4:	1821883a 	mov	r16,r3
    32e8:	1023883a 	mov	r17,r2
    32ec:	000d07c0 	call	d07c <__fixdfsi>
    32f0:	1009883a 	mov	r4,r2
    32f4:	1029883a 	mov	r20,r2
    32f8:	000d0fc0 	call	d0fc <__floatsidf>
    32fc:	8809883a 	mov	r4,r17
    3300:	800b883a 	mov	r5,r16
    3304:	100d883a 	mov	r6,r2
    3308:	180f883a 	mov	r7,r3
    330c:	000c7800 	call	c780 <__subdf3>
    3310:	a5000c04 	addi	r20,r20,48
    3314:	a80d883a 	mov	r6,r21
    3318:	980f883a 	mov	r7,r19
    331c:	1009883a 	mov	r4,r2
    3320:	180b883a 	mov	r5,r3
    3324:	95000005 	stb	r20,0(r18)
    3328:	1021883a 	mov	r16,r2
    332c:	1823883a 	mov	r17,r3
    3330:	000be200 	call	be20 <__ledf2>
    3334:	bdc00044 	addi	r23,r23,1
    3338:	800d883a 	mov	r6,r16
    333c:	880f883a 	mov	r7,r17
    3340:	0009883a 	mov	r4,zero
    3344:	014ffc34 	movhi	r5,16368
    3348:	103fcf0e 	bge	r2,zero,3288 <__alt_data_end+0xfffe3288>
    334c:	d8c01317 	ldw	r3,76(sp)
    3350:	d8c00515 	stw	r3,20(sp)
    3354:	d9400917 	ldw	r5,36(sp)
    3358:	e009883a 	mov	r4,fp
    335c:	000640c0 	call	640c <_Bfree>
    3360:	d9000517 	ldw	r4,20(sp)
    3364:	d9802317 	ldw	r6,140(sp)
    3368:	d9c02517 	ldw	r7,148(sp)
    336c:	b8000005 	stb	zero,0(r23)
    3370:	20800044 	addi	r2,r4,1
    3374:	30800015 	stw	r2,0(r6)
    3378:	3802aa26 	beq	r7,zero,3e24 <_dtoa_r+0x1178>
    337c:	3dc00015 	stw	r23,0(r7)
    3380:	d8800717 	ldw	r2,28(sp)
    3384:	003e7906 	br	2d6c <__alt_data_end+0xfffe2d6c>
    3388:	00800434 	movhi	r2,16
    338c:	10bfffc4 	addi	r2,r2,-1
    3390:	88a2703a 	and	r17,r17,r2
    3394:	883e851e 	bne	r17,zero,2dac <__alt_data_end+0xfffe2dac>
    3398:	00800074 	movhi	r2,1
    339c:	10bebb04 	addi	r2,r2,-1300
    33a0:	003e8406 	br	2db4 <__alt_data_end+0xfffe2db4>
    33a4:	10c00204 	addi	r3,r2,8
    33a8:	003e8706 	br	2dc8 <__alt_data_end+0xfffe2dc8>
    33ac:	01400434 	movhi	r5,16
    33b0:	297fffc4 	addi	r5,r5,-1
    33b4:	994a703a 	and	r5,r19,r5
    33b8:	9009883a 	mov	r4,r18
    33bc:	843f0044 	addi	r16,r16,-1023
    33c0:	294ffc34 	orhi	r5,r5,16368
    33c4:	dd800217 	ldw	r22,8(sp)
    33c8:	d8001115 	stw	zero,68(sp)
    33cc:	003ea506 	br	2e64 <__alt_data_end+0xfffe2e64>
    33d0:	00800074 	movhi	r2,1
    33d4:	10beb204 	addi	r2,r2,-1336
    33d8:	003e6406 	br	2d6c <__alt_data_end+0xfffe2d6c>
    33dc:	e0001115 	stw	zero,68(fp)
    33e0:	000b883a 	mov	r5,zero
    33e4:	e009883a 	mov	r4,fp
    33e8:	00063640 	call	6364 <_Balloc>
    33ec:	01bfffc4 	movi	r6,-1
    33f0:	01c00044 	movi	r7,1
    33f4:	d8800715 	stw	r2,28(sp)
    33f8:	d9800c15 	stw	r6,48(sp)
    33fc:	e0801015 	stw	r2,64(fp)
    3400:	d8000315 	stw	zero,12(sp)
    3404:	d9c00b15 	stw	r7,44(sp)
    3408:	d9800615 	stw	r6,24(sp)
    340c:	d8002215 	stw	zero,136(sp)
    3410:	d8800117 	ldw	r2,4(sp)
    3414:	10008916 	blt	r2,zero,363c <_dtoa_r+0x990>
    3418:	d9000517 	ldw	r4,20(sp)
    341c:	00c00384 	movi	r3,14
    3420:	19008616 	blt	r3,r4,363c <_dtoa_r+0x990>
    3424:	200490fa 	slli	r2,r4,3
    3428:	00c00074 	movhi	r3,1
    342c:	d9802217 	ldw	r6,136(sp)
    3430:	18feda04 	addi	r3,r3,-1176
    3434:	1885883a 	add	r2,r3,r2
    3438:	14000017 	ldw	r16,0(r2)
    343c:	14400117 	ldw	r17,4(r2)
    3440:	30016316 	blt	r6,zero,39d0 <_dtoa_r+0xd24>
    3444:	800d883a 	mov	r6,r16
    3448:	880f883a 	mov	r7,r17
    344c:	9009883a 	mov	r4,r18
    3450:	980b883a 	mov	r5,r19
    3454:	000b2ec0 	call	b2ec <__divdf3>
    3458:	180b883a 	mov	r5,r3
    345c:	1009883a 	mov	r4,r2
    3460:	000d07c0 	call	d07c <__fixdfsi>
    3464:	1009883a 	mov	r4,r2
    3468:	102b883a 	mov	r21,r2
    346c:	000d0fc0 	call	d0fc <__floatsidf>
    3470:	800d883a 	mov	r6,r16
    3474:	880f883a 	mov	r7,r17
    3478:	1009883a 	mov	r4,r2
    347c:	180b883a 	mov	r5,r3
    3480:	000bf140 	call	bf14 <__muldf3>
    3484:	100d883a 	mov	r6,r2
    3488:	180f883a 	mov	r7,r3
    348c:	9009883a 	mov	r4,r18
    3490:	980b883a 	mov	r5,r19
    3494:	000c7800 	call	c780 <__subdf3>
    3498:	d9c00717 	ldw	r7,28(sp)
    349c:	1009883a 	mov	r4,r2
    34a0:	a8800c04 	addi	r2,r21,48
    34a4:	38800005 	stb	r2,0(r7)
    34a8:	3dc00044 	addi	r23,r7,1
    34ac:	d9c00617 	ldw	r7,24(sp)
    34b0:	01800044 	movi	r6,1
    34b4:	180b883a 	mov	r5,r3
    34b8:	2005883a 	mov	r2,r4
    34bc:	39803826 	beq	r7,r6,35a0 <_dtoa_r+0x8f4>
    34c0:	000d883a 	mov	r6,zero
    34c4:	01d00934 	movhi	r7,16420
    34c8:	000bf140 	call	bf14 <__muldf3>
    34cc:	000d883a 	mov	r6,zero
    34d0:	000f883a 	mov	r7,zero
    34d4:	1009883a 	mov	r4,r2
    34d8:	180b883a 	mov	r5,r3
    34dc:	1025883a 	mov	r18,r2
    34e0:	1827883a 	mov	r19,r3
    34e4:	000bcbc0 	call	bcbc <__eqdf2>
    34e8:	103f9a26 	beq	r2,zero,3354 <__alt_data_end+0xfffe3354>
    34ec:	d9c00617 	ldw	r7,24(sp)
    34f0:	d8c00717 	ldw	r3,28(sp)
    34f4:	b829883a 	mov	r20,r23
    34f8:	38bfffc4 	addi	r2,r7,-1
    34fc:	18ad883a 	add	r22,r3,r2
    3500:	00000a06 	br	352c <_dtoa_r+0x880>
    3504:	000bf140 	call	bf14 <__muldf3>
    3508:	000d883a 	mov	r6,zero
    350c:	000f883a 	mov	r7,zero
    3510:	1009883a 	mov	r4,r2
    3514:	180b883a 	mov	r5,r3
    3518:	1025883a 	mov	r18,r2
    351c:	1827883a 	mov	r19,r3
    3520:	b829883a 	mov	r20,r23
    3524:	000bcbc0 	call	bcbc <__eqdf2>
    3528:	103f8a26 	beq	r2,zero,3354 <__alt_data_end+0xfffe3354>
    352c:	800d883a 	mov	r6,r16
    3530:	880f883a 	mov	r7,r17
    3534:	9009883a 	mov	r4,r18
    3538:	980b883a 	mov	r5,r19
    353c:	000b2ec0 	call	b2ec <__divdf3>
    3540:	180b883a 	mov	r5,r3
    3544:	1009883a 	mov	r4,r2
    3548:	000d07c0 	call	d07c <__fixdfsi>
    354c:	1009883a 	mov	r4,r2
    3550:	102b883a 	mov	r21,r2
    3554:	000d0fc0 	call	d0fc <__floatsidf>
    3558:	800d883a 	mov	r6,r16
    355c:	880f883a 	mov	r7,r17
    3560:	1009883a 	mov	r4,r2
    3564:	180b883a 	mov	r5,r3
    3568:	000bf140 	call	bf14 <__muldf3>
    356c:	100d883a 	mov	r6,r2
    3570:	180f883a 	mov	r7,r3
    3574:	9009883a 	mov	r4,r18
    3578:	980b883a 	mov	r5,r19
    357c:	000c7800 	call	c780 <__subdf3>
    3580:	aa000c04 	addi	r8,r21,48
    3584:	a2000005 	stb	r8,0(r20)
    3588:	000d883a 	mov	r6,zero
    358c:	01d00934 	movhi	r7,16420
    3590:	1009883a 	mov	r4,r2
    3594:	180b883a 	mov	r5,r3
    3598:	a5c00044 	addi	r23,r20,1
    359c:	b53fd91e 	bne	r22,r20,3504 <__alt_data_end+0xfffe3504>
    35a0:	100d883a 	mov	r6,r2
    35a4:	180f883a 	mov	r7,r3
    35a8:	1009883a 	mov	r4,r2
    35ac:	180b883a 	mov	r5,r3
    35b0:	000aa400 	call	aa40 <__adddf3>
    35b4:	100d883a 	mov	r6,r2
    35b8:	180f883a 	mov	r7,r3
    35bc:	8009883a 	mov	r4,r16
    35c0:	880b883a 	mov	r5,r17
    35c4:	1027883a 	mov	r19,r2
    35c8:	1825883a 	mov	r18,r3
    35cc:	000be200 	call	be20 <__ledf2>
    35d0:	10000816 	blt	r2,zero,35f4 <_dtoa_r+0x948>
    35d4:	980d883a 	mov	r6,r19
    35d8:	900f883a 	mov	r7,r18
    35dc:	8009883a 	mov	r4,r16
    35e0:	880b883a 	mov	r5,r17
    35e4:	000bcbc0 	call	bcbc <__eqdf2>
    35e8:	103f5a1e 	bne	r2,zero,3354 <__alt_data_end+0xfffe3354>
    35ec:	ad40004c 	andi	r21,r21,1
    35f0:	a83f5826 	beq	r21,zero,3354 <__alt_data_end+0xfffe3354>
    35f4:	bd3fffc3 	ldbu	r20,-1(r23)
    35f8:	b8bfffc4 	addi	r2,r23,-1
    35fc:	1007883a 	mov	r3,r2
    3600:	01400e44 	movi	r5,57
    3604:	d9800717 	ldw	r6,28(sp)
    3608:	00000506 	br	3620 <_dtoa_r+0x974>
    360c:	18ffffc4 	addi	r3,r3,-1
    3610:	11824726 	beq	r2,r6,3f30 <_dtoa_r+0x1284>
    3614:	1d000003 	ldbu	r20,0(r3)
    3618:	102f883a 	mov	r23,r2
    361c:	10bfffc4 	addi	r2,r2,-1
    3620:	a1003fcc 	andi	r4,r20,255
    3624:	2100201c 	xori	r4,r4,128
    3628:	213fe004 	addi	r4,r4,-128
    362c:	217ff726 	beq	r4,r5,360c <__alt_data_end+0xfffe360c>
    3630:	a2000044 	addi	r8,r20,1
    3634:	12000005 	stb	r8,0(r2)
    3638:	003f4606 	br	3354 <__alt_data_end+0xfffe3354>
    363c:	d9000b17 	ldw	r4,44(sp)
    3640:	2000c826 	beq	r4,zero,3964 <_dtoa_r+0xcb8>
    3644:	d9800317 	ldw	r6,12(sp)
    3648:	00c00044 	movi	r3,1
    364c:	1980f90e 	bge	r3,r6,3a34 <_dtoa_r+0xd88>
    3650:	d8800617 	ldw	r2,24(sp)
    3654:	d8c00a17 	ldw	r3,40(sp)
    3658:	157fffc4 	addi	r21,r2,-1
    365c:	1d41f316 	blt	r3,r21,3e2c <_dtoa_r+0x1180>
    3660:	1d6bc83a 	sub	r21,r3,r21
    3664:	d9c00617 	ldw	r7,24(sp)
    3668:	3802aa16 	blt	r7,zero,4114 <_dtoa_r+0x1468>
    366c:	dd000817 	ldw	r20,32(sp)
    3670:	d8800617 	ldw	r2,24(sp)
    3674:	d8c00817 	ldw	r3,32(sp)
    3678:	01400044 	movi	r5,1
    367c:	e009883a 	mov	r4,fp
    3680:	1887883a 	add	r3,r3,r2
    3684:	d8c00815 	stw	r3,32(sp)
    3688:	b0ad883a 	add	r22,r22,r2
    368c:	00067980 	call	6798 <__i2b>
    3690:	1023883a 	mov	r17,r2
    3694:	a0000826 	beq	r20,zero,36b8 <_dtoa_r+0xa0c>
    3698:	0580070e 	bge	zero,r22,36b8 <_dtoa_r+0xa0c>
    369c:	a005883a 	mov	r2,r20
    36a0:	b500b916 	blt	r22,r20,3988 <_dtoa_r+0xcdc>
    36a4:	d9000817 	ldw	r4,32(sp)
    36a8:	a0a9c83a 	sub	r20,r20,r2
    36ac:	b0adc83a 	sub	r22,r22,r2
    36b0:	2089c83a 	sub	r4,r4,r2
    36b4:	d9000815 	stw	r4,32(sp)
    36b8:	d9800a17 	ldw	r6,40(sp)
    36bc:	0181810e 	bge	zero,r6,3cc4 <_dtoa_r+0x1018>
    36c0:	d9c00b17 	ldw	r7,44(sp)
    36c4:	3800b326 	beq	r7,zero,3994 <_dtoa_r+0xce8>
    36c8:	a800b226 	beq	r21,zero,3994 <_dtoa_r+0xce8>
    36cc:	880b883a 	mov	r5,r17
    36d0:	a80d883a 	mov	r6,r21
    36d4:	e009883a 	mov	r4,fp
    36d8:	0006a600 	call	6a60 <__pow5mult>
    36dc:	d9800917 	ldw	r6,36(sp)
    36e0:	100b883a 	mov	r5,r2
    36e4:	e009883a 	mov	r4,fp
    36e8:	1023883a 	mov	r17,r2
    36ec:	00067d40 	call	67d4 <__multiply>
    36f0:	1021883a 	mov	r16,r2
    36f4:	d8800a17 	ldw	r2,40(sp)
    36f8:	d9400917 	ldw	r5,36(sp)
    36fc:	e009883a 	mov	r4,fp
    3700:	1545c83a 	sub	r2,r2,r21
    3704:	d8800a15 	stw	r2,40(sp)
    3708:	000640c0 	call	640c <_Bfree>
    370c:	d8c00a17 	ldw	r3,40(sp)
    3710:	18009f1e 	bne	r3,zero,3990 <_dtoa_r+0xce4>
    3714:	05c00044 	movi	r23,1
    3718:	e009883a 	mov	r4,fp
    371c:	b80b883a 	mov	r5,r23
    3720:	00067980 	call	6798 <__i2b>
    3724:	d9000d17 	ldw	r4,52(sp)
    3728:	102b883a 	mov	r21,r2
    372c:	2000ce26 	beq	r4,zero,3a68 <_dtoa_r+0xdbc>
    3730:	200d883a 	mov	r6,r4
    3734:	100b883a 	mov	r5,r2
    3738:	e009883a 	mov	r4,fp
    373c:	0006a600 	call	6a60 <__pow5mult>
    3740:	d9800317 	ldw	r6,12(sp)
    3744:	102b883a 	mov	r21,r2
    3748:	b981810e 	bge	r23,r6,3d50 <_dtoa_r+0x10a4>
    374c:	0027883a 	mov	r19,zero
    3750:	a8800417 	ldw	r2,16(r21)
    3754:	05c00804 	movi	r23,32
    3758:	10800104 	addi	r2,r2,4
    375c:	1085883a 	add	r2,r2,r2
    3760:	1085883a 	add	r2,r2,r2
    3764:	a885883a 	add	r2,r21,r2
    3768:	11000017 	ldw	r4,0(r2)
    376c:	00066800 	call	6680 <__hi0bits>
    3770:	b885c83a 	sub	r2,r23,r2
    3774:	1585883a 	add	r2,r2,r22
    3778:	108007cc 	andi	r2,r2,31
    377c:	1000b326 	beq	r2,zero,3a4c <_dtoa_r+0xda0>
    3780:	00c00804 	movi	r3,32
    3784:	1887c83a 	sub	r3,r3,r2
    3788:	01000104 	movi	r4,4
    378c:	20c2cd0e 	bge	r4,r3,42c4 <_dtoa_r+0x1618>
    3790:	00c00704 	movi	r3,28
    3794:	1885c83a 	sub	r2,r3,r2
    3798:	d8c00817 	ldw	r3,32(sp)
    379c:	a0a9883a 	add	r20,r20,r2
    37a0:	b0ad883a 	add	r22,r22,r2
    37a4:	1887883a 	add	r3,r3,r2
    37a8:	d8c00815 	stw	r3,32(sp)
    37ac:	d9800817 	ldw	r6,32(sp)
    37b0:	0180040e 	bge	zero,r6,37c4 <_dtoa_r+0xb18>
    37b4:	800b883a 	mov	r5,r16
    37b8:	e009883a 	mov	r4,fp
    37bc:	0006ba00 	call	6ba0 <__lshift>
    37c0:	1021883a 	mov	r16,r2
    37c4:	0580050e 	bge	zero,r22,37dc <_dtoa_r+0xb30>
    37c8:	a80b883a 	mov	r5,r21
    37cc:	b00d883a 	mov	r6,r22
    37d0:	e009883a 	mov	r4,fp
    37d4:	0006ba00 	call	6ba0 <__lshift>
    37d8:	102b883a 	mov	r21,r2
    37dc:	d9c00e17 	ldw	r7,56(sp)
    37e0:	3801211e 	bne	r7,zero,3c68 <_dtoa_r+0xfbc>
    37e4:	d9800617 	ldw	r6,24(sp)
    37e8:	0181380e 	bge	zero,r6,3ccc <_dtoa_r+0x1020>
    37ec:	d8c00b17 	ldw	r3,44(sp)
    37f0:	1800ab1e 	bne	r3,zero,3aa0 <_dtoa_r+0xdf4>
    37f4:	dc800717 	ldw	r18,28(sp)
    37f8:	dcc00617 	ldw	r19,24(sp)
    37fc:	9029883a 	mov	r20,r18
    3800:	00000206 	br	380c <_dtoa_r+0xb60>
    3804:	00064340 	call	6434 <__multadd>
    3808:	1021883a 	mov	r16,r2
    380c:	a80b883a 	mov	r5,r21
    3810:	8009883a 	mov	r4,r16
    3814:	0002a840 	call	2a84 <quorem>
    3818:	10800c04 	addi	r2,r2,48
    381c:	90800005 	stb	r2,0(r18)
    3820:	94800044 	addi	r18,r18,1
    3824:	9507c83a 	sub	r3,r18,r20
    3828:	000f883a 	mov	r7,zero
    382c:	01800284 	movi	r6,10
    3830:	800b883a 	mov	r5,r16
    3834:	e009883a 	mov	r4,fp
    3838:	1cfff216 	blt	r3,r19,3804 <__alt_data_end+0xfffe3804>
    383c:	1011883a 	mov	r8,r2
    3840:	d8800617 	ldw	r2,24(sp)
    3844:	0082370e 	bge	zero,r2,4124 <_dtoa_r+0x1478>
    3848:	d9000717 	ldw	r4,28(sp)
    384c:	0025883a 	mov	r18,zero
    3850:	20af883a 	add	r23,r4,r2
    3854:	01800044 	movi	r6,1
    3858:	800b883a 	mov	r5,r16
    385c:	e009883a 	mov	r4,fp
    3860:	da001715 	stw	r8,92(sp)
    3864:	0006ba00 	call	6ba0 <__lshift>
    3868:	a80b883a 	mov	r5,r21
    386c:	1009883a 	mov	r4,r2
    3870:	d8800915 	stw	r2,36(sp)
    3874:	0006ce80 	call	6ce8 <__mcmp>
    3878:	da001717 	ldw	r8,92(sp)
    387c:	0081800e 	bge	zero,r2,3e80 <_dtoa_r+0x11d4>
    3880:	b93fffc3 	ldbu	r4,-1(r23)
    3884:	b8bfffc4 	addi	r2,r23,-1
    3888:	1007883a 	mov	r3,r2
    388c:	01800e44 	movi	r6,57
    3890:	d9c00717 	ldw	r7,28(sp)
    3894:	00000506 	br	38ac <_dtoa_r+0xc00>
    3898:	18ffffc4 	addi	r3,r3,-1
    389c:	11c12326 	beq	r2,r7,3d2c <_dtoa_r+0x1080>
    38a0:	19000003 	ldbu	r4,0(r3)
    38a4:	102f883a 	mov	r23,r2
    38a8:	10bfffc4 	addi	r2,r2,-1
    38ac:	21403fcc 	andi	r5,r4,255
    38b0:	2940201c 	xori	r5,r5,128
    38b4:	297fe004 	addi	r5,r5,-128
    38b8:	29bff726 	beq	r5,r6,3898 <__alt_data_end+0xfffe3898>
    38bc:	21000044 	addi	r4,r4,1
    38c0:	11000005 	stb	r4,0(r2)
    38c4:	a80b883a 	mov	r5,r21
    38c8:	e009883a 	mov	r4,fp
    38cc:	000640c0 	call	640c <_Bfree>
    38d0:	883ea026 	beq	r17,zero,3354 <__alt_data_end+0xfffe3354>
    38d4:	90000426 	beq	r18,zero,38e8 <_dtoa_r+0xc3c>
    38d8:	94400326 	beq	r18,r17,38e8 <_dtoa_r+0xc3c>
    38dc:	900b883a 	mov	r5,r18
    38e0:	e009883a 	mov	r4,fp
    38e4:	000640c0 	call	640c <_Bfree>
    38e8:	880b883a 	mov	r5,r17
    38ec:	e009883a 	mov	r4,fp
    38f0:	000640c0 	call	640c <_Bfree>
    38f4:	003e9706 	br	3354 <__alt_data_end+0xfffe3354>
    38f8:	01800044 	movi	r6,1
    38fc:	d9800e15 	stw	r6,56(sp)
    3900:	003d9606 	br	2f5c <__alt_data_end+0xfffe2f5c>
    3904:	d8800817 	ldw	r2,32(sp)
    3908:	d8c00517 	ldw	r3,20(sp)
    390c:	d8000d15 	stw	zero,52(sp)
    3910:	10c5c83a 	sub	r2,r2,r3
    3914:	00c9c83a 	sub	r4,zero,r3
    3918:	d8800815 	stw	r2,32(sp)
    391c:	d9000a15 	stw	r4,40(sp)
    3920:	003d9706 	br	2f80 <__alt_data_end+0xfffe2f80>
    3924:	05adc83a 	sub	r22,zero,r22
    3928:	dd800815 	stw	r22,32(sp)
    392c:	002d883a 	mov	r22,zero
    3930:	003d8e06 	br	2f6c <__alt_data_end+0xfffe2f6c>
    3934:	d9000517 	ldw	r4,20(sp)
    3938:	000d0fc0 	call	d0fc <__floatsidf>
    393c:	100d883a 	mov	r6,r2
    3940:	180f883a 	mov	r7,r3
    3944:	a009883a 	mov	r4,r20
    3948:	880b883a 	mov	r5,r17
    394c:	000bcbc0 	call	bcbc <__eqdf2>
    3950:	103d7126 	beq	r2,zero,2f18 <__alt_data_end+0xfffe2f18>
    3954:	d9c00517 	ldw	r7,20(sp)
    3958:	39ffffc4 	addi	r7,r7,-1
    395c:	d9c00515 	stw	r7,20(sp)
    3960:	003d6d06 	br	2f18 <__alt_data_end+0xfffe2f18>
    3964:	dd400a17 	ldw	r21,40(sp)
    3968:	dd000817 	ldw	r20,32(sp)
    396c:	0023883a 	mov	r17,zero
    3970:	003f4806 	br	3694 <__alt_data_end+0xfffe3694>
    3974:	10e3c83a 	sub	r17,r2,r3
    3978:	9448983a 	sll	r4,r18,r17
    397c:	003d3206 	br	2e48 <__alt_data_end+0xfffe2e48>
    3980:	d8000e15 	stw	zero,56(sp)
    3984:	003d7506 	br	2f5c <__alt_data_end+0xfffe2f5c>
    3988:	b005883a 	mov	r2,r22
    398c:	003f4506 	br	36a4 <__alt_data_end+0xfffe36a4>
    3990:	dc000915 	stw	r16,36(sp)
    3994:	d9800a17 	ldw	r6,40(sp)
    3998:	d9400917 	ldw	r5,36(sp)
    399c:	e009883a 	mov	r4,fp
    39a0:	0006a600 	call	6a60 <__pow5mult>
    39a4:	1021883a 	mov	r16,r2
    39a8:	003f5a06 	br	3714 <__alt_data_end+0xfffe3714>
    39ac:	01c00044 	movi	r7,1
    39b0:	d9c00b15 	stw	r7,44(sp)
    39b4:	d8802217 	ldw	r2,136(sp)
    39b8:	0081280e 	bge	zero,r2,3e5c <_dtoa_r+0x11b0>
    39bc:	100d883a 	mov	r6,r2
    39c0:	1021883a 	mov	r16,r2
    39c4:	d8800c15 	stw	r2,48(sp)
    39c8:	d8800615 	stw	r2,24(sp)
    39cc:	003d8806 	br	2ff0 <__alt_data_end+0xfffe2ff0>
    39d0:	d8800617 	ldw	r2,24(sp)
    39d4:	00be9b16 	blt	zero,r2,3444 <__alt_data_end+0xfffe3444>
    39d8:	10010f1e 	bne	r2,zero,3e18 <_dtoa_r+0x116c>
    39dc:	880b883a 	mov	r5,r17
    39e0:	000d883a 	mov	r6,zero
    39e4:	01d00534 	movhi	r7,16404
    39e8:	8009883a 	mov	r4,r16
    39ec:	000bf140 	call	bf14 <__muldf3>
    39f0:	900d883a 	mov	r6,r18
    39f4:	980f883a 	mov	r7,r19
    39f8:	1009883a 	mov	r4,r2
    39fc:	180b883a 	mov	r5,r3
    3a00:	000bd440 	call	bd44 <__gedf2>
    3a04:	002b883a 	mov	r21,zero
    3a08:	0023883a 	mov	r17,zero
    3a0c:	1000bf16 	blt	r2,zero,3d0c <_dtoa_r+0x1060>
    3a10:	d9802217 	ldw	r6,136(sp)
    3a14:	ddc00717 	ldw	r23,28(sp)
    3a18:	018c303a 	nor	r6,zero,r6
    3a1c:	d9800515 	stw	r6,20(sp)
    3a20:	a80b883a 	mov	r5,r21
    3a24:	e009883a 	mov	r4,fp
    3a28:	000640c0 	call	640c <_Bfree>
    3a2c:	883e4926 	beq	r17,zero,3354 <__alt_data_end+0xfffe3354>
    3a30:	003fad06 	br	38e8 <__alt_data_end+0xfffe38e8>
    3a34:	d9c01117 	ldw	r7,68(sp)
    3a38:	3801bc26 	beq	r7,zero,412c <_dtoa_r+0x1480>
    3a3c:	10810cc4 	addi	r2,r2,1075
    3a40:	dd400a17 	ldw	r21,40(sp)
    3a44:	dd000817 	ldw	r20,32(sp)
    3a48:	003f0a06 	br	3674 <__alt_data_end+0xfffe3674>
    3a4c:	00800704 	movi	r2,28
    3a50:	d9000817 	ldw	r4,32(sp)
    3a54:	a0a9883a 	add	r20,r20,r2
    3a58:	b0ad883a 	add	r22,r22,r2
    3a5c:	2089883a 	add	r4,r4,r2
    3a60:	d9000815 	stw	r4,32(sp)
    3a64:	003f5106 	br	37ac <__alt_data_end+0xfffe37ac>
    3a68:	d8c00317 	ldw	r3,12(sp)
    3a6c:	b8c1fc0e 	bge	r23,r3,4260 <_dtoa_r+0x15b4>
    3a70:	0027883a 	mov	r19,zero
    3a74:	b805883a 	mov	r2,r23
    3a78:	003f3e06 	br	3774 <__alt_data_end+0xfffe3774>
    3a7c:	880b883a 	mov	r5,r17
    3a80:	e009883a 	mov	r4,fp
    3a84:	000f883a 	mov	r7,zero
    3a88:	01800284 	movi	r6,10
    3a8c:	00064340 	call	6434 <__multadd>
    3a90:	d9000c17 	ldw	r4,48(sp)
    3a94:	1023883a 	mov	r17,r2
    3a98:	0102040e 	bge	zero,r4,42ac <_dtoa_r+0x1600>
    3a9c:	d9000615 	stw	r4,24(sp)
    3aa0:	0500050e 	bge	zero,r20,3ab8 <_dtoa_r+0xe0c>
    3aa4:	880b883a 	mov	r5,r17
    3aa8:	a00d883a 	mov	r6,r20
    3aac:	e009883a 	mov	r4,fp
    3ab0:	0006ba00 	call	6ba0 <__lshift>
    3ab4:	1023883a 	mov	r17,r2
    3ab8:	9801241e 	bne	r19,zero,3f4c <_dtoa_r+0x12a0>
    3abc:	8829883a 	mov	r20,r17
    3ac0:	d9000617 	ldw	r4,24(sp)
    3ac4:	dcc00717 	ldw	r19,28(sp)
    3ac8:	9480004c 	andi	r18,r18,1
    3acc:	20bfffc4 	addi	r2,r4,-1
    3ad0:	9885883a 	add	r2,r19,r2
    3ad4:	d8800415 	stw	r2,16(sp)
    3ad8:	dc800615 	stw	r18,24(sp)
    3adc:	a80b883a 	mov	r5,r21
    3ae0:	8009883a 	mov	r4,r16
    3ae4:	0002a840 	call	2a84 <quorem>
    3ae8:	880b883a 	mov	r5,r17
    3aec:	8009883a 	mov	r4,r16
    3af0:	102f883a 	mov	r23,r2
    3af4:	0006ce80 	call	6ce8 <__mcmp>
    3af8:	a80b883a 	mov	r5,r21
    3afc:	a00d883a 	mov	r6,r20
    3b00:	e009883a 	mov	r4,fp
    3b04:	102d883a 	mov	r22,r2
    3b08:	0006d480 	call	6d48 <__mdiff>
    3b0c:	1007883a 	mov	r3,r2
    3b10:	10800317 	ldw	r2,12(r2)
    3b14:	bc800c04 	addi	r18,r23,48
    3b18:	180b883a 	mov	r5,r3
    3b1c:	10004e1e 	bne	r2,zero,3c58 <_dtoa_r+0xfac>
    3b20:	8009883a 	mov	r4,r16
    3b24:	d8c01615 	stw	r3,88(sp)
    3b28:	0006ce80 	call	6ce8 <__mcmp>
    3b2c:	d8c01617 	ldw	r3,88(sp)
    3b30:	e009883a 	mov	r4,fp
    3b34:	d8801615 	stw	r2,88(sp)
    3b38:	180b883a 	mov	r5,r3
    3b3c:	000640c0 	call	640c <_Bfree>
    3b40:	d8801617 	ldw	r2,88(sp)
    3b44:	1000041e 	bne	r2,zero,3b58 <_dtoa_r+0xeac>
    3b48:	d9800317 	ldw	r6,12(sp)
    3b4c:	3000021e 	bne	r6,zero,3b58 <_dtoa_r+0xeac>
    3b50:	d8c00617 	ldw	r3,24(sp)
    3b54:	18003726 	beq	r3,zero,3c34 <_dtoa_r+0xf88>
    3b58:	b0002016 	blt	r22,zero,3bdc <_dtoa_r+0xf30>
    3b5c:	b000041e 	bne	r22,zero,3b70 <_dtoa_r+0xec4>
    3b60:	d9000317 	ldw	r4,12(sp)
    3b64:	2000021e 	bne	r4,zero,3b70 <_dtoa_r+0xec4>
    3b68:	d8c00617 	ldw	r3,24(sp)
    3b6c:	18001b26 	beq	r3,zero,3bdc <_dtoa_r+0xf30>
    3b70:	00810716 	blt	zero,r2,3f90 <_dtoa_r+0x12e4>
    3b74:	d8c00417 	ldw	r3,16(sp)
    3b78:	9d800044 	addi	r22,r19,1
    3b7c:	9c800005 	stb	r18,0(r19)
    3b80:	b02f883a 	mov	r23,r22
    3b84:	98c10626 	beq	r19,r3,3fa0 <_dtoa_r+0x12f4>
    3b88:	800b883a 	mov	r5,r16
    3b8c:	000f883a 	mov	r7,zero
    3b90:	01800284 	movi	r6,10
    3b94:	e009883a 	mov	r4,fp
    3b98:	00064340 	call	6434 <__multadd>
    3b9c:	1021883a 	mov	r16,r2
    3ba0:	000f883a 	mov	r7,zero
    3ba4:	01800284 	movi	r6,10
    3ba8:	880b883a 	mov	r5,r17
    3bac:	e009883a 	mov	r4,fp
    3bb0:	8d002526 	beq	r17,r20,3c48 <_dtoa_r+0xf9c>
    3bb4:	00064340 	call	6434 <__multadd>
    3bb8:	a00b883a 	mov	r5,r20
    3bbc:	000f883a 	mov	r7,zero
    3bc0:	01800284 	movi	r6,10
    3bc4:	e009883a 	mov	r4,fp
    3bc8:	1023883a 	mov	r17,r2
    3bcc:	00064340 	call	6434 <__multadd>
    3bd0:	1029883a 	mov	r20,r2
    3bd4:	b027883a 	mov	r19,r22
    3bd8:	003fc006 	br	3adc <__alt_data_end+0xfffe3adc>
    3bdc:	9011883a 	mov	r8,r18
    3be0:	00800e0e 	bge	zero,r2,3c1c <_dtoa_r+0xf70>
    3be4:	800b883a 	mov	r5,r16
    3be8:	01800044 	movi	r6,1
    3bec:	e009883a 	mov	r4,fp
    3bf0:	da001715 	stw	r8,92(sp)
    3bf4:	0006ba00 	call	6ba0 <__lshift>
    3bf8:	a80b883a 	mov	r5,r21
    3bfc:	1009883a 	mov	r4,r2
    3c00:	1021883a 	mov	r16,r2
    3c04:	0006ce80 	call	6ce8 <__mcmp>
    3c08:	da001717 	ldw	r8,92(sp)
    3c0c:	0081960e 	bge	zero,r2,4268 <_dtoa_r+0x15bc>
    3c10:	00800e44 	movi	r2,57
    3c14:	40817026 	beq	r8,r2,41d8 <_dtoa_r+0x152c>
    3c18:	ba000c44 	addi	r8,r23,49
    3c1c:	8825883a 	mov	r18,r17
    3c20:	9dc00044 	addi	r23,r19,1
    3c24:	9a000005 	stb	r8,0(r19)
    3c28:	a023883a 	mov	r17,r20
    3c2c:	dc000915 	stw	r16,36(sp)
    3c30:	003f2406 	br	38c4 <__alt_data_end+0xfffe38c4>
    3c34:	00800e44 	movi	r2,57
    3c38:	9011883a 	mov	r8,r18
    3c3c:	90816626 	beq	r18,r2,41d8 <_dtoa_r+0x152c>
    3c40:	05bff516 	blt	zero,r22,3c18 <__alt_data_end+0xfffe3c18>
    3c44:	003ff506 	br	3c1c <__alt_data_end+0xfffe3c1c>
    3c48:	00064340 	call	6434 <__multadd>
    3c4c:	1023883a 	mov	r17,r2
    3c50:	1029883a 	mov	r20,r2
    3c54:	003fdf06 	br	3bd4 <__alt_data_end+0xfffe3bd4>
    3c58:	e009883a 	mov	r4,fp
    3c5c:	000640c0 	call	640c <_Bfree>
    3c60:	00800044 	movi	r2,1
    3c64:	003fbc06 	br	3b58 <__alt_data_end+0xfffe3b58>
    3c68:	a80b883a 	mov	r5,r21
    3c6c:	8009883a 	mov	r4,r16
    3c70:	0006ce80 	call	6ce8 <__mcmp>
    3c74:	103edb0e 	bge	r2,zero,37e4 <__alt_data_end+0xfffe37e4>
    3c78:	800b883a 	mov	r5,r16
    3c7c:	000f883a 	mov	r7,zero
    3c80:	01800284 	movi	r6,10
    3c84:	e009883a 	mov	r4,fp
    3c88:	00064340 	call	6434 <__multadd>
    3c8c:	1021883a 	mov	r16,r2
    3c90:	d8800517 	ldw	r2,20(sp)
    3c94:	d8c00b17 	ldw	r3,44(sp)
    3c98:	10bfffc4 	addi	r2,r2,-1
    3c9c:	d8800515 	stw	r2,20(sp)
    3ca0:	183f761e 	bne	r3,zero,3a7c <__alt_data_end+0xfffe3a7c>
    3ca4:	d9000c17 	ldw	r4,48(sp)
    3ca8:	0101730e 	bge	zero,r4,4278 <_dtoa_r+0x15cc>
    3cac:	d9000615 	stw	r4,24(sp)
    3cb0:	003ed006 	br	37f4 <__alt_data_end+0xfffe37f4>
    3cb4:	00800084 	movi	r2,2
    3cb8:	3081861e 	bne	r6,r2,42d4 <_dtoa_r+0x1628>
    3cbc:	d8000b15 	stw	zero,44(sp)
    3cc0:	003f3c06 	br	39b4 <__alt_data_end+0xfffe39b4>
    3cc4:	dc000917 	ldw	r16,36(sp)
    3cc8:	003e9206 	br	3714 <__alt_data_end+0xfffe3714>
    3ccc:	d9c00317 	ldw	r7,12(sp)
    3cd0:	00800084 	movi	r2,2
    3cd4:	11fec50e 	bge	r2,r7,37ec <__alt_data_end+0xfffe37ec>
    3cd8:	d9000617 	ldw	r4,24(sp)
    3cdc:	20013c1e 	bne	r4,zero,41d0 <_dtoa_r+0x1524>
    3ce0:	a80b883a 	mov	r5,r21
    3ce4:	000f883a 	mov	r7,zero
    3ce8:	01800144 	movi	r6,5
    3cec:	e009883a 	mov	r4,fp
    3cf0:	00064340 	call	6434 <__multadd>
    3cf4:	100b883a 	mov	r5,r2
    3cf8:	8009883a 	mov	r4,r16
    3cfc:	102b883a 	mov	r21,r2
    3d00:	0006ce80 	call	6ce8 <__mcmp>
    3d04:	dc000915 	stw	r16,36(sp)
    3d08:	00bf410e 	bge	zero,r2,3a10 <__alt_data_end+0xfffe3a10>
    3d0c:	d9c00717 	ldw	r7,28(sp)
    3d10:	00800c44 	movi	r2,49
    3d14:	38800005 	stb	r2,0(r7)
    3d18:	d8800517 	ldw	r2,20(sp)
    3d1c:	3dc00044 	addi	r23,r7,1
    3d20:	10800044 	addi	r2,r2,1
    3d24:	d8800515 	stw	r2,20(sp)
    3d28:	003f3d06 	br	3a20 <__alt_data_end+0xfffe3a20>
    3d2c:	d9800517 	ldw	r6,20(sp)
    3d30:	d9c00717 	ldw	r7,28(sp)
    3d34:	00800c44 	movi	r2,49
    3d38:	31800044 	addi	r6,r6,1
    3d3c:	d9800515 	stw	r6,20(sp)
    3d40:	38800005 	stb	r2,0(r7)
    3d44:	003edf06 	br	38c4 <__alt_data_end+0xfffe38c4>
    3d48:	d8000b15 	stw	zero,44(sp)
    3d4c:	003c9f06 	br	2fcc <__alt_data_end+0xfffe2fcc>
    3d50:	903e7e1e 	bne	r18,zero,374c <__alt_data_end+0xfffe374c>
    3d54:	00800434 	movhi	r2,16
    3d58:	10bfffc4 	addi	r2,r2,-1
    3d5c:	9884703a 	and	r2,r19,r2
    3d60:	1000ea1e 	bne	r2,zero,410c <_dtoa_r+0x1460>
    3d64:	9cdffc2c 	andhi	r19,r19,32752
    3d68:	9800e826 	beq	r19,zero,410c <_dtoa_r+0x1460>
    3d6c:	d9c00817 	ldw	r7,32(sp)
    3d70:	b5800044 	addi	r22,r22,1
    3d74:	04c00044 	movi	r19,1
    3d78:	39c00044 	addi	r7,r7,1
    3d7c:	d9c00815 	stw	r7,32(sp)
    3d80:	d8800d17 	ldw	r2,52(sp)
    3d84:	103e721e 	bne	r2,zero,3750 <__alt_data_end+0xfffe3750>
    3d88:	00800044 	movi	r2,1
    3d8c:	003e7906 	br	3774 <__alt_data_end+0xfffe3774>
    3d90:	8009883a 	mov	r4,r16
    3d94:	000d0fc0 	call	d0fc <__floatsidf>
    3d98:	d9800f17 	ldw	r6,60(sp)
    3d9c:	d9c01017 	ldw	r7,64(sp)
    3da0:	1009883a 	mov	r4,r2
    3da4:	180b883a 	mov	r5,r3
    3da8:	000bf140 	call	bf14 <__muldf3>
    3dac:	000d883a 	mov	r6,zero
    3db0:	01d00734 	movhi	r7,16412
    3db4:	1009883a 	mov	r4,r2
    3db8:	180b883a 	mov	r5,r3
    3dbc:	000aa400 	call	aa40 <__adddf3>
    3dc0:	047f3034 	movhi	r17,64704
    3dc4:	1021883a 	mov	r16,r2
    3dc8:	1c63883a 	add	r17,r3,r17
    3dcc:	d9000f17 	ldw	r4,60(sp)
    3dd0:	d9401017 	ldw	r5,64(sp)
    3dd4:	000d883a 	mov	r6,zero
    3dd8:	01d00534 	movhi	r7,16404
    3ddc:	000c7800 	call	c780 <__subdf3>
    3de0:	800d883a 	mov	r6,r16
    3de4:	880f883a 	mov	r7,r17
    3de8:	1009883a 	mov	r4,r2
    3dec:	180b883a 	mov	r5,r3
    3df0:	102b883a 	mov	r21,r2
    3df4:	1829883a 	mov	r20,r3
    3df8:	000bd440 	call	bd44 <__gedf2>
    3dfc:	00806c16 	blt	zero,r2,3fb0 <_dtoa_r+0x1304>
    3e00:	89e0003c 	xorhi	r7,r17,32768
    3e04:	800d883a 	mov	r6,r16
    3e08:	a809883a 	mov	r4,r21
    3e0c:	a00b883a 	mov	r5,r20
    3e10:	000be200 	call	be20 <__ledf2>
    3e14:	103d7e0e 	bge	r2,zero,3410 <__alt_data_end+0xfffe3410>
    3e18:	002b883a 	mov	r21,zero
    3e1c:	0023883a 	mov	r17,zero
    3e20:	003efb06 	br	3a10 <__alt_data_end+0xfffe3a10>
    3e24:	d8800717 	ldw	r2,28(sp)
    3e28:	003bd006 	br	2d6c <__alt_data_end+0xfffe2d6c>
    3e2c:	d9000a17 	ldw	r4,40(sp)
    3e30:	d9800d17 	ldw	r6,52(sp)
    3e34:	dd400a15 	stw	r21,40(sp)
    3e38:	a905c83a 	sub	r2,r21,r4
    3e3c:	308d883a 	add	r6,r6,r2
    3e40:	d9800d15 	stw	r6,52(sp)
    3e44:	002b883a 	mov	r21,zero
    3e48:	003e0606 	br	3664 <__alt_data_end+0xfffe3664>
    3e4c:	9023883a 	mov	r17,r18
    3e50:	9829883a 	mov	r20,r19
    3e54:	04000084 	movi	r16,2
    3e58:	003c9206 	br	30a4 <__alt_data_end+0xfffe30a4>
    3e5c:	04000044 	movi	r16,1
    3e60:	dc000c15 	stw	r16,48(sp)
    3e64:	dc000615 	stw	r16,24(sp)
    3e68:	dc002215 	stw	r16,136(sp)
    3e6c:	e0001115 	stw	zero,68(fp)
    3e70:	000b883a 	mov	r5,zero
    3e74:	003c6906 	br	301c <__alt_data_end+0xfffe301c>
    3e78:	3021883a 	mov	r16,r6
    3e7c:	003ffb06 	br	3e6c <__alt_data_end+0xfffe3e6c>
    3e80:	1000021e 	bne	r2,zero,3e8c <_dtoa_r+0x11e0>
    3e84:	4200004c 	andi	r8,r8,1
    3e88:	403e7d1e 	bne	r8,zero,3880 <__alt_data_end+0xfffe3880>
    3e8c:	01000c04 	movi	r4,48
    3e90:	00000106 	br	3e98 <_dtoa_r+0x11ec>
    3e94:	102f883a 	mov	r23,r2
    3e98:	b8bfffc4 	addi	r2,r23,-1
    3e9c:	10c00007 	ldb	r3,0(r2)
    3ea0:	193ffc26 	beq	r3,r4,3e94 <__alt_data_end+0xfffe3e94>
    3ea4:	003e8706 	br	38c4 <__alt_data_end+0xfffe38c4>
    3ea8:	d8800517 	ldw	r2,20(sp)
    3eac:	00a3c83a 	sub	r17,zero,r2
    3eb0:	8800a426 	beq	r17,zero,4144 <_dtoa_r+0x1498>
    3eb4:	888003cc 	andi	r2,r17,15
    3eb8:	100490fa 	slli	r2,r2,3
    3ebc:	00c00074 	movhi	r3,1
    3ec0:	18feda04 	addi	r3,r3,-1176
    3ec4:	1885883a 	add	r2,r3,r2
    3ec8:	11800017 	ldw	r6,0(r2)
    3ecc:	11c00117 	ldw	r7,4(r2)
    3ed0:	9009883a 	mov	r4,r18
    3ed4:	980b883a 	mov	r5,r19
    3ed8:	8823d13a 	srai	r17,r17,4
    3edc:	000bf140 	call	bf14 <__muldf3>
    3ee0:	d8800f15 	stw	r2,60(sp)
    3ee4:	d8c01015 	stw	r3,64(sp)
    3ee8:	8800e826 	beq	r17,zero,428c <_dtoa_r+0x15e0>
    3eec:	05000074 	movhi	r20,1
    3ef0:	a53ed004 	addi	r20,r20,-1216
    3ef4:	04000084 	movi	r16,2
    3ef8:	8980004c 	andi	r6,r17,1
    3efc:	1009883a 	mov	r4,r2
    3f00:	8823d07a 	srai	r17,r17,1
    3f04:	180b883a 	mov	r5,r3
    3f08:	30000426 	beq	r6,zero,3f1c <_dtoa_r+0x1270>
    3f0c:	a1800017 	ldw	r6,0(r20)
    3f10:	a1c00117 	ldw	r7,4(r20)
    3f14:	84000044 	addi	r16,r16,1
    3f18:	000bf140 	call	bf14 <__muldf3>
    3f1c:	a5000204 	addi	r20,r20,8
    3f20:	883ff51e 	bne	r17,zero,3ef8 <__alt_data_end+0xfffe3ef8>
    3f24:	d8800f15 	stw	r2,60(sp)
    3f28:	d8c01015 	stw	r3,64(sp)
    3f2c:	003c7606 	br	3108 <__alt_data_end+0xfffe3108>
    3f30:	00c00c04 	movi	r3,48
    3f34:	10c00005 	stb	r3,0(r2)
    3f38:	d8c00517 	ldw	r3,20(sp)
    3f3c:	bd3fffc3 	ldbu	r20,-1(r23)
    3f40:	18c00044 	addi	r3,r3,1
    3f44:	d8c00515 	stw	r3,20(sp)
    3f48:	003db906 	br	3630 <__alt_data_end+0xfffe3630>
    3f4c:	89400117 	ldw	r5,4(r17)
    3f50:	e009883a 	mov	r4,fp
    3f54:	00063640 	call	6364 <_Balloc>
    3f58:	89800417 	ldw	r6,16(r17)
    3f5c:	89400304 	addi	r5,r17,12
    3f60:	11000304 	addi	r4,r2,12
    3f64:	31800084 	addi	r6,r6,2
    3f68:	318d883a 	add	r6,r6,r6
    3f6c:	318d883a 	add	r6,r6,r6
    3f70:	1027883a 	mov	r19,r2
    3f74:	0005f980 	call	5f98 <memcpy>
    3f78:	01800044 	movi	r6,1
    3f7c:	980b883a 	mov	r5,r19
    3f80:	e009883a 	mov	r4,fp
    3f84:	0006ba00 	call	6ba0 <__lshift>
    3f88:	1029883a 	mov	r20,r2
    3f8c:	003ecc06 	br	3ac0 <__alt_data_end+0xfffe3ac0>
    3f90:	00800e44 	movi	r2,57
    3f94:	90809026 	beq	r18,r2,41d8 <_dtoa_r+0x152c>
    3f98:	92000044 	addi	r8,r18,1
    3f9c:	003f1f06 	br	3c1c <__alt_data_end+0xfffe3c1c>
    3fa0:	9011883a 	mov	r8,r18
    3fa4:	8825883a 	mov	r18,r17
    3fa8:	a023883a 	mov	r17,r20
    3fac:	003e2906 	br	3854 <__alt_data_end+0xfffe3854>
    3fb0:	002b883a 	mov	r21,zero
    3fb4:	0023883a 	mov	r17,zero
    3fb8:	003f5406 	br	3d0c <__alt_data_end+0xfffe3d0c>
    3fbc:	61bfffc4 	addi	r6,r12,-1
    3fc0:	300490fa 	slli	r2,r6,3
    3fc4:	00c00074 	movhi	r3,1
    3fc8:	18feda04 	addi	r3,r3,-1176
    3fcc:	1885883a 	add	r2,r3,r2
    3fd0:	11000017 	ldw	r4,0(r2)
    3fd4:	11400117 	ldw	r5,4(r2)
    3fd8:	d8800717 	ldw	r2,28(sp)
    3fdc:	880f883a 	mov	r7,r17
    3fe0:	d9801215 	stw	r6,72(sp)
    3fe4:	800d883a 	mov	r6,r16
    3fe8:	db001615 	stw	r12,88(sp)
    3fec:	15c00044 	addi	r23,r2,1
    3ff0:	000bf140 	call	bf14 <__muldf3>
    3ff4:	d9401017 	ldw	r5,64(sp)
    3ff8:	d9000f17 	ldw	r4,60(sp)
    3ffc:	d8c01515 	stw	r3,84(sp)
    4000:	d8801415 	stw	r2,80(sp)
    4004:	000d07c0 	call	d07c <__fixdfsi>
    4008:	1009883a 	mov	r4,r2
    400c:	1021883a 	mov	r16,r2
    4010:	000d0fc0 	call	d0fc <__floatsidf>
    4014:	d9000f17 	ldw	r4,60(sp)
    4018:	d9401017 	ldw	r5,64(sp)
    401c:	100d883a 	mov	r6,r2
    4020:	180f883a 	mov	r7,r3
    4024:	000c7800 	call	c780 <__subdf3>
    4028:	1829883a 	mov	r20,r3
    402c:	d8c00717 	ldw	r3,28(sp)
    4030:	84000c04 	addi	r16,r16,48
    4034:	1023883a 	mov	r17,r2
    4038:	1c000005 	stb	r16,0(r3)
    403c:	db001617 	ldw	r12,88(sp)
    4040:	00800044 	movi	r2,1
    4044:	60802226 	beq	r12,r2,40d0 <_dtoa_r+0x1424>
    4048:	d9c00717 	ldw	r7,28(sp)
    404c:	8805883a 	mov	r2,r17
    4050:	b82b883a 	mov	r21,r23
    4054:	3b19883a 	add	r12,r7,r12
    4058:	6023883a 	mov	r17,r12
    405c:	a007883a 	mov	r3,r20
    4060:	dc800f15 	stw	r18,60(sp)
    4064:	000d883a 	mov	r6,zero
    4068:	01d00934 	movhi	r7,16420
    406c:	1009883a 	mov	r4,r2
    4070:	180b883a 	mov	r5,r3
    4074:	000bf140 	call	bf14 <__muldf3>
    4078:	180b883a 	mov	r5,r3
    407c:	1009883a 	mov	r4,r2
    4080:	1829883a 	mov	r20,r3
    4084:	1025883a 	mov	r18,r2
    4088:	000d07c0 	call	d07c <__fixdfsi>
    408c:	1009883a 	mov	r4,r2
    4090:	1021883a 	mov	r16,r2
    4094:	000d0fc0 	call	d0fc <__floatsidf>
    4098:	100d883a 	mov	r6,r2
    409c:	180f883a 	mov	r7,r3
    40a0:	9009883a 	mov	r4,r18
    40a4:	a00b883a 	mov	r5,r20
    40a8:	84000c04 	addi	r16,r16,48
    40ac:	000c7800 	call	c780 <__subdf3>
    40b0:	ad400044 	addi	r21,r21,1
    40b4:	ac3fffc5 	stb	r16,-1(r21)
    40b8:	ac7fea1e 	bne	r21,r17,4064 <__alt_data_end+0xfffe4064>
    40bc:	1023883a 	mov	r17,r2
    40c0:	d8801217 	ldw	r2,72(sp)
    40c4:	dc800f17 	ldw	r18,60(sp)
    40c8:	1829883a 	mov	r20,r3
    40cc:	b8af883a 	add	r23,r23,r2
    40d0:	d9001417 	ldw	r4,80(sp)
    40d4:	d9401517 	ldw	r5,84(sp)
    40d8:	000d883a 	mov	r6,zero
    40dc:	01cff834 	movhi	r7,16352
    40e0:	000aa400 	call	aa40 <__adddf3>
    40e4:	880d883a 	mov	r6,r17
    40e8:	a00f883a 	mov	r7,r20
    40ec:	1009883a 	mov	r4,r2
    40f0:	180b883a 	mov	r5,r3
    40f4:	000be200 	call	be20 <__ledf2>
    40f8:	10003e0e 	bge	r2,zero,41f4 <_dtoa_r+0x1548>
    40fc:	d9001317 	ldw	r4,76(sp)
    4100:	bd3fffc3 	ldbu	r20,-1(r23)
    4104:	d9000515 	stw	r4,20(sp)
    4108:	003d3b06 	br	35f8 <__alt_data_end+0xfffe35f8>
    410c:	0027883a 	mov	r19,zero
    4110:	003f1b06 	br	3d80 <__alt_data_end+0xfffe3d80>
    4114:	d8800817 	ldw	r2,32(sp)
    4118:	11e9c83a 	sub	r20,r2,r7
    411c:	0005883a 	mov	r2,zero
    4120:	003d5406 	br	3674 <__alt_data_end+0xfffe3674>
    4124:	00800044 	movi	r2,1
    4128:	003dc706 	br	3848 <__alt_data_end+0xfffe3848>
    412c:	d8c00217 	ldw	r3,8(sp)
    4130:	00800d84 	movi	r2,54
    4134:	dd400a17 	ldw	r21,40(sp)
    4138:	10c5c83a 	sub	r2,r2,r3
    413c:	dd000817 	ldw	r20,32(sp)
    4140:	003d4c06 	br	3674 <__alt_data_end+0xfffe3674>
    4144:	dc800f15 	stw	r18,60(sp)
    4148:	dcc01015 	stw	r19,64(sp)
    414c:	04000084 	movi	r16,2
    4150:	003bed06 	br	3108 <__alt_data_end+0xfffe3108>
    4154:	d9000617 	ldw	r4,24(sp)
    4158:	203f0d26 	beq	r4,zero,3d90 <__alt_data_end+0xfffe3d90>
    415c:	d9800c17 	ldw	r6,48(sp)
    4160:	01bcab0e 	bge	zero,r6,3410 <__alt_data_end+0xfffe3410>
    4164:	d9401017 	ldw	r5,64(sp)
    4168:	d9000f17 	ldw	r4,60(sp)
    416c:	000d883a 	mov	r6,zero
    4170:	01d00934 	movhi	r7,16420
    4174:	000bf140 	call	bf14 <__muldf3>
    4178:	81000044 	addi	r4,r16,1
    417c:	d8800f15 	stw	r2,60(sp)
    4180:	d8c01015 	stw	r3,64(sp)
    4184:	000d0fc0 	call	d0fc <__floatsidf>
    4188:	d9800f17 	ldw	r6,60(sp)
    418c:	d9c01017 	ldw	r7,64(sp)
    4190:	1009883a 	mov	r4,r2
    4194:	180b883a 	mov	r5,r3
    4198:	000bf140 	call	bf14 <__muldf3>
    419c:	01d00734 	movhi	r7,16412
    41a0:	000d883a 	mov	r6,zero
    41a4:	1009883a 	mov	r4,r2
    41a8:	180b883a 	mov	r5,r3
    41ac:	000aa400 	call	aa40 <__adddf3>
    41b0:	d9c00517 	ldw	r7,20(sp)
    41b4:	047f3034 	movhi	r17,64704
    41b8:	1021883a 	mov	r16,r2
    41bc:	39ffffc4 	addi	r7,r7,-1
    41c0:	d9c01315 	stw	r7,76(sp)
    41c4:	1c63883a 	add	r17,r3,r17
    41c8:	db000c17 	ldw	r12,48(sp)
    41cc:	003bea06 	br	3178 <__alt_data_end+0xfffe3178>
    41d0:	dc000915 	stw	r16,36(sp)
    41d4:	003e0e06 	br	3a10 <__alt_data_end+0xfffe3a10>
    41d8:	01000e44 	movi	r4,57
    41dc:	8825883a 	mov	r18,r17
    41e0:	9dc00044 	addi	r23,r19,1
    41e4:	99000005 	stb	r4,0(r19)
    41e8:	a023883a 	mov	r17,r20
    41ec:	dc000915 	stw	r16,36(sp)
    41f0:	003da406 	br	3884 <__alt_data_end+0xfffe3884>
    41f4:	d9801417 	ldw	r6,80(sp)
    41f8:	d9c01517 	ldw	r7,84(sp)
    41fc:	0009883a 	mov	r4,zero
    4200:	014ff834 	movhi	r5,16352
    4204:	000c7800 	call	c780 <__subdf3>
    4208:	880d883a 	mov	r6,r17
    420c:	a00f883a 	mov	r7,r20
    4210:	1009883a 	mov	r4,r2
    4214:	180b883a 	mov	r5,r3
    4218:	000bd440 	call	bd44 <__gedf2>
    421c:	00bc7c0e 	bge	zero,r2,3410 <__alt_data_end+0xfffe3410>
    4220:	01000c04 	movi	r4,48
    4224:	00000106 	br	422c <_dtoa_r+0x1580>
    4228:	102f883a 	mov	r23,r2
    422c:	b8bfffc4 	addi	r2,r23,-1
    4230:	10c00007 	ldb	r3,0(r2)
    4234:	193ffc26 	beq	r3,r4,4228 <__alt_data_end+0xfffe4228>
    4238:	d9801317 	ldw	r6,76(sp)
    423c:	d9800515 	stw	r6,20(sp)
    4240:	003c4406 	br	3354 <__alt_data_end+0xfffe3354>
    4244:	d9801317 	ldw	r6,76(sp)
    4248:	d9800515 	stw	r6,20(sp)
    424c:	003cea06 	br	35f8 <__alt_data_end+0xfffe35f8>
    4250:	dd800f17 	ldw	r22,60(sp)
    4254:	dcc01017 	ldw	r19,64(sp)
    4258:	dc801217 	ldw	r18,72(sp)
    425c:	003c6c06 	br	3410 <__alt_data_end+0xfffe3410>
    4260:	903e031e 	bne	r18,zero,3a70 <__alt_data_end+0xfffe3a70>
    4264:	003ebb06 	br	3d54 <__alt_data_end+0xfffe3d54>
    4268:	103e6c1e 	bne	r2,zero,3c1c <__alt_data_end+0xfffe3c1c>
    426c:	4080004c 	andi	r2,r8,1
    4270:	103e6a26 	beq	r2,zero,3c1c <__alt_data_end+0xfffe3c1c>
    4274:	003e6606 	br	3c10 <__alt_data_end+0xfffe3c10>
    4278:	d8c00317 	ldw	r3,12(sp)
    427c:	00800084 	movi	r2,2
    4280:	10c02916 	blt	r2,r3,4328 <_dtoa_r+0x167c>
    4284:	d9000c17 	ldw	r4,48(sp)
    4288:	003e8806 	br	3cac <__alt_data_end+0xfffe3cac>
    428c:	04000084 	movi	r16,2
    4290:	003b9d06 	br	3108 <__alt_data_end+0xfffe3108>
    4294:	d9001317 	ldw	r4,76(sp)
    4298:	d9000515 	stw	r4,20(sp)
    429c:	003cd606 	br	35f8 <__alt_data_end+0xfffe35f8>
    42a0:	d8801317 	ldw	r2,76(sp)
    42a4:	d8800515 	stw	r2,20(sp)
    42a8:	003c2a06 	br	3354 <__alt_data_end+0xfffe3354>
    42ac:	d9800317 	ldw	r6,12(sp)
    42b0:	00800084 	movi	r2,2
    42b4:	11801516 	blt	r2,r6,430c <_dtoa_r+0x1660>
    42b8:	d9c00c17 	ldw	r7,48(sp)
    42bc:	d9c00615 	stw	r7,24(sp)
    42c0:	003df706 	br	3aa0 <__alt_data_end+0xfffe3aa0>
    42c4:	193d3926 	beq	r3,r4,37ac <__alt_data_end+0xfffe37ac>
    42c8:	00c00f04 	movi	r3,60
    42cc:	1885c83a 	sub	r2,r3,r2
    42d0:	003ddf06 	br	3a50 <__alt_data_end+0xfffe3a50>
    42d4:	e009883a 	mov	r4,fp
    42d8:	e0001115 	stw	zero,68(fp)
    42dc:	000b883a 	mov	r5,zero
    42e0:	00063640 	call	6364 <_Balloc>
    42e4:	d8800715 	stw	r2,28(sp)
    42e8:	d8c00717 	ldw	r3,28(sp)
    42ec:	00bfffc4 	movi	r2,-1
    42f0:	01000044 	movi	r4,1
    42f4:	d8800c15 	stw	r2,48(sp)
    42f8:	e0c01015 	stw	r3,64(fp)
    42fc:	d9000b15 	stw	r4,44(sp)
    4300:	d8800615 	stw	r2,24(sp)
    4304:	d8002215 	stw	zero,136(sp)
    4308:	003c4106 	br	3410 <__alt_data_end+0xfffe3410>
    430c:	d8c00c17 	ldw	r3,48(sp)
    4310:	d8c00615 	stw	r3,24(sp)
    4314:	003e7006 	br	3cd8 <__alt_data_end+0xfffe3cd8>
    4318:	04400044 	movi	r17,1
    431c:	003b2006 	br	2fa0 <__alt_data_end+0xfffe2fa0>
    4320:	000b883a 	mov	r5,zero
    4324:	003b3d06 	br	301c <__alt_data_end+0xfffe301c>
    4328:	d8800c17 	ldw	r2,48(sp)
    432c:	d8800615 	stw	r2,24(sp)
    4330:	003e6906 	br	3cd8 <__alt_data_end+0xfffe3cd8>

00004334 <__sflush_r>:
    4334:	2880030b 	ldhu	r2,12(r5)
    4338:	defffb04 	addi	sp,sp,-20
    433c:	dcc00315 	stw	r19,12(sp)
    4340:	dc400115 	stw	r17,4(sp)
    4344:	dfc00415 	stw	ra,16(sp)
    4348:	dc800215 	stw	r18,8(sp)
    434c:	dc000015 	stw	r16,0(sp)
    4350:	10c0020c 	andi	r3,r2,8
    4354:	2823883a 	mov	r17,r5
    4358:	2027883a 	mov	r19,r4
    435c:	1800311e 	bne	r3,zero,4424 <__sflush_r+0xf0>
    4360:	28c00117 	ldw	r3,4(r5)
    4364:	10820014 	ori	r2,r2,2048
    4368:	2880030d 	sth	r2,12(r5)
    436c:	00c04b0e 	bge	zero,r3,449c <__sflush_r+0x168>
    4370:	8a000a17 	ldw	r8,40(r17)
    4374:	40002326 	beq	r8,zero,4404 <__sflush_r+0xd0>
    4378:	9c000017 	ldw	r16,0(r19)
    437c:	10c4000c 	andi	r3,r2,4096
    4380:	98000015 	stw	zero,0(r19)
    4384:	18004826 	beq	r3,zero,44a8 <__sflush_r+0x174>
    4388:	89801417 	ldw	r6,80(r17)
    438c:	10c0010c 	andi	r3,r2,4
    4390:	18000626 	beq	r3,zero,43ac <__sflush_r+0x78>
    4394:	88c00117 	ldw	r3,4(r17)
    4398:	88800c17 	ldw	r2,48(r17)
    439c:	30cdc83a 	sub	r6,r6,r3
    43a0:	10000226 	beq	r2,zero,43ac <__sflush_r+0x78>
    43a4:	88800f17 	ldw	r2,60(r17)
    43a8:	308dc83a 	sub	r6,r6,r2
    43ac:	89400717 	ldw	r5,28(r17)
    43b0:	000f883a 	mov	r7,zero
    43b4:	9809883a 	mov	r4,r19
    43b8:	403ee83a 	callr	r8
    43bc:	00ffffc4 	movi	r3,-1
    43c0:	10c04426 	beq	r2,r3,44d4 <__sflush_r+0x1a0>
    43c4:	88c0030b 	ldhu	r3,12(r17)
    43c8:	89000417 	ldw	r4,16(r17)
    43cc:	88000115 	stw	zero,4(r17)
    43d0:	197dffcc 	andi	r5,r3,63487
    43d4:	8940030d 	sth	r5,12(r17)
    43d8:	89000015 	stw	r4,0(r17)
    43dc:	18c4000c 	andi	r3,r3,4096
    43e0:	18002c1e 	bne	r3,zero,4494 <__sflush_r+0x160>
    43e4:	89400c17 	ldw	r5,48(r17)
    43e8:	9c000015 	stw	r16,0(r19)
    43ec:	28000526 	beq	r5,zero,4404 <__sflush_r+0xd0>
    43f0:	88801004 	addi	r2,r17,64
    43f4:	28800226 	beq	r5,r2,4400 <__sflush_r+0xcc>
    43f8:	9809883a 	mov	r4,r19
    43fc:	0004ab00 	call	4ab0 <_free_r>
    4400:	88000c15 	stw	zero,48(r17)
    4404:	0005883a 	mov	r2,zero
    4408:	dfc00417 	ldw	ra,16(sp)
    440c:	dcc00317 	ldw	r19,12(sp)
    4410:	dc800217 	ldw	r18,8(sp)
    4414:	dc400117 	ldw	r17,4(sp)
    4418:	dc000017 	ldw	r16,0(sp)
    441c:	dec00504 	addi	sp,sp,20
    4420:	f800283a 	ret
    4424:	2c800417 	ldw	r18,16(r5)
    4428:	903ff626 	beq	r18,zero,4404 <__alt_data_end+0xfffe4404>
    442c:	2c000017 	ldw	r16,0(r5)
    4430:	108000cc 	andi	r2,r2,3
    4434:	2c800015 	stw	r18,0(r5)
    4438:	84a1c83a 	sub	r16,r16,r18
    443c:	1000131e 	bne	r2,zero,448c <__sflush_r+0x158>
    4440:	28800517 	ldw	r2,20(r5)
    4444:	88800215 	stw	r2,8(r17)
    4448:	04000316 	blt	zero,r16,4458 <__sflush_r+0x124>
    444c:	003fed06 	br	4404 <__alt_data_end+0xfffe4404>
    4450:	90a5883a 	add	r18,r18,r2
    4454:	043feb0e 	bge	zero,r16,4404 <__alt_data_end+0xfffe4404>
    4458:	88800917 	ldw	r2,36(r17)
    445c:	89400717 	ldw	r5,28(r17)
    4460:	800f883a 	mov	r7,r16
    4464:	900d883a 	mov	r6,r18
    4468:	9809883a 	mov	r4,r19
    446c:	103ee83a 	callr	r2
    4470:	80a1c83a 	sub	r16,r16,r2
    4474:	00bff616 	blt	zero,r2,4450 <__alt_data_end+0xfffe4450>
    4478:	88c0030b 	ldhu	r3,12(r17)
    447c:	00bfffc4 	movi	r2,-1
    4480:	18c01014 	ori	r3,r3,64
    4484:	88c0030d 	sth	r3,12(r17)
    4488:	003fdf06 	br	4408 <__alt_data_end+0xfffe4408>
    448c:	0005883a 	mov	r2,zero
    4490:	003fec06 	br	4444 <__alt_data_end+0xfffe4444>
    4494:	88801415 	stw	r2,80(r17)
    4498:	003fd206 	br	43e4 <__alt_data_end+0xfffe43e4>
    449c:	28c00f17 	ldw	r3,60(r5)
    44a0:	00ffb316 	blt	zero,r3,4370 <__alt_data_end+0xfffe4370>
    44a4:	003fd706 	br	4404 <__alt_data_end+0xfffe4404>
    44a8:	89400717 	ldw	r5,28(r17)
    44ac:	000d883a 	mov	r6,zero
    44b0:	01c00044 	movi	r7,1
    44b4:	9809883a 	mov	r4,r19
    44b8:	403ee83a 	callr	r8
    44bc:	100d883a 	mov	r6,r2
    44c0:	00bfffc4 	movi	r2,-1
    44c4:	30801426 	beq	r6,r2,4518 <__sflush_r+0x1e4>
    44c8:	8880030b 	ldhu	r2,12(r17)
    44cc:	8a000a17 	ldw	r8,40(r17)
    44d0:	003fae06 	br	438c <__alt_data_end+0xfffe438c>
    44d4:	98c00017 	ldw	r3,0(r19)
    44d8:	183fba26 	beq	r3,zero,43c4 <__alt_data_end+0xfffe43c4>
    44dc:	01000744 	movi	r4,29
    44e0:	19000626 	beq	r3,r4,44fc <__sflush_r+0x1c8>
    44e4:	01000584 	movi	r4,22
    44e8:	19000426 	beq	r3,r4,44fc <__sflush_r+0x1c8>
    44ec:	88c0030b 	ldhu	r3,12(r17)
    44f0:	18c01014 	ori	r3,r3,64
    44f4:	88c0030d 	sth	r3,12(r17)
    44f8:	003fc306 	br	4408 <__alt_data_end+0xfffe4408>
    44fc:	8880030b 	ldhu	r2,12(r17)
    4500:	88c00417 	ldw	r3,16(r17)
    4504:	88000115 	stw	zero,4(r17)
    4508:	10bdffcc 	andi	r2,r2,63487
    450c:	8880030d 	sth	r2,12(r17)
    4510:	88c00015 	stw	r3,0(r17)
    4514:	003fb306 	br	43e4 <__alt_data_end+0xfffe43e4>
    4518:	98800017 	ldw	r2,0(r19)
    451c:	103fea26 	beq	r2,zero,44c8 <__alt_data_end+0xfffe44c8>
    4520:	00c00744 	movi	r3,29
    4524:	10c00226 	beq	r2,r3,4530 <__sflush_r+0x1fc>
    4528:	00c00584 	movi	r3,22
    452c:	10c0031e 	bne	r2,r3,453c <__sflush_r+0x208>
    4530:	9c000015 	stw	r16,0(r19)
    4534:	0005883a 	mov	r2,zero
    4538:	003fb306 	br	4408 <__alt_data_end+0xfffe4408>
    453c:	88c0030b 	ldhu	r3,12(r17)
    4540:	3005883a 	mov	r2,r6
    4544:	18c01014 	ori	r3,r3,64
    4548:	88c0030d 	sth	r3,12(r17)
    454c:	003fae06 	br	4408 <__alt_data_end+0xfffe4408>

00004550 <_fflush_r>:
    4550:	defffd04 	addi	sp,sp,-12
    4554:	dc000115 	stw	r16,4(sp)
    4558:	dfc00215 	stw	ra,8(sp)
    455c:	2021883a 	mov	r16,r4
    4560:	20000226 	beq	r4,zero,456c <_fflush_r+0x1c>
    4564:	20800e17 	ldw	r2,56(r4)
    4568:	10000c26 	beq	r2,zero,459c <_fflush_r+0x4c>
    456c:	2880030f 	ldh	r2,12(r5)
    4570:	1000051e 	bne	r2,zero,4588 <_fflush_r+0x38>
    4574:	0005883a 	mov	r2,zero
    4578:	dfc00217 	ldw	ra,8(sp)
    457c:	dc000117 	ldw	r16,4(sp)
    4580:	dec00304 	addi	sp,sp,12
    4584:	f800283a 	ret
    4588:	8009883a 	mov	r4,r16
    458c:	dfc00217 	ldw	ra,8(sp)
    4590:	dc000117 	ldw	r16,4(sp)
    4594:	dec00304 	addi	sp,sp,12
    4598:	00043341 	jmpi	4334 <__sflush_r>
    459c:	d9400015 	stw	r5,0(sp)
    45a0:	000493c0 	call	493c <__sinit>
    45a4:	d9400017 	ldw	r5,0(sp)
    45a8:	003ff006 	br	456c <__alt_data_end+0xfffe456c>

000045ac <fflush>:
    45ac:	20000526 	beq	r4,zero,45c4 <fflush+0x18>
    45b0:	00800074 	movhi	r2,1
    45b4:	10860b04 	addi	r2,r2,6188
    45b8:	200b883a 	mov	r5,r4
    45bc:	11000017 	ldw	r4,0(r2)
    45c0:	00045501 	jmpi	4550 <_fflush_r>
    45c4:	00800074 	movhi	r2,1
    45c8:	10860a04 	addi	r2,r2,6184
    45cc:	11000017 	ldw	r4,0(r2)
    45d0:	01400034 	movhi	r5,0
    45d4:	29515404 	addi	r5,r5,17744
    45d8:	000534c1 	jmpi	534c <_fwalk_reent>

000045dc <__fp_unlock>:
    45dc:	0005883a 	mov	r2,zero
    45e0:	f800283a 	ret

000045e4 <_cleanup_r>:
    45e4:	01400074 	movhi	r5,1
    45e8:	29653a04 	addi	r5,r5,-27416
    45ec:	000534c1 	jmpi	534c <_fwalk_reent>

000045f0 <__sinit.part.1>:
    45f0:	defff704 	addi	sp,sp,-36
    45f4:	00c00034 	movhi	r3,0
    45f8:	dfc00815 	stw	ra,32(sp)
    45fc:	ddc00715 	stw	r23,28(sp)
    4600:	dd800615 	stw	r22,24(sp)
    4604:	dd400515 	stw	r21,20(sp)
    4608:	dd000415 	stw	r20,16(sp)
    460c:	dcc00315 	stw	r19,12(sp)
    4610:	dc800215 	stw	r18,8(sp)
    4614:	dc400115 	stw	r17,4(sp)
    4618:	dc000015 	stw	r16,0(sp)
    461c:	18d17904 	addi	r3,r3,17892
    4620:	24000117 	ldw	r16,4(r4)
    4624:	20c00f15 	stw	r3,60(r4)
    4628:	2080bb04 	addi	r2,r4,748
    462c:	00c000c4 	movi	r3,3
    4630:	20c0b915 	stw	r3,740(r4)
    4634:	2080ba15 	stw	r2,744(r4)
    4638:	2000b815 	stw	zero,736(r4)
    463c:	05c00204 	movi	r23,8
    4640:	00800104 	movi	r2,4
    4644:	2025883a 	mov	r18,r4
    4648:	b80d883a 	mov	r6,r23
    464c:	81001704 	addi	r4,r16,92
    4650:	000b883a 	mov	r5,zero
    4654:	80000015 	stw	zero,0(r16)
    4658:	80000115 	stw	zero,4(r16)
    465c:	80000215 	stw	zero,8(r16)
    4660:	8080030d 	sth	r2,12(r16)
    4664:	80001915 	stw	zero,100(r16)
    4668:	8000038d 	sth	zero,14(r16)
    466c:	80000415 	stw	zero,16(r16)
    4670:	80000515 	stw	zero,20(r16)
    4674:	80000615 	stw	zero,24(r16)
    4678:	000623c0 	call	623c <memset>
    467c:	05800034 	movhi	r22,0
    4680:	94400217 	ldw	r17,8(r18)
    4684:	05400034 	movhi	r21,0
    4688:	05000034 	movhi	r20,0
    468c:	04c00034 	movhi	r19,0
    4690:	b59e9204 	addi	r22,r22,31304
    4694:	ad5ea904 	addi	r21,r21,31396
    4698:	a51ec804 	addi	r20,r20,31520
    469c:	9cdedf04 	addi	r19,r19,31612
    46a0:	85800815 	stw	r22,32(r16)
    46a4:	85400915 	stw	r21,36(r16)
    46a8:	85000a15 	stw	r20,40(r16)
    46ac:	84c00b15 	stw	r19,44(r16)
    46b0:	84000715 	stw	r16,28(r16)
    46b4:	00800284 	movi	r2,10
    46b8:	8880030d 	sth	r2,12(r17)
    46bc:	00800044 	movi	r2,1
    46c0:	b80d883a 	mov	r6,r23
    46c4:	89001704 	addi	r4,r17,92
    46c8:	000b883a 	mov	r5,zero
    46cc:	88000015 	stw	zero,0(r17)
    46d0:	88000115 	stw	zero,4(r17)
    46d4:	88000215 	stw	zero,8(r17)
    46d8:	88001915 	stw	zero,100(r17)
    46dc:	8880038d 	sth	r2,14(r17)
    46e0:	88000415 	stw	zero,16(r17)
    46e4:	88000515 	stw	zero,20(r17)
    46e8:	88000615 	stw	zero,24(r17)
    46ec:	000623c0 	call	623c <memset>
    46f0:	94000317 	ldw	r16,12(r18)
    46f4:	00800484 	movi	r2,18
    46f8:	8c400715 	stw	r17,28(r17)
    46fc:	8d800815 	stw	r22,32(r17)
    4700:	8d400915 	stw	r21,36(r17)
    4704:	8d000a15 	stw	r20,40(r17)
    4708:	8cc00b15 	stw	r19,44(r17)
    470c:	8080030d 	sth	r2,12(r16)
    4710:	00800084 	movi	r2,2
    4714:	80000015 	stw	zero,0(r16)
    4718:	80000115 	stw	zero,4(r16)
    471c:	80000215 	stw	zero,8(r16)
    4720:	80001915 	stw	zero,100(r16)
    4724:	8080038d 	sth	r2,14(r16)
    4728:	80000415 	stw	zero,16(r16)
    472c:	80000515 	stw	zero,20(r16)
    4730:	80000615 	stw	zero,24(r16)
    4734:	b80d883a 	mov	r6,r23
    4738:	000b883a 	mov	r5,zero
    473c:	81001704 	addi	r4,r16,92
    4740:	000623c0 	call	623c <memset>
    4744:	00800044 	movi	r2,1
    4748:	84000715 	stw	r16,28(r16)
    474c:	85800815 	stw	r22,32(r16)
    4750:	85400915 	stw	r21,36(r16)
    4754:	85000a15 	stw	r20,40(r16)
    4758:	84c00b15 	stw	r19,44(r16)
    475c:	90800e15 	stw	r2,56(r18)
    4760:	dfc00817 	ldw	ra,32(sp)
    4764:	ddc00717 	ldw	r23,28(sp)
    4768:	dd800617 	ldw	r22,24(sp)
    476c:	dd400517 	ldw	r21,20(sp)
    4770:	dd000417 	ldw	r20,16(sp)
    4774:	dcc00317 	ldw	r19,12(sp)
    4778:	dc800217 	ldw	r18,8(sp)
    477c:	dc400117 	ldw	r17,4(sp)
    4780:	dc000017 	ldw	r16,0(sp)
    4784:	dec00904 	addi	sp,sp,36
    4788:	f800283a 	ret

0000478c <__fp_lock>:
    478c:	0005883a 	mov	r2,zero
    4790:	f800283a 	ret

00004794 <__sfmoreglue>:
    4794:	defffc04 	addi	sp,sp,-16
    4798:	dc800215 	stw	r18,8(sp)
    479c:	2825883a 	mov	r18,r5
    47a0:	dc000015 	stw	r16,0(sp)
    47a4:	01401a04 	movi	r5,104
    47a8:	2021883a 	mov	r16,r4
    47ac:	913fffc4 	addi	r4,r18,-1
    47b0:	dfc00315 	stw	ra,12(sp)
    47b4:	dc400115 	stw	r17,4(sp)
    47b8:	000aa180 	call	aa18 <__mulsi3>
    47bc:	8009883a 	mov	r4,r16
    47c0:	11401d04 	addi	r5,r2,116
    47c4:	1023883a 	mov	r17,r2
    47c8:	00056a80 	call	56a8 <_malloc_r>
    47cc:	1021883a 	mov	r16,r2
    47d0:	10000726 	beq	r2,zero,47f0 <__sfmoreglue+0x5c>
    47d4:	11000304 	addi	r4,r2,12
    47d8:	10000015 	stw	zero,0(r2)
    47dc:	14800115 	stw	r18,4(r2)
    47e0:	11000215 	stw	r4,8(r2)
    47e4:	89801a04 	addi	r6,r17,104
    47e8:	000b883a 	mov	r5,zero
    47ec:	000623c0 	call	623c <memset>
    47f0:	8005883a 	mov	r2,r16
    47f4:	dfc00317 	ldw	ra,12(sp)
    47f8:	dc800217 	ldw	r18,8(sp)
    47fc:	dc400117 	ldw	r17,4(sp)
    4800:	dc000017 	ldw	r16,0(sp)
    4804:	dec00404 	addi	sp,sp,16
    4808:	f800283a 	ret

0000480c <__sfp>:
    480c:	defffb04 	addi	sp,sp,-20
    4810:	dc000015 	stw	r16,0(sp)
    4814:	04000074 	movhi	r16,1
    4818:	84060a04 	addi	r16,r16,6184
    481c:	dcc00315 	stw	r19,12(sp)
    4820:	2027883a 	mov	r19,r4
    4824:	81000017 	ldw	r4,0(r16)
    4828:	dfc00415 	stw	ra,16(sp)
    482c:	dc800215 	stw	r18,8(sp)
    4830:	20800e17 	ldw	r2,56(r4)
    4834:	dc400115 	stw	r17,4(sp)
    4838:	1000021e 	bne	r2,zero,4844 <__sfp+0x38>
    483c:	00045f00 	call	45f0 <__sinit.part.1>
    4840:	81000017 	ldw	r4,0(r16)
    4844:	2480b804 	addi	r18,r4,736
    4848:	047fffc4 	movi	r17,-1
    484c:	91000117 	ldw	r4,4(r18)
    4850:	94000217 	ldw	r16,8(r18)
    4854:	213fffc4 	addi	r4,r4,-1
    4858:	20000a16 	blt	r4,zero,4884 <__sfp+0x78>
    485c:	8080030f 	ldh	r2,12(r16)
    4860:	10000c26 	beq	r2,zero,4894 <__sfp+0x88>
    4864:	80c01d04 	addi	r3,r16,116
    4868:	00000206 	br	4874 <__sfp+0x68>
    486c:	18bfe60f 	ldh	r2,-104(r3)
    4870:	10000826 	beq	r2,zero,4894 <__sfp+0x88>
    4874:	213fffc4 	addi	r4,r4,-1
    4878:	1c3ffd04 	addi	r16,r3,-12
    487c:	18c01a04 	addi	r3,r3,104
    4880:	247ffa1e 	bne	r4,r17,486c <__alt_data_end+0xfffe486c>
    4884:	90800017 	ldw	r2,0(r18)
    4888:	10001d26 	beq	r2,zero,4900 <__sfp+0xf4>
    488c:	1025883a 	mov	r18,r2
    4890:	003fee06 	br	484c <__alt_data_end+0xfffe484c>
    4894:	00bfffc4 	movi	r2,-1
    4898:	8080038d 	sth	r2,14(r16)
    489c:	00800044 	movi	r2,1
    48a0:	8080030d 	sth	r2,12(r16)
    48a4:	80001915 	stw	zero,100(r16)
    48a8:	80000015 	stw	zero,0(r16)
    48ac:	80000215 	stw	zero,8(r16)
    48b0:	80000115 	stw	zero,4(r16)
    48b4:	80000415 	stw	zero,16(r16)
    48b8:	80000515 	stw	zero,20(r16)
    48bc:	80000615 	stw	zero,24(r16)
    48c0:	01800204 	movi	r6,8
    48c4:	000b883a 	mov	r5,zero
    48c8:	81001704 	addi	r4,r16,92
    48cc:	000623c0 	call	623c <memset>
    48d0:	8005883a 	mov	r2,r16
    48d4:	80000c15 	stw	zero,48(r16)
    48d8:	80000d15 	stw	zero,52(r16)
    48dc:	80001115 	stw	zero,68(r16)
    48e0:	80001215 	stw	zero,72(r16)
    48e4:	dfc00417 	ldw	ra,16(sp)
    48e8:	dcc00317 	ldw	r19,12(sp)
    48ec:	dc800217 	ldw	r18,8(sp)
    48f0:	dc400117 	ldw	r17,4(sp)
    48f4:	dc000017 	ldw	r16,0(sp)
    48f8:	dec00504 	addi	sp,sp,20
    48fc:	f800283a 	ret
    4900:	01400104 	movi	r5,4
    4904:	9809883a 	mov	r4,r19
    4908:	00047940 	call	4794 <__sfmoreglue>
    490c:	90800015 	stw	r2,0(r18)
    4910:	103fde1e 	bne	r2,zero,488c <__alt_data_end+0xfffe488c>
    4914:	00800304 	movi	r2,12
    4918:	98800015 	stw	r2,0(r19)
    491c:	0005883a 	mov	r2,zero
    4920:	003ff006 	br	48e4 <__alt_data_end+0xfffe48e4>

00004924 <_cleanup>:
    4924:	00800074 	movhi	r2,1
    4928:	10860a04 	addi	r2,r2,6184
    492c:	11000017 	ldw	r4,0(r2)
    4930:	01400074 	movhi	r5,1
    4934:	29653a04 	addi	r5,r5,-27416
    4938:	000534c1 	jmpi	534c <_fwalk_reent>

0000493c <__sinit>:
    493c:	20800e17 	ldw	r2,56(r4)
    4940:	10000126 	beq	r2,zero,4948 <__sinit+0xc>
    4944:	f800283a 	ret
    4948:	00045f01 	jmpi	45f0 <__sinit.part.1>

0000494c <__sfp_lock_acquire>:
    494c:	f800283a 	ret

00004950 <__sfp_lock_release>:
    4950:	f800283a 	ret

00004954 <__sinit_lock_acquire>:
    4954:	f800283a 	ret

00004958 <__sinit_lock_release>:
    4958:	f800283a 	ret

0000495c <__fp_lock_all>:
    495c:	00800074 	movhi	r2,1
    4960:	10860b04 	addi	r2,r2,6188
    4964:	11000017 	ldw	r4,0(r2)
    4968:	01400034 	movhi	r5,0
    496c:	2951e304 	addi	r5,r5,18316
    4970:	00052881 	jmpi	5288 <_fwalk>

00004974 <__fp_unlock_all>:
    4974:	00800074 	movhi	r2,1
    4978:	10860b04 	addi	r2,r2,6188
    497c:	11000017 	ldw	r4,0(r2)
    4980:	01400034 	movhi	r5,0
    4984:	29517704 	addi	r5,r5,17884
    4988:	00052881 	jmpi	5288 <_fwalk>

0000498c <_malloc_trim_r>:
    498c:	defffb04 	addi	sp,sp,-20
    4990:	dcc00315 	stw	r19,12(sp)
    4994:	04c00074 	movhi	r19,1
    4998:	dc800215 	stw	r18,8(sp)
    499c:	dc400115 	stw	r17,4(sp)
    49a0:	dc000015 	stw	r16,0(sp)
    49a4:	dfc00415 	stw	ra,16(sp)
    49a8:	2821883a 	mov	r16,r5
    49ac:	9cc08604 	addi	r19,r19,536
    49b0:	2025883a 	mov	r18,r4
    49b4:	000d8980 	call	d898 <__malloc_lock>
    49b8:	98800217 	ldw	r2,8(r19)
    49bc:	14400117 	ldw	r17,4(r2)
    49c0:	00bfff04 	movi	r2,-4
    49c4:	88a2703a 	and	r17,r17,r2
    49c8:	8c21c83a 	sub	r16,r17,r16
    49cc:	8403fbc4 	addi	r16,r16,4079
    49d0:	8020d33a 	srli	r16,r16,12
    49d4:	0083ffc4 	movi	r2,4095
    49d8:	843fffc4 	addi	r16,r16,-1
    49dc:	8020933a 	slli	r16,r16,12
    49e0:	1400060e 	bge	r2,r16,49fc <_malloc_trim_r+0x70>
    49e4:	000b883a 	mov	r5,zero
    49e8:	9009883a 	mov	r4,r18
    49ec:	00079f40 	call	79f4 <_sbrk_r>
    49f0:	98c00217 	ldw	r3,8(r19)
    49f4:	1c47883a 	add	r3,r3,r17
    49f8:	10c00a26 	beq	r2,r3,4a24 <_malloc_trim_r+0x98>
    49fc:	9009883a 	mov	r4,r18
    4a00:	000d8bc0 	call	d8bc <__malloc_unlock>
    4a04:	0005883a 	mov	r2,zero
    4a08:	dfc00417 	ldw	ra,16(sp)
    4a0c:	dcc00317 	ldw	r19,12(sp)
    4a10:	dc800217 	ldw	r18,8(sp)
    4a14:	dc400117 	ldw	r17,4(sp)
    4a18:	dc000017 	ldw	r16,0(sp)
    4a1c:	dec00504 	addi	sp,sp,20
    4a20:	f800283a 	ret
    4a24:	040bc83a 	sub	r5,zero,r16
    4a28:	9009883a 	mov	r4,r18
    4a2c:	00079f40 	call	79f4 <_sbrk_r>
    4a30:	00ffffc4 	movi	r3,-1
    4a34:	10c00d26 	beq	r2,r3,4a6c <_malloc_trim_r+0xe0>
    4a38:	00c00074 	movhi	r3,1
    4a3c:	18cce304 	addi	r3,r3,13196
    4a40:	18800017 	ldw	r2,0(r3)
    4a44:	99000217 	ldw	r4,8(r19)
    4a48:	8c23c83a 	sub	r17,r17,r16
    4a4c:	8c400054 	ori	r17,r17,1
    4a50:	1421c83a 	sub	r16,r2,r16
    4a54:	24400115 	stw	r17,4(r4)
    4a58:	9009883a 	mov	r4,r18
    4a5c:	1c000015 	stw	r16,0(r3)
    4a60:	000d8bc0 	call	d8bc <__malloc_unlock>
    4a64:	00800044 	movi	r2,1
    4a68:	003fe706 	br	4a08 <__alt_data_end+0xfffe4a08>
    4a6c:	000b883a 	mov	r5,zero
    4a70:	9009883a 	mov	r4,r18
    4a74:	00079f40 	call	79f4 <_sbrk_r>
    4a78:	99000217 	ldw	r4,8(r19)
    4a7c:	014003c4 	movi	r5,15
    4a80:	1107c83a 	sub	r3,r2,r4
    4a84:	28ffdd0e 	bge	r5,r3,49fc <__alt_data_end+0xfffe49fc>
    4a88:	01400074 	movhi	r5,1
    4a8c:	29460d04 	addi	r5,r5,6196
    4a90:	29400017 	ldw	r5,0(r5)
    4a94:	18c00054 	ori	r3,r3,1
    4a98:	20c00115 	stw	r3,4(r4)
    4a9c:	00c00074 	movhi	r3,1
    4aa0:	1145c83a 	sub	r2,r2,r5
    4aa4:	18cce304 	addi	r3,r3,13196
    4aa8:	18800015 	stw	r2,0(r3)
    4aac:	003fd306 	br	49fc <__alt_data_end+0xfffe49fc>

00004ab0 <_free_r>:
    4ab0:	28004126 	beq	r5,zero,4bb8 <_free_r+0x108>
    4ab4:	defffd04 	addi	sp,sp,-12
    4ab8:	dc400115 	stw	r17,4(sp)
    4abc:	dc000015 	stw	r16,0(sp)
    4ac0:	2023883a 	mov	r17,r4
    4ac4:	2821883a 	mov	r16,r5
    4ac8:	dfc00215 	stw	ra,8(sp)
    4acc:	000d8980 	call	d898 <__malloc_lock>
    4ad0:	81ffff17 	ldw	r7,-4(r16)
    4ad4:	00bfff84 	movi	r2,-2
    4ad8:	01000074 	movhi	r4,1
    4adc:	81bffe04 	addi	r6,r16,-8
    4ae0:	3884703a 	and	r2,r7,r2
    4ae4:	21008604 	addi	r4,r4,536
    4ae8:	308b883a 	add	r5,r6,r2
    4aec:	2a400117 	ldw	r9,4(r5)
    4af0:	22000217 	ldw	r8,8(r4)
    4af4:	00ffff04 	movi	r3,-4
    4af8:	48c6703a 	and	r3,r9,r3
    4afc:	2a005726 	beq	r5,r8,4c5c <_free_r+0x1ac>
    4b00:	28c00115 	stw	r3,4(r5)
    4b04:	39c0004c 	andi	r7,r7,1
    4b08:	3800091e 	bne	r7,zero,4b30 <_free_r+0x80>
    4b0c:	823ffe17 	ldw	r8,-8(r16)
    4b10:	22400204 	addi	r9,r4,8
    4b14:	320dc83a 	sub	r6,r6,r8
    4b18:	31c00217 	ldw	r7,8(r6)
    4b1c:	1205883a 	add	r2,r2,r8
    4b20:	3a406526 	beq	r7,r9,4cb8 <_free_r+0x208>
    4b24:	32000317 	ldw	r8,12(r6)
    4b28:	3a000315 	stw	r8,12(r7)
    4b2c:	41c00215 	stw	r7,8(r8)
    4b30:	28cf883a 	add	r7,r5,r3
    4b34:	39c00117 	ldw	r7,4(r7)
    4b38:	39c0004c 	andi	r7,r7,1
    4b3c:	38003a26 	beq	r7,zero,4c28 <_free_r+0x178>
    4b40:	10c00054 	ori	r3,r2,1
    4b44:	30c00115 	stw	r3,4(r6)
    4b48:	3087883a 	add	r3,r6,r2
    4b4c:	18800015 	stw	r2,0(r3)
    4b50:	00c07fc4 	movi	r3,511
    4b54:	18801936 	bltu	r3,r2,4bbc <_free_r+0x10c>
    4b58:	1004d0fa 	srli	r2,r2,3
    4b5c:	01c00044 	movi	r7,1
    4b60:	21400117 	ldw	r5,4(r4)
    4b64:	10c00044 	addi	r3,r2,1
    4b68:	18c7883a 	add	r3,r3,r3
    4b6c:	1005d0ba 	srai	r2,r2,2
    4b70:	18c7883a 	add	r3,r3,r3
    4b74:	18c7883a 	add	r3,r3,r3
    4b78:	1907883a 	add	r3,r3,r4
    4b7c:	3884983a 	sll	r2,r7,r2
    4b80:	19c00017 	ldw	r7,0(r3)
    4b84:	1a3ffe04 	addi	r8,r3,-8
    4b88:	1144b03a 	or	r2,r2,r5
    4b8c:	32000315 	stw	r8,12(r6)
    4b90:	31c00215 	stw	r7,8(r6)
    4b94:	20800115 	stw	r2,4(r4)
    4b98:	19800015 	stw	r6,0(r3)
    4b9c:	39800315 	stw	r6,12(r7)
    4ba0:	8809883a 	mov	r4,r17
    4ba4:	dfc00217 	ldw	ra,8(sp)
    4ba8:	dc400117 	ldw	r17,4(sp)
    4bac:	dc000017 	ldw	r16,0(sp)
    4bb0:	dec00304 	addi	sp,sp,12
    4bb4:	000d8bc1 	jmpi	d8bc <__malloc_unlock>
    4bb8:	f800283a 	ret
    4bbc:	100ad27a 	srli	r5,r2,9
    4bc0:	00c00104 	movi	r3,4
    4bc4:	19404a36 	bltu	r3,r5,4cf0 <_free_r+0x240>
    4bc8:	100ad1ba 	srli	r5,r2,6
    4bcc:	28c00e44 	addi	r3,r5,57
    4bd0:	18c7883a 	add	r3,r3,r3
    4bd4:	29400e04 	addi	r5,r5,56
    4bd8:	18c7883a 	add	r3,r3,r3
    4bdc:	18c7883a 	add	r3,r3,r3
    4be0:	1909883a 	add	r4,r3,r4
    4be4:	20c00017 	ldw	r3,0(r4)
    4be8:	01c00074 	movhi	r7,1
    4bec:	213ffe04 	addi	r4,r4,-8
    4bf0:	39c08604 	addi	r7,r7,536
    4bf4:	20c04426 	beq	r4,r3,4d08 <_free_r+0x258>
    4bf8:	01ffff04 	movi	r7,-4
    4bfc:	19400117 	ldw	r5,4(r3)
    4c00:	29ca703a 	and	r5,r5,r7
    4c04:	1140022e 	bgeu	r2,r5,4c10 <_free_r+0x160>
    4c08:	18c00217 	ldw	r3,8(r3)
    4c0c:	20fffb1e 	bne	r4,r3,4bfc <__alt_data_end+0xfffe4bfc>
    4c10:	19000317 	ldw	r4,12(r3)
    4c14:	31000315 	stw	r4,12(r6)
    4c18:	30c00215 	stw	r3,8(r6)
    4c1c:	21800215 	stw	r6,8(r4)
    4c20:	19800315 	stw	r6,12(r3)
    4c24:	003fde06 	br	4ba0 <__alt_data_end+0xfffe4ba0>
    4c28:	29c00217 	ldw	r7,8(r5)
    4c2c:	10c5883a 	add	r2,r2,r3
    4c30:	00c00074 	movhi	r3,1
    4c34:	18c08804 	addi	r3,r3,544
    4c38:	38c03b26 	beq	r7,r3,4d28 <_free_r+0x278>
    4c3c:	2a000317 	ldw	r8,12(r5)
    4c40:	11400054 	ori	r5,r2,1
    4c44:	3087883a 	add	r3,r6,r2
    4c48:	3a000315 	stw	r8,12(r7)
    4c4c:	41c00215 	stw	r7,8(r8)
    4c50:	31400115 	stw	r5,4(r6)
    4c54:	18800015 	stw	r2,0(r3)
    4c58:	003fbd06 	br	4b50 <__alt_data_end+0xfffe4b50>
    4c5c:	39c0004c 	andi	r7,r7,1
    4c60:	10c5883a 	add	r2,r2,r3
    4c64:	3800071e 	bne	r7,zero,4c84 <_free_r+0x1d4>
    4c68:	81fffe17 	ldw	r7,-8(r16)
    4c6c:	31cdc83a 	sub	r6,r6,r7
    4c70:	30c00317 	ldw	r3,12(r6)
    4c74:	31400217 	ldw	r5,8(r6)
    4c78:	11c5883a 	add	r2,r2,r7
    4c7c:	28c00315 	stw	r3,12(r5)
    4c80:	19400215 	stw	r5,8(r3)
    4c84:	10c00054 	ori	r3,r2,1
    4c88:	30c00115 	stw	r3,4(r6)
    4c8c:	00c00074 	movhi	r3,1
    4c90:	18c60e04 	addi	r3,r3,6200
    4c94:	18c00017 	ldw	r3,0(r3)
    4c98:	21800215 	stw	r6,8(r4)
    4c9c:	10ffc036 	bltu	r2,r3,4ba0 <__alt_data_end+0xfffe4ba0>
    4ca0:	00800074 	movhi	r2,1
    4ca4:	108cda04 	addi	r2,r2,13160
    4ca8:	11400017 	ldw	r5,0(r2)
    4cac:	8809883a 	mov	r4,r17
    4cb0:	000498c0 	call	498c <_malloc_trim_r>
    4cb4:	003fba06 	br	4ba0 <__alt_data_end+0xfffe4ba0>
    4cb8:	28c9883a 	add	r4,r5,r3
    4cbc:	21000117 	ldw	r4,4(r4)
    4cc0:	2100004c 	andi	r4,r4,1
    4cc4:	2000391e 	bne	r4,zero,4dac <_free_r+0x2fc>
    4cc8:	29c00217 	ldw	r7,8(r5)
    4ccc:	29000317 	ldw	r4,12(r5)
    4cd0:	1885883a 	add	r2,r3,r2
    4cd4:	10c00054 	ori	r3,r2,1
    4cd8:	39000315 	stw	r4,12(r7)
    4cdc:	21c00215 	stw	r7,8(r4)
    4ce0:	30c00115 	stw	r3,4(r6)
    4ce4:	308d883a 	add	r6,r6,r2
    4ce8:	30800015 	stw	r2,0(r6)
    4cec:	003fac06 	br	4ba0 <__alt_data_end+0xfffe4ba0>
    4cf0:	00c00504 	movi	r3,20
    4cf4:	19401536 	bltu	r3,r5,4d4c <_free_r+0x29c>
    4cf8:	28c01704 	addi	r3,r5,92
    4cfc:	18c7883a 	add	r3,r3,r3
    4d00:	294016c4 	addi	r5,r5,91
    4d04:	003fb406 	br	4bd8 <__alt_data_end+0xfffe4bd8>
    4d08:	280bd0ba 	srai	r5,r5,2
    4d0c:	00c00044 	movi	r3,1
    4d10:	38800117 	ldw	r2,4(r7)
    4d14:	194a983a 	sll	r5,r3,r5
    4d18:	2007883a 	mov	r3,r4
    4d1c:	2884b03a 	or	r2,r5,r2
    4d20:	38800115 	stw	r2,4(r7)
    4d24:	003fbb06 	br	4c14 <__alt_data_end+0xfffe4c14>
    4d28:	21800515 	stw	r6,20(r4)
    4d2c:	21800415 	stw	r6,16(r4)
    4d30:	10c00054 	ori	r3,r2,1
    4d34:	31c00315 	stw	r7,12(r6)
    4d38:	31c00215 	stw	r7,8(r6)
    4d3c:	30c00115 	stw	r3,4(r6)
    4d40:	308d883a 	add	r6,r6,r2
    4d44:	30800015 	stw	r2,0(r6)
    4d48:	003f9506 	br	4ba0 <__alt_data_end+0xfffe4ba0>
    4d4c:	00c01504 	movi	r3,84
    4d50:	19400536 	bltu	r3,r5,4d68 <_free_r+0x2b8>
    4d54:	100ad33a 	srli	r5,r2,12
    4d58:	28c01bc4 	addi	r3,r5,111
    4d5c:	18c7883a 	add	r3,r3,r3
    4d60:	29401b84 	addi	r5,r5,110
    4d64:	003f9c06 	br	4bd8 <__alt_data_end+0xfffe4bd8>
    4d68:	00c05504 	movi	r3,340
    4d6c:	19400536 	bltu	r3,r5,4d84 <_free_r+0x2d4>
    4d70:	100ad3fa 	srli	r5,r2,15
    4d74:	28c01e04 	addi	r3,r5,120
    4d78:	18c7883a 	add	r3,r3,r3
    4d7c:	29401dc4 	addi	r5,r5,119
    4d80:	003f9506 	br	4bd8 <__alt_data_end+0xfffe4bd8>
    4d84:	00c15504 	movi	r3,1364
    4d88:	19400536 	bltu	r3,r5,4da0 <_free_r+0x2f0>
    4d8c:	100ad4ba 	srli	r5,r2,18
    4d90:	28c01f44 	addi	r3,r5,125
    4d94:	18c7883a 	add	r3,r3,r3
    4d98:	29401f04 	addi	r5,r5,124
    4d9c:	003f8e06 	br	4bd8 <__alt_data_end+0xfffe4bd8>
    4da0:	00c03f84 	movi	r3,254
    4da4:	01401f84 	movi	r5,126
    4da8:	003f8b06 	br	4bd8 <__alt_data_end+0xfffe4bd8>
    4dac:	10c00054 	ori	r3,r2,1
    4db0:	30c00115 	stw	r3,4(r6)
    4db4:	308d883a 	add	r6,r6,r2
    4db8:	30800015 	stw	r2,0(r6)
    4dbc:	003f7806 	br	4ba0 <__alt_data_end+0xfffe4ba0>

00004dc0 <__sfvwrite_r>:
    4dc0:	30800217 	ldw	r2,8(r6)
    4dc4:	10006726 	beq	r2,zero,4f64 <__sfvwrite_r+0x1a4>
    4dc8:	28c0030b 	ldhu	r3,12(r5)
    4dcc:	defff404 	addi	sp,sp,-48
    4dd0:	dd400715 	stw	r21,28(sp)
    4dd4:	dd000615 	stw	r20,24(sp)
    4dd8:	dc000215 	stw	r16,8(sp)
    4ddc:	dfc00b15 	stw	ra,44(sp)
    4de0:	df000a15 	stw	fp,40(sp)
    4de4:	ddc00915 	stw	r23,36(sp)
    4de8:	dd800815 	stw	r22,32(sp)
    4dec:	dcc00515 	stw	r19,20(sp)
    4df0:	dc800415 	stw	r18,16(sp)
    4df4:	dc400315 	stw	r17,12(sp)
    4df8:	1880020c 	andi	r2,r3,8
    4dfc:	2821883a 	mov	r16,r5
    4e00:	202b883a 	mov	r21,r4
    4e04:	3029883a 	mov	r20,r6
    4e08:	10002726 	beq	r2,zero,4ea8 <__sfvwrite_r+0xe8>
    4e0c:	28800417 	ldw	r2,16(r5)
    4e10:	10002526 	beq	r2,zero,4ea8 <__sfvwrite_r+0xe8>
    4e14:	1880008c 	andi	r2,r3,2
    4e18:	a4400017 	ldw	r17,0(r20)
    4e1c:	10002a26 	beq	r2,zero,4ec8 <__sfvwrite_r+0x108>
    4e20:	05a00034 	movhi	r22,32768
    4e24:	0027883a 	mov	r19,zero
    4e28:	0025883a 	mov	r18,zero
    4e2c:	b5bf0004 	addi	r22,r22,-1024
    4e30:	980d883a 	mov	r6,r19
    4e34:	a809883a 	mov	r4,r21
    4e38:	90004626 	beq	r18,zero,4f54 <__sfvwrite_r+0x194>
    4e3c:	900f883a 	mov	r7,r18
    4e40:	b480022e 	bgeu	r22,r18,4e4c <__sfvwrite_r+0x8c>
    4e44:	01e00034 	movhi	r7,32768
    4e48:	39ff0004 	addi	r7,r7,-1024
    4e4c:	80800917 	ldw	r2,36(r16)
    4e50:	81400717 	ldw	r5,28(r16)
    4e54:	103ee83a 	callr	r2
    4e58:	00805a0e 	bge	zero,r2,4fc4 <__sfvwrite_r+0x204>
    4e5c:	a0c00217 	ldw	r3,8(r20)
    4e60:	98a7883a 	add	r19,r19,r2
    4e64:	90a5c83a 	sub	r18,r18,r2
    4e68:	1885c83a 	sub	r2,r3,r2
    4e6c:	a0800215 	stw	r2,8(r20)
    4e70:	103fef1e 	bne	r2,zero,4e30 <__alt_data_end+0xfffe4e30>
    4e74:	0005883a 	mov	r2,zero
    4e78:	dfc00b17 	ldw	ra,44(sp)
    4e7c:	df000a17 	ldw	fp,40(sp)
    4e80:	ddc00917 	ldw	r23,36(sp)
    4e84:	dd800817 	ldw	r22,32(sp)
    4e88:	dd400717 	ldw	r21,28(sp)
    4e8c:	dd000617 	ldw	r20,24(sp)
    4e90:	dcc00517 	ldw	r19,20(sp)
    4e94:	dc800417 	ldw	r18,16(sp)
    4e98:	dc400317 	ldw	r17,12(sp)
    4e9c:	dc000217 	ldw	r16,8(sp)
    4ea0:	dec00c04 	addi	sp,sp,48
    4ea4:	f800283a 	ret
    4ea8:	800b883a 	mov	r5,r16
    4eac:	a809883a 	mov	r4,r21
    4eb0:	00029300 	call	2930 <__swsetup_r>
    4eb4:	1000ee1e 	bne	r2,zero,5270 <__sfvwrite_r+0x4b0>
    4eb8:	80c0030b 	ldhu	r3,12(r16)
    4ebc:	a4400017 	ldw	r17,0(r20)
    4ec0:	1880008c 	andi	r2,r3,2
    4ec4:	103fd61e 	bne	r2,zero,4e20 <__alt_data_end+0xfffe4e20>
    4ec8:	1880004c 	andi	r2,r3,1
    4ecc:	1000421e 	bne	r2,zero,4fd8 <__sfvwrite_r+0x218>
    4ed0:	0039883a 	mov	fp,zero
    4ed4:	0025883a 	mov	r18,zero
    4ed8:	90001a26 	beq	r18,zero,4f44 <__sfvwrite_r+0x184>
    4edc:	1880800c 	andi	r2,r3,512
    4ee0:	84c00217 	ldw	r19,8(r16)
    4ee4:	10002126 	beq	r2,zero,4f6c <__sfvwrite_r+0x1ac>
    4ee8:	982f883a 	mov	r23,r19
    4eec:	94c09636 	bltu	r18,r19,5148 <__sfvwrite_r+0x388>
    4ef0:	1881200c 	andi	r2,r3,1152
    4ef4:	1000a11e 	bne	r2,zero,517c <__sfvwrite_r+0x3bc>
    4ef8:	81000017 	ldw	r4,0(r16)
    4efc:	b80d883a 	mov	r6,r23
    4f00:	e00b883a 	mov	r5,fp
    4f04:	00060e00 	call	60e0 <memmove>
    4f08:	80c00217 	ldw	r3,8(r16)
    4f0c:	81000017 	ldw	r4,0(r16)
    4f10:	9005883a 	mov	r2,r18
    4f14:	1ce7c83a 	sub	r19,r3,r19
    4f18:	25cf883a 	add	r7,r4,r23
    4f1c:	84c00215 	stw	r19,8(r16)
    4f20:	81c00015 	stw	r7,0(r16)
    4f24:	a0c00217 	ldw	r3,8(r20)
    4f28:	e0b9883a 	add	fp,fp,r2
    4f2c:	90a5c83a 	sub	r18,r18,r2
    4f30:	18a7c83a 	sub	r19,r3,r2
    4f34:	a4c00215 	stw	r19,8(r20)
    4f38:	983fce26 	beq	r19,zero,4e74 <__alt_data_end+0xfffe4e74>
    4f3c:	80c0030b 	ldhu	r3,12(r16)
    4f40:	903fe61e 	bne	r18,zero,4edc <__alt_data_end+0xfffe4edc>
    4f44:	8f000017 	ldw	fp,0(r17)
    4f48:	8c800117 	ldw	r18,4(r17)
    4f4c:	8c400204 	addi	r17,r17,8
    4f50:	003fe106 	br	4ed8 <__alt_data_end+0xfffe4ed8>
    4f54:	8cc00017 	ldw	r19,0(r17)
    4f58:	8c800117 	ldw	r18,4(r17)
    4f5c:	8c400204 	addi	r17,r17,8
    4f60:	003fb306 	br	4e30 <__alt_data_end+0xfffe4e30>
    4f64:	0005883a 	mov	r2,zero
    4f68:	f800283a 	ret
    4f6c:	81000017 	ldw	r4,0(r16)
    4f70:	80800417 	ldw	r2,16(r16)
    4f74:	11005a36 	bltu	r2,r4,50e0 <__sfvwrite_r+0x320>
    4f78:	85c00517 	ldw	r23,20(r16)
    4f7c:	95c05836 	bltu	r18,r23,50e0 <__sfvwrite_r+0x320>
    4f80:	00a00034 	movhi	r2,32768
    4f84:	10bfffc4 	addi	r2,r2,-1
    4f88:	9009883a 	mov	r4,r18
    4f8c:	1480012e 	bgeu	r2,r18,4f94 <__sfvwrite_r+0x1d4>
    4f90:	1009883a 	mov	r4,r2
    4f94:	b80b883a 	mov	r5,r23
    4f98:	000a8640 	call	a864 <__divsi3>
    4f9c:	b80b883a 	mov	r5,r23
    4fa0:	1009883a 	mov	r4,r2
    4fa4:	000aa180 	call	aa18 <__mulsi3>
    4fa8:	81400717 	ldw	r5,28(r16)
    4fac:	80c00917 	ldw	r3,36(r16)
    4fb0:	100f883a 	mov	r7,r2
    4fb4:	e00d883a 	mov	r6,fp
    4fb8:	a809883a 	mov	r4,r21
    4fbc:	183ee83a 	callr	r3
    4fc0:	00bfd816 	blt	zero,r2,4f24 <__alt_data_end+0xfffe4f24>
    4fc4:	8080030b 	ldhu	r2,12(r16)
    4fc8:	10801014 	ori	r2,r2,64
    4fcc:	8080030d 	sth	r2,12(r16)
    4fd0:	00bfffc4 	movi	r2,-1
    4fd4:	003fa806 	br	4e78 <__alt_data_end+0xfffe4e78>
    4fd8:	0027883a 	mov	r19,zero
    4fdc:	0011883a 	mov	r8,zero
    4fe0:	0039883a 	mov	fp,zero
    4fe4:	0025883a 	mov	r18,zero
    4fe8:	90001f26 	beq	r18,zero,5068 <__sfvwrite_r+0x2a8>
    4fec:	40005a26 	beq	r8,zero,5158 <__sfvwrite_r+0x398>
    4ff0:	982d883a 	mov	r22,r19
    4ff4:	94c0012e 	bgeu	r18,r19,4ffc <__sfvwrite_r+0x23c>
    4ff8:	902d883a 	mov	r22,r18
    4ffc:	81000017 	ldw	r4,0(r16)
    5000:	80800417 	ldw	r2,16(r16)
    5004:	b02f883a 	mov	r23,r22
    5008:	81c00517 	ldw	r7,20(r16)
    500c:	1100032e 	bgeu	r2,r4,501c <__sfvwrite_r+0x25c>
    5010:	80c00217 	ldw	r3,8(r16)
    5014:	38c7883a 	add	r3,r7,r3
    5018:	1d801816 	blt	r3,r22,507c <__sfvwrite_r+0x2bc>
    501c:	b1c03e16 	blt	r22,r7,5118 <__sfvwrite_r+0x358>
    5020:	80800917 	ldw	r2,36(r16)
    5024:	81400717 	ldw	r5,28(r16)
    5028:	e00d883a 	mov	r6,fp
    502c:	da000115 	stw	r8,4(sp)
    5030:	a809883a 	mov	r4,r21
    5034:	103ee83a 	callr	r2
    5038:	102f883a 	mov	r23,r2
    503c:	da000117 	ldw	r8,4(sp)
    5040:	00bfe00e 	bge	zero,r2,4fc4 <__alt_data_end+0xfffe4fc4>
    5044:	9de7c83a 	sub	r19,r19,r23
    5048:	98001f26 	beq	r19,zero,50c8 <__sfvwrite_r+0x308>
    504c:	a0800217 	ldw	r2,8(r20)
    5050:	e5f9883a 	add	fp,fp,r23
    5054:	95e5c83a 	sub	r18,r18,r23
    5058:	15efc83a 	sub	r23,r2,r23
    505c:	a5c00215 	stw	r23,8(r20)
    5060:	b83f8426 	beq	r23,zero,4e74 <__alt_data_end+0xfffe4e74>
    5064:	903fe11e 	bne	r18,zero,4fec <__alt_data_end+0xfffe4fec>
    5068:	8f000017 	ldw	fp,0(r17)
    506c:	8c800117 	ldw	r18,4(r17)
    5070:	0011883a 	mov	r8,zero
    5074:	8c400204 	addi	r17,r17,8
    5078:	003fdb06 	br	4fe8 <__alt_data_end+0xfffe4fe8>
    507c:	180d883a 	mov	r6,r3
    5080:	e00b883a 	mov	r5,fp
    5084:	da000115 	stw	r8,4(sp)
    5088:	d8c00015 	stw	r3,0(sp)
    508c:	00060e00 	call	60e0 <memmove>
    5090:	d8c00017 	ldw	r3,0(sp)
    5094:	80800017 	ldw	r2,0(r16)
    5098:	800b883a 	mov	r5,r16
    509c:	a809883a 	mov	r4,r21
    50a0:	10c5883a 	add	r2,r2,r3
    50a4:	80800015 	stw	r2,0(r16)
    50a8:	d8c00015 	stw	r3,0(sp)
    50ac:	00045500 	call	4550 <_fflush_r>
    50b0:	d8c00017 	ldw	r3,0(sp)
    50b4:	da000117 	ldw	r8,4(sp)
    50b8:	103fc21e 	bne	r2,zero,4fc4 <__alt_data_end+0xfffe4fc4>
    50bc:	182f883a 	mov	r23,r3
    50c0:	9de7c83a 	sub	r19,r19,r23
    50c4:	983fe11e 	bne	r19,zero,504c <__alt_data_end+0xfffe504c>
    50c8:	800b883a 	mov	r5,r16
    50cc:	a809883a 	mov	r4,r21
    50d0:	00045500 	call	4550 <_fflush_r>
    50d4:	103fbb1e 	bne	r2,zero,4fc4 <__alt_data_end+0xfffe4fc4>
    50d8:	0011883a 	mov	r8,zero
    50dc:	003fdb06 	br	504c <__alt_data_end+0xfffe504c>
    50e0:	94c0012e 	bgeu	r18,r19,50e8 <__sfvwrite_r+0x328>
    50e4:	9027883a 	mov	r19,r18
    50e8:	980d883a 	mov	r6,r19
    50ec:	e00b883a 	mov	r5,fp
    50f0:	00060e00 	call	60e0 <memmove>
    50f4:	80800217 	ldw	r2,8(r16)
    50f8:	80c00017 	ldw	r3,0(r16)
    50fc:	14c5c83a 	sub	r2,r2,r19
    5100:	1cc7883a 	add	r3,r3,r19
    5104:	80800215 	stw	r2,8(r16)
    5108:	80c00015 	stw	r3,0(r16)
    510c:	10004326 	beq	r2,zero,521c <__sfvwrite_r+0x45c>
    5110:	9805883a 	mov	r2,r19
    5114:	003f8306 	br	4f24 <__alt_data_end+0xfffe4f24>
    5118:	b00d883a 	mov	r6,r22
    511c:	e00b883a 	mov	r5,fp
    5120:	da000115 	stw	r8,4(sp)
    5124:	00060e00 	call	60e0 <memmove>
    5128:	80800217 	ldw	r2,8(r16)
    512c:	80c00017 	ldw	r3,0(r16)
    5130:	da000117 	ldw	r8,4(sp)
    5134:	1585c83a 	sub	r2,r2,r22
    5138:	1dad883a 	add	r22,r3,r22
    513c:	80800215 	stw	r2,8(r16)
    5140:	85800015 	stw	r22,0(r16)
    5144:	003fbf06 	br	5044 <__alt_data_end+0xfffe5044>
    5148:	81000017 	ldw	r4,0(r16)
    514c:	9027883a 	mov	r19,r18
    5150:	902f883a 	mov	r23,r18
    5154:	003f6906 	br	4efc <__alt_data_end+0xfffe4efc>
    5158:	900d883a 	mov	r6,r18
    515c:	01400284 	movi	r5,10
    5160:	e009883a 	mov	r4,fp
    5164:	0005eb40 	call	5eb4 <memchr>
    5168:	10003e26 	beq	r2,zero,5264 <__sfvwrite_r+0x4a4>
    516c:	10800044 	addi	r2,r2,1
    5170:	1727c83a 	sub	r19,r2,fp
    5174:	02000044 	movi	r8,1
    5178:	003f9d06 	br	4ff0 <__alt_data_end+0xfffe4ff0>
    517c:	80800517 	ldw	r2,20(r16)
    5180:	81400417 	ldw	r5,16(r16)
    5184:	81c00017 	ldw	r7,0(r16)
    5188:	10a7883a 	add	r19,r2,r2
    518c:	9885883a 	add	r2,r19,r2
    5190:	1026d7fa 	srli	r19,r2,31
    5194:	396dc83a 	sub	r22,r7,r5
    5198:	b1000044 	addi	r4,r22,1
    519c:	9885883a 	add	r2,r19,r2
    51a0:	1027d07a 	srai	r19,r2,1
    51a4:	2485883a 	add	r2,r4,r18
    51a8:	980d883a 	mov	r6,r19
    51ac:	9880022e 	bgeu	r19,r2,51b8 <__sfvwrite_r+0x3f8>
    51b0:	1027883a 	mov	r19,r2
    51b4:	100d883a 	mov	r6,r2
    51b8:	18c1000c 	andi	r3,r3,1024
    51bc:	18001c26 	beq	r3,zero,5230 <__sfvwrite_r+0x470>
    51c0:	300b883a 	mov	r5,r6
    51c4:	a809883a 	mov	r4,r21
    51c8:	00056a80 	call	56a8 <_malloc_r>
    51cc:	102f883a 	mov	r23,r2
    51d0:	10002926 	beq	r2,zero,5278 <__sfvwrite_r+0x4b8>
    51d4:	81400417 	ldw	r5,16(r16)
    51d8:	b00d883a 	mov	r6,r22
    51dc:	1009883a 	mov	r4,r2
    51e0:	0005f980 	call	5f98 <memcpy>
    51e4:	8080030b 	ldhu	r2,12(r16)
    51e8:	00fedfc4 	movi	r3,-1153
    51ec:	10c4703a 	and	r2,r2,r3
    51f0:	10802014 	ori	r2,r2,128
    51f4:	8080030d 	sth	r2,12(r16)
    51f8:	bd89883a 	add	r4,r23,r22
    51fc:	9d8fc83a 	sub	r7,r19,r22
    5200:	85c00415 	stw	r23,16(r16)
    5204:	84c00515 	stw	r19,20(r16)
    5208:	81000015 	stw	r4,0(r16)
    520c:	9027883a 	mov	r19,r18
    5210:	81c00215 	stw	r7,8(r16)
    5214:	902f883a 	mov	r23,r18
    5218:	003f3806 	br	4efc <__alt_data_end+0xfffe4efc>
    521c:	800b883a 	mov	r5,r16
    5220:	a809883a 	mov	r4,r21
    5224:	00045500 	call	4550 <_fflush_r>
    5228:	103fb926 	beq	r2,zero,5110 <__alt_data_end+0xfffe5110>
    522c:	003f6506 	br	4fc4 <__alt_data_end+0xfffe4fc4>
    5230:	a809883a 	mov	r4,r21
    5234:	000741c0 	call	741c <_realloc_r>
    5238:	102f883a 	mov	r23,r2
    523c:	103fee1e 	bne	r2,zero,51f8 <__alt_data_end+0xfffe51f8>
    5240:	81400417 	ldw	r5,16(r16)
    5244:	a809883a 	mov	r4,r21
    5248:	0004ab00 	call	4ab0 <_free_r>
    524c:	8080030b 	ldhu	r2,12(r16)
    5250:	00ffdfc4 	movi	r3,-129
    5254:	1884703a 	and	r2,r3,r2
    5258:	00c00304 	movi	r3,12
    525c:	a8c00015 	stw	r3,0(r21)
    5260:	003f5906 	br	4fc8 <__alt_data_end+0xfffe4fc8>
    5264:	94c00044 	addi	r19,r18,1
    5268:	02000044 	movi	r8,1
    526c:	003f6006 	br	4ff0 <__alt_data_end+0xfffe4ff0>
    5270:	00bfffc4 	movi	r2,-1
    5274:	003f0006 	br	4e78 <__alt_data_end+0xfffe4e78>
    5278:	00800304 	movi	r2,12
    527c:	a8800015 	stw	r2,0(r21)
    5280:	8080030b 	ldhu	r2,12(r16)
    5284:	003f5006 	br	4fc8 <__alt_data_end+0xfffe4fc8>

00005288 <_fwalk>:
    5288:	defff704 	addi	sp,sp,-36
    528c:	dd000415 	stw	r20,16(sp)
    5290:	dfc00815 	stw	ra,32(sp)
    5294:	ddc00715 	stw	r23,28(sp)
    5298:	dd800615 	stw	r22,24(sp)
    529c:	dd400515 	stw	r21,20(sp)
    52a0:	dcc00315 	stw	r19,12(sp)
    52a4:	dc800215 	stw	r18,8(sp)
    52a8:	dc400115 	stw	r17,4(sp)
    52ac:	dc000015 	stw	r16,0(sp)
    52b0:	2500b804 	addi	r20,r4,736
    52b4:	a0002326 	beq	r20,zero,5344 <_fwalk+0xbc>
    52b8:	282b883a 	mov	r21,r5
    52bc:	002f883a 	mov	r23,zero
    52c0:	05800044 	movi	r22,1
    52c4:	04ffffc4 	movi	r19,-1
    52c8:	a4400117 	ldw	r17,4(r20)
    52cc:	a4800217 	ldw	r18,8(r20)
    52d0:	8c7fffc4 	addi	r17,r17,-1
    52d4:	88000d16 	blt	r17,zero,530c <_fwalk+0x84>
    52d8:	94000304 	addi	r16,r18,12
    52dc:	94800384 	addi	r18,r18,14
    52e0:	8080000b 	ldhu	r2,0(r16)
    52e4:	8c7fffc4 	addi	r17,r17,-1
    52e8:	813ffd04 	addi	r4,r16,-12
    52ec:	b080042e 	bgeu	r22,r2,5300 <_fwalk+0x78>
    52f0:	9080000f 	ldh	r2,0(r18)
    52f4:	14c00226 	beq	r2,r19,5300 <_fwalk+0x78>
    52f8:	a83ee83a 	callr	r21
    52fc:	b8aeb03a 	or	r23,r23,r2
    5300:	84001a04 	addi	r16,r16,104
    5304:	94801a04 	addi	r18,r18,104
    5308:	8cfff51e 	bne	r17,r19,52e0 <__alt_data_end+0xfffe52e0>
    530c:	a5000017 	ldw	r20,0(r20)
    5310:	a03fed1e 	bne	r20,zero,52c8 <__alt_data_end+0xfffe52c8>
    5314:	b805883a 	mov	r2,r23
    5318:	dfc00817 	ldw	ra,32(sp)
    531c:	ddc00717 	ldw	r23,28(sp)
    5320:	dd800617 	ldw	r22,24(sp)
    5324:	dd400517 	ldw	r21,20(sp)
    5328:	dd000417 	ldw	r20,16(sp)
    532c:	dcc00317 	ldw	r19,12(sp)
    5330:	dc800217 	ldw	r18,8(sp)
    5334:	dc400117 	ldw	r17,4(sp)
    5338:	dc000017 	ldw	r16,0(sp)
    533c:	dec00904 	addi	sp,sp,36
    5340:	f800283a 	ret
    5344:	002f883a 	mov	r23,zero
    5348:	003ff206 	br	5314 <__alt_data_end+0xfffe5314>

0000534c <_fwalk_reent>:
    534c:	defff704 	addi	sp,sp,-36
    5350:	dd000415 	stw	r20,16(sp)
    5354:	dfc00815 	stw	ra,32(sp)
    5358:	ddc00715 	stw	r23,28(sp)
    535c:	dd800615 	stw	r22,24(sp)
    5360:	dd400515 	stw	r21,20(sp)
    5364:	dcc00315 	stw	r19,12(sp)
    5368:	dc800215 	stw	r18,8(sp)
    536c:	dc400115 	stw	r17,4(sp)
    5370:	dc000015 	stw	r16,0(sp)
    5374:	2500b804 	addi	r20,r4,736
    5378:	a0002326 	beq	r20,zero,5408 <_fwalk_reent+0xbc>
    537c:	282b883a 	mov	r21,r5
    5380:	2027883a 	mov	r19,r4
    5384:	002f883a 	mov	r23,zero
    5388:	05800044 	movi	r22,1
    538c:	04bfffc4 	movi	r18,-1
    5390:	a4400117 	ldw	r17,4(r20)
    5394:	a4000217 	ldw	r16,8(r20)
    5398:	8c7fffc4 	addi	r17,r17,-1
    539c:	88000c16 	blt	r17,zero,53d0 <_fwalk_reent+0x84>
    53a0:	84000304 	addi	r16,r16,12
    53a4:	8080000b 	ldhu	r2,0(r16)
    53a8:	8c7fffc4 	addi	r17,r17,-1
    53ac:	817ffd04 	addi	r5,r16,-12
    53b0:	b080052e 	bgeu	r22,r2,53c8 <_fwalk_reent+0x7c>
    53b4:	8080008f 	ldh	r2,2(r16)
    53b8:	9809883a 	mov	r4,r19
    53bc:	14800226 	beq	r2,r18,53c8 <_fwalk_reent+0x7c>
    53c0:	a83ee83a 	callr	r21
    53c4:	b8aeb03a 	or	r23,r23,r2
    53c8:	84001a04 	addi	r16,r16,104
    53cc:	8cbff51e 	bne	r17,r18,53a4 <__alt_data_end+0xfffe53a4>
    53d0:	a5000017 	ldw	r20,0(r20)
    53d4:	a03fee1e 	bne	r20,zero,5390 <__alt_data_end+0xfffe5390>
    53d8:	b805883a 	mov	r2,r23
    53dc:	dfc00817 	ldw	ra,32(sp)
    53e0:	ddc00717 	ldw	r23,28(sp)
    53e4:	dd800617 	ldw	r22,24(sp)
    53e8:	dd400517 	ldw	r21,20(sp)
    53ec:	dd000417 	ldw	r20,16(sp)
    53f0:	dcc00317 	ldw	r19,12(sp)
    53f4:	dc800217 	ldw	r18,8(sp)
    53f8:	dc400117 	ldw	r17,4(sp)
    53fc:	dc000017 	ldw	r16,0(sp)
    5400:	dec00904 	addi	sp,sp,36
    5404:	f800283a 	ret
    5408:	002f883a 	mov	r23,zero
    540c:	003ff206 	br	53d8 <__alt_data_end+0xfffe53d8>

00005410 <_setlocale_r>:
    5410:	30001b26 	beq	r6,zero,5480 <_setlocale_r+0x70>
    5414:	01400074 	movhi	r5,1
    5418:	defffe04 	addi	sp,sp,-8
    541c:	297ec004 	addi	r5,r5,-1280
    5420:	3009883a 	mov	r4,r6
    5424:	dc000015 	stw	r16,0(sp)
    5428:	dfc00115 	stw	ra,4(sp)
    542c:	3021883a 	mov	r16,r6
    5430:	0007b840 	call	7b84 <strcmp>
    5434:	1000061e 	bne	r2,zero,5450 <_setlocale_r+0x40>
    5438:	00800074 	movhi	r2,1
    543c:	10bebf04 	addi	r2,r2,-1284
    5440:	dfc00117 	ldw	ra,4(sp)
    5444:	dc000017 	ldw	r16,0(sp)
    5448:	dec00204 	addi	sp,sp,8
    544c:	f800283a 	ret
    5450:	01400074 	movhi	r5,1
    5454:	297ebf04 	addi	r5,r5,-1284
    5458:	8009883a 	mov	r4,r16
    545c:	0007b840 	call	7b84 <strcmp>
    5460:	103ff526 	beq	r2,zero,5438 <__alt_data_end+0xfffe5438>
    5464:	01400074 	movhi	r5,1
    5468:	297eaa04 	addi	r5,r5,-1368
    546c:	8009883a 	mov	r4,r16
    5470:	0007b840 	call	7b84 <strcmp>
    5474:	103ff026 	beq	r2,zero,5438 <__alt_data_end+0xfffe5438>
    5478:	0005883a 	mov	r2,zero
    547c:	003ff006 	br	5440 <__alt_data_end+0xfffe5440>
    5480:	00800074 	movhi	r2,1
    5484:	10bebf04 	addi	r2,r2,-1284
    5488:	f800283a 	ret

0000548c <__locale_charset>:
    548c:	00800074 	movhi	r2,1
    5490:	10807004 	addi	r2,r2,448
    5494:	f800283a 	ret

00005498 <__locale_mb_cur_max>:
    5498:	00800074 	movhi	r2,1
    549c:	10860c04 	addi	r2,r2,6192
    54a0:	10800017 	ldw	r2,0(r2)
    54a4:	f800283a 	ret

000054a8 <__locale_msgcharset>:
    54a8:	00800074 	movhi	r2,1
    54ac:	10806804 	addi	r2,r2,416
    54b0:	f800283a 	ret

000054b4 <__locale_cjk_lang>:
    54b4:	0005883a 	mov	r2,zero
    54b8:	f800283a 	ret

000054bc <_localeconv_r>:
    54bc:	00800074 	movhi	r2,1
    54c0:	10807804 	addi	r2,r2,480
    54c4:	f800283a 	ret

000054c8 <setlocale>:
    54c8:	00800074 	movhi	r2,1
    54cc:	10860b04 	addi	r2,r2,6188
    54d0:	280d883a 	mov	r6,r5
    54d4:	200b883a 	mov	r5,r4
    54d8:	11000017 	ldw	r4,0(r2)
    54dc:	00054101 	jmpi	5410 <_setlocale_r>

000054e0 <localeconv>:
    54e0:	00800074 	movhi	r2,1
    54e4:	10807804 	addi	r2,r2,480
    54e8:	f800283a 	ret

000054ec <__smakebuf_r>:
    54ec:	2880030b 	ldhu	r2,12(r5)
    54f0:	10c0008c 	andi	r3,r2,2
    54f4:	1800411e 	bne	r3,zero,55fc <__smakebuf_r+0x110>
    54f8:	deffec04 	addi	sp,sp,-80
    54fc:	dc000f15 	stw	r16,60(sp)
    5500:	2821883a 	mov	r16,r5
    5504:	2940038f 	ldh	r5,14(r5)
    5508:	dc401015 	stw	r17,64(sp)
    550c:	dfc01315 	stw	ra,76(sp)
    5510:	dcc01215 	stw	r19,72(sp)
    5514:	dc801115 	stw	r18,68(sp)
    5518:	2023883a 	mov	r17,r4
    551c:	28001c16 	blt	r5,zero,5590 <__smakebuf_r+0xa4>
    5520:	d80d883a 	mov	r6,sp
    5524:	00097f40 	call	97f4 <_fstat_r>
    5528:	10001816 	blt	r2,zero,558c <__smakebuf_r+0xa0>
    552c:	d8800117 	ldw	r2,4(sp)
    5530:	00e00014 	movui	r3,32768
    5534:	10bc000c 	andi	r2,r2,61440
    5538:	14c80020 	cmpeqi	r19,r2,8192
    553c:	10c03726 	beq	r2,r3,561c <__smakebuf_r+0x130>
    5540:	80c0030b 	ldhu	r3,12(r16)
    5544:	18c20014 	ori	r3,r3,2048
    5548:	80c0030d 	sth	r3,12(r16)
    554c:	00c80004 	movi	r3,8192
    5550:	10c0521e 	bne	r2,r3,569c <__smakebuf_r+0x1b0>
    5554:	8140038f 	ldh	r5,14(r16)
    5558:	8809883a 	mov	r4,r17
    555c:	00098500 	call	9850 <_isatty_r>
    5560:	10004c26 	beq	r2,zero,5694 <__smakebuf_r+0x1a8>
    5564:	8080030b 	ldhu	r2,12(r16)
    5568:	80c010c4 	addi	r3,r16,67
    556c:	80c00015 	stw	r3,0(r16)
    5570:	10800054 	ori	r2,r2,1
    5574:	8080030d 	sth	r2,12(r16)
    5578:	00800044 	movi	r2,1
    557c:	80c00415 	stw	r3,16(r16)
    5580:	80800515 	stw	r2,20(r16)
    5584:	04810004 	movi	r18,1024
    5588:	00000706 	br	55a8 <__smakebuf_r+0xbc>
    558c:	8080030b 	ldhu	r2,12(r16)
    5590:	10c0200c 	andi	r3,r2,128
    5594:	18001f1e 	bne	r3,zero,5614 <__smakebuf_r+0x128>
    5598:	04810004 	movi	r18,1024
    559c:	10820014 	ori	r2,r2,2048
    55a0:	8080030d 	sth	r2,12(r16)
    55a4:	0027883a 	mov	r19,zero
    55a8:	900b883a 	mov	r5,r18
    55ac:	8809883a 	mov	r4,r17
    55b0:	00056a80 	call	56a8 <_malloc_r>
    55b4:	10002c26 	beq	r2,zero,5668 <__smakebuf_r+0x17c>
    55b8:	80c0030b 	ldhu	r3,12(r16)
    55bc:	01000034 	movhi	r4,0
    55c0:	21117904 	addi	r4,r4,17892
    55c4:	89000f15 	stw	r4,60(r17)
    55c8:	18c02014 	ori	r3,r3,128
    55cc:	80c0030d 	sth	r3,12(r16)
    55d0:	80800015 	stw	r2,0(r16)
    55d4:	80800415 	stw	r2,16(r16)
    55d8:	84800515 	stw	r18,20(r16)
    55dc:	98001a1e 	bne	r19,zero,5648 <__smakebuf_r+0x15c>
    55e0:	dfc01317 	ldw	ra,76(sp)
    55e4:	dcc01217 	ldw	r19,72(sp)
    55e8:	dc801117 	ldw	r18,68(sp)
    55ec:	dc401017 	ldw	r17,64(sp)
    55f0:	dc000f17 	ldw	r16,60(sp)
    55f4:	dec01404 	addi	sp,sp,80
    55f8:	f800283a 	ret
    55fc:	288010c4 	addi	r2,r5,67
    5600:	28800015 	stw	r2,0(r5)
    5604:	28800415 	stw	r2,16(r5)
    5608:	00800044 	movi	r2,1
    560c:	28800515 	stw	r2,20(r5)
    5610:	f800283a 	ret
    5614:	04801004 	movi	r18,64
    5618:	003fe006 	br	559c <__alt_data_end+0xfffe559c>
    561c:	81000a17 	ldw	r4,40(r16)
    5620:	00c00034 	movhi	r3,0
    5624:	18dec804 	addi	r3,r3,31520
    5628:	20ffc51e 	bne	r4,r3,5540 <__alt_data_end+0xfffe5540>
    562c:	8080030b 	ldhu	r2,12(r16)
    5630:	04810004 	movi	r18,1024
    5634:	84801315 	stw	r18,76(r16)
    5638:	1484b03a 	or	r2,r2,r18
    563c:	8080030d 	sth	r2,12(r16)
    5640:	0027883a 	mov	r19,zero
    5644:	003fd806 	br	55a8 <__alt_data_end+0xfffe55a8>
    5648:	8140038f 	ldh	r5,14(r16)
    564c:	8809883a 	mov	r4,r17
    5650:	00098500 	call	9850 <_isatty_r>
    5654:	103fe226 	beq	r2,zero,55e0 <__alt_data_end+0xfffe55e0>
    5658:	8080030b 	ldhu	r2,12(r16)
    565c:	10800054 	ori	r2,r2,1
    5660:	8080030d 	sth	r2,12(r16)
    5664:	003fde06 	br	55e0 <__alt_data_end+0xfffe55e0>
    5668:	8080030b 	ldhu	r2,12(r16)
    566c:	10c0800c 	andi	r3,r2,512
    5670:	183fdb1e 	bne	r3,zero,55e0 <__alt_data_end+0xfffe55e0>
    5674:	10800094 	ori	r2,r2,2
    5678:	80c010c4 	addi	r3,r16,67
    567c:	8080030d 	sth	r2,12(r16)
    5680:	00800044 	movi	r2,1
    5684:	80c00015 	stw	r3,0(r16)
    5688:	80c00415 	stw	r3,16(r16)
    568c:	80800515 	stw	r2,20(r16)
    5690:	003fd306 	br	55e0 <__alt_data_end+0xfffe55e0>
    5694:	04810004 	movi	r18,1024
    5698:	003fc306 	br	55a8 <__alt_data_end+0xfffe55a8>
    569c:	0027883a 	mov	r19,zero
    56a0:	04810004 	movi	r18,1024
    56a4:	003fc006 	br	55a8 <__alt_data_end+0xfffe55a8>

000056a8 <_malloc_r>:
    56a8:	defff504 	addi	sp,sp,-44
    56ac:	dc800315 	stw	r18,12(sp)
    56b0:	dfc00a15 	stw	ra,40(sp)
    56b4:	df000915 	stw	fp,36(sp)
    56b8:	ddc00815 	stw	r23,32(sp)
    56bc:	dd800715 	stw	r22,28(sp)
    56c0:	dd400615 	stw	r21,24(sp)
    56c4:	dd000515 	stw	r20,20(sp)
    56c8:	dcc00415 	stw	r19,16(sp)
    56cc:	dc400215 	stw	r17,8(sp)
    56d0:	dc000115 	stw	r16,4(sp)
    56d4:	288002c4 	addi	r2,r5,11
    56d8:	00c00584 	movi	r3,22
    56dc:	2025883a 	mov	r18,r4
    56e0:	18807f2e 	bgeu	r3,r2,58e0 <_malloc_r+0x238>
    56e4:	047ffe04 	movi	r17,-8
    56e8:	1462703a 	and	r17,r2,r17
    56ec:	8800a316 	blt	r17,zero,597c <_malloc_r+0x2d4>
    56f0:	8940a236 	bltu	r17,r5,597c <_malloc_r+0x2d4>
    56f4:	000d8980 	call	d898 <__malloc_lock>
    56f8:	00807dc4 	movi	r2,503
    56fc:	1441e92e 	bgeu	r2,r17,5ea4 <_malloc_r+0x7fc>
    5700:	8804d27a 	srli	r2,r17,9
    5704:	1000a126 	beq	r2,zero,598c <_malloc_r+0x2e4>
    5708:	00c00104 	movi	r3,4
    570c:	18811e36 	bltu	r3,r2,5b88 <_malloc_r+0x4e0>
    5710:	8804d1ba 	srli	r2,r17,6
    5714:	12000e44 	addi	r8,r2,57
    5718:	11c00e04 	addi	r7,r2,56
    571c:	4209883a 	add	r4,r8,r8
    5720:	04c00074 	movhi	r19,1
    5724:	2109883a 	add	r4,r4,r4
    5728:	9cc08604 	addi	r19,r19,536
    572c:	2109883a 	add	r4,r4,r4
    5730:	9909883a 	add	r4,r19,r4
    5734:	24000117 	ldw	r16,4(r4)
    5738:	213ffe04 	addi	r4,r4,-8
    573c:	24009726 	beq	r4,r16,599c <_malloc_r+0x2f4>
    5740:	80800117 	ldw	r2,4(r16)
    5744:	01bfff04 	movi	r6,-4
    5748:	014003c4 	movi	r5,15
    574c:	1184703a 	and	r2,r2,r6
    5750:	1447c83a 	sub	r3,r2,r17
    5754:	28c00716 	blt	r5,r3,5774 <_malloc_r+0xcc>
    5758:	1800920e 	bge	r3,zero,59a4 <_malloc_r+0x2fc>
    575c:	84000317 	ldw	r16,12(r16)
    5760:	24008e26 	beq	r4,r16,599c <_malloc_r+0x2f4>
    5764:	80800117 	ldw	r2,4(r16)
    5768:	1184703a 	and	r2,r2,r6
    576c:	1447c83a 	sub	r3,r2,r17
    5770:	28fff90e 	bge	r5,r3,5758 <__alt_data_end+0xfffe5758>
    5774:	3809883a 	mov	r4,r7
    5778:	01800074 	movhi	r6,1
    577c:	9c000417 	ldw	r16,16(r19)
    5780:	31808604 	addi	r6,r6,536
    5784:	32000204 	addi	r8,r6,8
    5788:	82013426 	beq	r16,r8,5c5c <_malloc_r+0x5b4>
    578c:	80c00117 	ldw	r3,4(r16)
    5790:	00bfff04 	movi	r2,-4
    5794:	188e703a 	and	r7,r3,r2
    5798:	3c45c83a 	sub	r2,r7,r17
    579c:	00c003c4 	movi	r3,15
    57a0:	18811f16 	blt	r3,r2,5c20 <_malloc_r+0x578>
    57a4:	32000515 	stw	r8,20(r6)
    57a8:	32000415 	stw	r8,16(r6)
    57ac:	10007f0e 	bge	r2,zero,59ac <_malloc_r+0x304>
    57b0:	00807fc4 	movi	r2,511
    57b4:	11c0fd36 	bltu	r2,r7,5bac <_malloc_r+0x504>
    57b8:	3806d0fa 	srli	r3,r7,3
    57bc:	01c00044 	movi	r7,1
    57c0:	30800117 	ldw	r2,4(r6)
    57c4:	19400044 	addi	r5,r3,1
    57c8:	294b883a 	add	r5,r5,r5
    57cc:	1807d0ba 	srai	r3,r3,2
    57d0:	294b883a 	add	r5,r5,r5
    57d4:	294b883a 	add	r5,r5,r5
    57d8:	298b883a 	add	r5,r5,r6
    57dc:	38c6983a 	sll	r3,r7,r3
    57e0:	29c00017 	ldw	r7,0(r5)
    57e4:	2a7ffe04 	addi	r9,r5,-8
    57e8:	1886b03a 	or	r3,r3,r2
    57ec:	82400315 	stw	r9,12(r16)
    57f0:	81c00215 	stw	r7,8(r16)
    57f4:	30c00115 	stw	r3,4(r6)
    57f8:	2c000015 	stw	r16,0(r5)
    57fc:	3c000315 	stw	r16,12(r7)
    5800:	2005d0ba 	srai	r2,r4,2
    5804:	01400044 	movi	r5,1
    5808:	288a983a 	sll	r5,r5,r2
    580c:	19406f36 	bltu	r3,r5,59cc <_malloc_r+0x324>
    5810:	28c4703a 	and	r2,r5,r3
    5814:	10000a1e 	bne	r2,zero,5840 <_malloc_r+0x198>
    5818:	00bfff04 	movi	r2,-4
    581c:	294b883a 	add	r5,r5,r5
    5820:	2088703a 	and	r4,r4,r2
    5824:	28c4703a 	and	r2,r5,r3
    5828:	21000104 	addi	r4,r4,4
    582c:	1000041e 	bne	r2,zero,5840 <_malloc_r+0x198>
    5830:	294b883a 	add	r5,r5,r5
    5834:	28c4703a 	and	r2,r5,r3
    5838:	21000104 	addi	r4,r4,4
    583c:	103ffc26 	beq	r2,zero,5830 <__alt_data_end+0xfffe5830>
    5840:	02bfff04 	movi	r10,-4
    5844:	024003c4 	movi	r9,15
    5848:	21800044 	addi	r6,r4,1
    584c:	318d883a 	add	r6,r6,r6
    5850:	318d883a 	add	r6,r6,r6
    5854:	318d883a 	add	r6,r6,r6
    5858:	998d883a 	add	r6,r19,r6
    585c:	333ffe04 	addi	r12,r6,-8
    5860:	2017883a 	mov	r11,r4
    5864:	31800104 	addi	r6,r6,4
    5868:	34000017 	ldw	r16,0(r6)
    586c:	31fffd04 	addi	r7,r6,-12
    5870:	81c0041e 	bne	r16,r7,5884 <_malloc_r+0x1dc>
    5874:	0000fb06 	br	5c64 <_malloc_r+0x5bc>
    5878:	1801030e 	bge	r3,zero,5c88 <_malloc_r+0x5e0>
    587c:	84000317 	ldw	r16,12(r16)
    5880:	81c0f826 	beq	r16,r7,5c64 <_malloc_r+0x5bc>
    5884:	80800117 	ldw	r2,4(r16)
    5888:	1284703a 	and	r2,r2,r10
    588c:	1447c83a 	sub	r3,r2,r17
    5890:	48fff90e 	bge	r9,r3,5878 <__alt_data_end+0xfffe5878>
    5894:	80800317 	ldw	r2,12(r16)
    5898:	81000217 	ldw	r4,8(r16)
    589c:	89400054 	ori	r5,r17,1
    58a0:	81400115 	stw	r5,4(r16)
    58a4:	20800315 	stw	r2,12(r4)
    58a8:	11000215 	stw	r4,8(r2)
    58ac:	8463883a 	add	r17,r16,r17
    58b0:	9c400515 	stw	r17,20(r19)
    58b4:	9c400415 	stw	r17,16(r19)
    58b8:	18800054 	ori	r2,r3,1
    58bc:	88800115 	stw	r2,4(r17)
    58c0:	8a000315 	stw	r8,12(r17)
    58c4:	8a000215 	stw	r8,8(r17)
    58c8:	88e3883a 	add	r17,r17,r3
    58cc:	88c00015 	stw	r3,0(r17)
    58d0:	9009883a 	mov	r4,r18
    58d4:	000d8bc0 	call	d8bc <__malloc_unlock>
    58d8:	80800204 	addi	r2,r16,8
    58dc:	00001b06 	br	594c <_malloc_r+0x2a4>
    58e0:	04400404 	movi	r17,16
    58e4:	89402536 	bltu	r17,r5,597c <_malloc_r+0x2d4>
    58e8:	000d8980 	call	d898 <__malloc_lock>
    58ec:	00800184 	movi	r2,6
    58f0:	01000084 	movi	r4,2
    58f4:	04c00074 	movhi	r19,1
    58f8:	1085883a 	add	r2,r2,r2
    58fc:	9cc08604 	addi	r19,r19,536
    5900:	1085883a 	add	r2,r2,r2
    5904:	9885883a 	add	r2,r19,r2
    5908:	14000117 	ldw	r16,4(r2)
    590c:	10fffe04 	addi	r3,r2,-8
    5910:	80c0d926 	beq	r16,r3,5c78 <_malloc_r+0x5d0>
    5914:	80c00117 	ldw	r3,4(r16)
    5918:	81000317 	ldw	r4,12(r16)
    591c:	00bfff04 	movi	r2,-4
    5920:	1884703a 	and	r2,r3,r2
    5924:	81400217 	ldw	r5,8(r16)
    5928:	8085883a 	add	r2,r16,r2
    592c:	10c00117 	ldw	r3,4(r2)
    5930:	29000315 	stw	r4,12(r5)
    5934:	21400215 	stw	r5,8(r4)
    5938:	18c00054 	ori	r3,r3,1
    593c:	10c00115 	stw	r3,4(r2)
    5940:	9009883a 	mov	r4,r18
    5944:	000d8bc0 	call	d8bc <__malloc_unlock>
    5948:	80800204 	addi	r2,r16,8
    594c:	dfc00a17 	ldw	ra,40(sp)
    5950:	df000917 	ldw	fp,36(sp)
    5954:	ddc00817 	ldw	r23,32(sp)
    5958:	dd800717 	ldw	r22,28(sp)
    595c:	dd400617 	ldw	r21,24(sp)
    5960:	dd000517 	ldw	r20,20(sp)
    5964:	dcc00417 	ldw	r19,16(sp)
    5968:	dc800317 	ldw	r18,12(sp)
    596c:	dc400217 	ldw	r17,8(sp)
    5970:	dc000117 	ldw	r16,4(sp)
    5974:	dec00b04 	addi	sp,sp,44
    5978:	f800283a 	ret
    597c:	00800304 	movi	r2,12
    5980:	90800015 	stw	r2,0(r18)
    5984:	0005883a 	mov	r2,zero
    5988:	003ff006 	br	594c <__alt_data_end+0xfffe594c>
    598c:	01002004 	movi	r4,128
    5990:	02001004 	movi	r8,64
    5994:	01c00fc4 	movi	r7,63
    5998:	003f6106 	br	5720 <__alt_data_end+0xfffe5720>
    599c:	4009883a 	mov	r4,r8
    59a0:	003f7506 	br	5778 <__alt_data_end+0xfffe5778>
    59a4:	81000317 	ldw	r4,12(r16)
    59a8:	003fde06 	br	5924 <__alt_data_end+0xfffe5924>
    59ac:	81c5883a 	add	r2,r16,r7
    59b0:	11400117 	ldw	r5,4(r2)
    59b4:	9009883a 	mov	r4,r18
    59b8:	29400054 	ori	r5,r5,1
    59bc:	11400115 	stw	r5,4(r2)
    59c0:	000d8bc0 	call	d8bc <__malloc_unlock>
    59c4:	80800204 	addi	r2,r16,8
    59c8:	003fe006 	br	594c <__alt_data_end+0xfffe594c>
    59cc:	9c000217 	ldw	r16,8(r19)
    59d0:	00bfff04 	movi	r2,-4
    59d4:	85800117 	ldw	r22,4(r16)
    59d8:	b0ac703a 	and	r22,r22,r2
    59dc:	b4400336 	bltu	r22,r17,59ec <_malloc_r+0x344>
    59e0:	b445c83a 	sub	r2,r22,r17
    59e4:	00c003c4 	movi	r3,15
    59e8:	18805d16 	blt	r3,r2,5b60 <_malloc_r+0x4b8>
    59ec:	05c00074 	movhi	r23,1
    59f0:	00800074 	movhi	r2,1
    59f4:	108cda04 	addi	r2,r2,13160
    59f8:	bdc60d04 	addi	r23,r23,6196
    59fc:	15400017 	ldw	r21,0(r2)
    5a00:	b8c00017 	ldw	r3,0(r23)
    5a04:	00bfffc4 	movi	r2,-1
    5a08:	858d883a 	add	r6,r16,r22
    5a0c:	8d6b883a 	add	r21,r17,r21
    5a10:	1880ea26 	beq	r3,r2,5dbc <_malloc_r+0x714>
    5a14:	ad4403c4 	addi	r21,r21,4111
    5a18:	00bc0004 	movi	r2,-4096
    5a1c:	a8aa703a 	and	r21,r21,r2
    5a20:	a80b883a 	mov	r5,r21
    5a24:	9009883a 	mov	r4,r18
    5a28:	d9800015 	stw	r6,0(sp)
    5a2c:	00079f40 	call	79f4 <_sbrk_r>
    5a30:	1029883a 	mov	r20,r2
    5a34:	00bfffc4 	movi	r2,-1
    5a38:	d9800017 	ldw	r6,0(sp)
    5a3c:	a080e826 	beq	r20,r2,5de0 <_malloc_r+0x738>
    5a40:	a180a636 	bltu	r20,r6,5cdc <_malloc_r+0x634>
    5a44:	07000074 	movhi	fp,1
    5a48:	e70ce304 	addi	fp,fp,13196
    5a4c:	e0800017 	ldw	r2,0(fp)
    5a50:	a887883a 	add	r3,r21,r2
    5a54:	e0c00015 	stw	r3,0(fp)
    5a58:	3500e626 	beq	r6,r20,5df4 <_malloc_r+0x74c>
    5a5c:	b9000017 	ldw	r4,0(r23)
    5a60:	00bfffc4 	movi	r2,-1
    5a64:	2080ee26 	beq	r4,r2,5e20 <_malloc_r+0x778>
    5a68:	a185c83a 	sub	r2,r20,r6
    5a6c:	10c5883a 	add	r2,r2,r3
    5a70:	e0800015 	stw	r2,0(fp)
    5a74:	a0c001cc 	andi	r3,r20,7
    5a78:	1800bc26 	beq	r3,zero,5d6c <_malloc_r+0x6c4>
    5a7c:	a0e9c83a 	sub	r20,r20,r3
    5a80:	00840204 	movi	r2,4104
    5a84:	a5000204 	addi	r20,r20,8
    5a88:	10c7c83a 	sub	r3,r2,r3
    5a8c:	a545883a 	add	r2,r20,r21
    5a90:	1083ffcc 	andi	r2,r2,4095
    5a94:	18abc83a 	sub	r21,r3,r2
    5a98:	a80b883a 	mov	r5,r21
    5a9c:	9009883a 	mov	r4,r18
    5aa0:	00079f40 	call	79f4 <_sbrk_r>
    5aa4:	00ffffc4 	movi	r3,-1
    5aa8:	10c0e126 	beq	r2,r3,5e30 <_malloc_r+0x788>
    5aac:	1505c83a 	sub	r2,r2,r20
    5ab0:	1545883a 	add	r2,r2,r21
    5ab4:	10800054 	ori	r2,r2,1
    5ab8:	e0c00017 	ldw	r3,0(fp)
    5abc:	9d000215 	stw	r20,8(r19)
    5ac0:	a0800115 	stw	r2,4(r20)
    5ac4:	a8c7883a 	add	r3,r21,r3
    5ac8:	e0c00015 	stw	r3,0(fp)
    5acc:	84c00e26 	beq	r16,r19,5b08 <_malloc_r+0x460>
    5ad0:	018003c4 	movi	r6,15
    5ad4:	3580a72e 	bgeu	r6,r22,5d74 <_malloc_r+0x6cc>
    5ad8:	81400117 	ldw	r5,4(r16)
    5adc:	013ffe04 	movi	r4,-8
    5ae0:	b0bffd04 	addi	r2,r22,-12
    5ae4:	1104703a 	and	r2,r2,r4
    5ae8:	2900004c 	andi	r4,r5,1
    5aec:	2088b03a 	or	r4,r4,r2
    5af0:	81000115 	stw	r4,4(r16)
    5af4:	01400144 	movi	r5,5
    5af8:	8089883a 	add	r4,r16,r2
    5afc:	21400115 	stw	r5,4(r4)
    5b00:	21400215 	stw	r5,8(r4)
    5b04:	3080cd36 	bltu	r6,r2,5e3c <_malloc_r+0x794>
    5b08:	00800074 	movhi	r2,1
    5b0c:	108cd904 	addi	r2,r2,13156
    5b10:	11000017 	ldw	r4,0(r2)
    5b14:	20c0012e 	bgeu	r4,r3,5b1c <_malloc_r+0x474>
    5b18:	10c00015 	stw	r3,0(r2)
    5b1c:	00800074 	movhi	r2,1
    5b20:	108cd804 	addi	r2,r2,13152
    5b24:	11000017 	ldw	r4,0(r2)
    5b28:	9c000217 	ldw	r16,8(r19)
    5b2c:	20c0012e 	bgeu	r4,r3,5b34 <_malloc_r+0x48c>
    5b30:	10c00015 	stw	r3,0(r2)
    5b34:	80c00117 	ldw	r3,4(r16)
    5b38:	00bfff04 	movi	r2,-4
    5b3c:	1886703a 	and	r3,r3,r2
    5b40:	1c45c83a 	sub	r2,r3,r17
    5b44:	1c400236 	bltu	r3,r17,5b50 <_malloc_r+0x4a8>
    5b48:	00c003c4 	movi	r3,15
    5b4c:	18800416 	blt	r3,r2,5b60 <_malloc_r+0x4b8>
    5b50:	9009883a 	mov	r4,r18
    5b54:	000d8bc0 	call	d8bc <__malloc_unlock>
    5b58:	0005883a 	mov	r2,zero
    5b5c:	003f7b06 	br	594c <__alt_data_end+0xfffe594c>
    5b60:	88c00054 	ori	r3,r17,1
    5b64:	80c00115 	stw	r3,4(r16)
    5b68:	8463883a 	add	r17,r16,r17
    5b6c:	10800054 	ori	r2,r2,1
    5b70:	9c400215 	stw	r17,8(r19)
    5b74:	88800115 	stw	r2,4(r17)
    5b78:	9009883a 	mov	r4,r18
    5b7c:	000d8bc0 	call	d8bc <__malloc_unlock>
    5b80:	80800204 	addi	r2,r16,8
    5b84:	003f7106 	br	594c <__alt_data_end+0xfffe594c>
    5b88:	00c00504 	movi	r3,20
    5b8c:	18804a2e 	bgeu	r3,r2,5cb8 <_malloc_r+0x610>
    5b90:	00c01504 	movi	r3,84
    5b94:	18806e36 	bltu	r3,r2,5d50 <_malloc_r+0x6a8>
    5b98:	8804d33a 	srli	r2,r17,12
    5b9c:	12001bc4 	addi	r8,r2,111
    5ba0:	11c01b84 	addi	r7,r2,110
    5ba4:	4209883a 	add	r4,r8,r8
    5ba8:	003edd06 	br	5720 <__alt_data_end+0xfffe5720>
    5bac:	3804d27a 	srli	r2,r7,9
    5bb0:	00c00104 	movi	r3,4
    5bb4:	1880442e 	bgeu	r3,r2,5cc8 <_malloc_r+0x620>
    5bb8:	00c00504 	movi	r3,20
    5bbc:	18808136 	bltu	r3,r2,5dc4 <_malloc_r+0x71c>
    5bc0:	11401704 	addi	r5,r2,92
    5bc4:	10c016c4 	addi	r3,r2,91
    5bc8:	294b883a 	add	r5,r5,r5
    5bcc:	294b883a 	add	r5,r5,r5
    5bd0:	294b883a 	add	r5,r5,r5
    5bd4:	994b883a 	add	r5,r19,r5
    5bd8:	28800017 	ldw	r2,0(r5)
    5bdc:	01800074 	movhi	r6,1
    5be0:	297ffe04 	addi	r5,r5,-8
    5be4:	31808604 	addi	r6,r6,536
    5be8:	28806526 	beq	r5,r2,5d80 <_malloc_r+0x6d8>
    5bec:	01bfff04 	movi	r6,-4
    5bf0:	10c00117 	ldw	r3,4(r2)
    5bf4:	1986703a 	and	r3,r3,r6
    5bf8:	38c0022e 	bgeu	r7,r3,5c04 <_malloc_r+0x55c>
    5bfc:	10800217 	ldw	r2,8(r2)
    5c00:	28bffb1e 	bne	r5,r2,5bf0 <__alt_data_end+0xfffe5bf0>
    5c04:	11400317 	ldw	r5,12(r2)
    5c08:	98c00117 	ldw	r3,4(r19)
    5c0c:	81400315 	stw	r5,12(r16)
    5c10:	80800215 	stw	r2,8(r16)
    5c14:	2c000215 	stw	r16,8(r5)
    5c18:	14000315 	stw	r16,12(r2)
    5c1c:	003ef806 	br	5800 <__alt_data_end+0xfffe5800>
    5c20:	88c00054 	ori	r3,r17,1
    5c24:	80c00115 	stw	r3,4(r16)
    5c28:	8463883a 	add	r17,r16,r17
    5c2c:	34400515 	stw	r17,20(r6)
    5c30:	34400415 	stw	r17,16(r6)
    5c34:	10c00054 	ori	r3,r2,1
    5c38:	8a000315 	stw	r8,12(r17)
    5c3c:	8a000215 	stw	r8,8(r17)
    5c40:	88c00115 	stw	r3,4(r17)
    5c44:	88a3883a 	add	r17,r17,r2
    5c48:	88800015 	stw	r2,0(r17)
    5c4c:	9009883a 	mov	r4,r18
    5c50:	000d8bc0 	call	d8bc <__malloc_unlock>
    5c54:	80800204 	addi	r2,r16,8
    5c58:	003f3c06 	br	594c <__alt_data_end+0xfffe594c>
    5c5c:	30c00117 	ldw	r3,4(r6)
    5c60:	003ee706 	br	5800 <__alt_data_end+0xfffe5800>
    5c64:	5ac00044 	addi	r11,r11,1
    5c68:	588000cc 	andi	r2,r11,3
    5c6c:	31800204 	addi	r6,r6,8
    5c70:	103efd1e 	bne	r2,zero,5868 <__alt_data_end+0xfffe5868>
    5c74:	00002406 	br	5d08 <_malloc_r+0x660>
    5c78:	14000317 	ldw	r16,12(r2)
    5c7c:	143f251e 	bne	r2,r16,5914 <__alt_data_end+0xfffe5914>
    5c80:	21000084 	addi	r4,r4,2
    5c84:	003ebc06 	br	5778 <__alt_data_end+0xfffe5778>
    5c88:	8085883a 	add	r2,r16,r2
    5c8c:	10c00117 	ldw	r3,4(r2)
    5c90:	81000317 	ldw	r4,12(r16)
    5c94:	81400217 	ldw	r5,8(r16)
    5c98:	18c00054 	ori	r3,r3,1
    5c9c:	10c00115 	stw	r3,4(r2)
    5ca0:	29000315 	stw	r4,12(r5)
    5ca4:	21400215 	stw	r5,8(r4)
    5ca8:	9009883a 	mov	r4,r18
    5cac:	000d8bc0 	call	d8bc <__malloc_unlock>
    5cb0:	80800204 	addi	r2,r16,8
    5cb4:	003f2506 	br	594c <__alt_data_end+0xfffe594c>
    5cb8:	12001704 	addi	r8,r2,92
    5cbc:	11c016c4 	addi	r7,r2,91
    5cc0:	4209883a 	add	r4,r8,r8
    5cc4:	003e9606 	br	5720 <__alt_data_end+0xfffe5720>
    5cc8:	3804d1ba 	srli	r2,r7,6
    5ccc:	11400e44 	addi	r5,r2,57
    5cd0:	10c00e04 	addi	r3,r2,56
    5cd4:	294b883a 	add	r5,r5,r5
    5cd8:	003fbc06 	br	5bcc <__alt_data_end+0xfffe5bcc>
    5cdc:	84ff5926 	beq	r16,r19,5a44 <__alt_data_end+0xfffe5a44>
    5ce0:	00800074 	movhi	r2,1
    5ce4:	10808604 	addi	r2,r2,536
    5ce8:	14000217 	ldw	r16,8(r2)
    5cec:	00bfff04 	movi	r2,-4
    5cf0:	80c00117 	ldw	r3,4(r16)
    5cf4:	1886703a 	and	r3,r3,r2
    5cf8:	003f9106 	br	5b40 <__alt_data_end+0xfffe5b40>
    5cfc:	60800217 	ldw	r2,8(r12)
    5d00:	213fffc4 	addi	r4,r4,-1
    5d04:	1300651e 	bne	r2,r12,5e9c <_malloc_r+0x7f4>
    5d08:	208000cc 	andi	r2,r4,3
    5d0c:	633ffe04 	addi	r12,r12,-8
    5d10:	103ffa1e 	bne	r2,zero,5cfc <__alt_data_end+0xfffe5cfc>
    5d14:	98800117 	ldw	r2,4(r19)
    5d18:	0146303a 	nor	r3,zero,r5
    5d1c:	1884703a 	and	r2,r3,r2
    5d20:	98800115 	stw	r2,4(r19)
    5d24:	294b883a 	add	r5,r5,r5
    5d28:	117f2836 	bltu	r2,r5,59cc <__alt_data_end+0xfffe59cc>
    5d2c:	283f2726 	beq	r5,zero,59cc <__alt_data_end+0xfffe59cc>
    5d30:	2886703a 	and	r3,r5,r2
    5d34:	5809883a 	mov	r4,r11
    5d38:	183ec31e 	bne	r3,zero,5848 <__alt_data_end+0xfffe5848>
    5d3c:	294b883a 	add	r5,r5,r5
    5d40:	2886703a 	and	r3,r5,r2
    5d44:	21000104 	addi	r4,r4,4
    5d48:	183ffc26 	beq	r3,zero,5d3c <__alt_data_end+0xfffe5d3c>
    5d4c:	003ebe06 	br	5848 <__alt_data_end+0xfffe5848>
    5d50:	00c05504 	movi	r3,340
    5d54:	18801236 	bltu	r3,r2,5da0 <_malloc_r+0x6f8>
    5d58:	8804d3fa 	srli	r2,r17,15
    5d5c:	12001e04 	addi	r8,r2,120
    5d60:	11c01dc4 	addi	r7,r2,119
    5d64:	4209883a 	add	r4,r8,r8
    5d68:	003e6d06 	br	5720 <__alt_data_end+0xfffe5720>
    5d6c:	00c40004 	movi	r3,4096
    5d70:	003f4606 	br	5a8c <__alt_data_end+0xfffe5a8c>
    5d74:	00800044 	movi	r2,1
    5d78:	a0800115 	stw	r2,4(r20)
    5d7c:	003f7406 	br	5b50 <__alt_data_end+0xfffe5b50>
    5d80:	1805d0ba 	srai	r2,r3,2
    5d84:	01c00044 	movi	r7,1
    5d88:	30c00117 	ldw	r3,4(r6)
    5d8c:	388e983a 	sll	r7,r7,r2
    5d90:	2805883a 	mov	r2,r5
    5d94:	38c6b03a 	or	r3,r7,r3
    5d98:	30c00115 	stw	r3,4(r6)
    5d9c:	003f9b06 	br	5c0c <__alt_data_end+0xfffe5c0c>
    5da0:	00c15504 	movi	r3,1364
    5da4:	18801a36 	bltu	r3,r2,5e10 <_malloc_r+0x768>
    5da8:	8804d4ba 	srli	r2,r17,18
    5dac:	12001f44 	addi	r8,r2,125
    5db0:	11c01f04 	addi	r7,r2,124
    5db4:	4209883a 	add	r4,r8,r8
    5db8:	003e5906 	br	5720 <__alt_data_end+0xfffe5720>
    5dbc:	ad400404 	addi	r21,r21,16
    5dc0:	003f1706 	br	5a20 <__alt_data_end+0xfffe5a20>
    5dc4:	00c01504 	movi	r3,84
    5dc8:	18802336 	bltu	r3,r2,5e58 <_malloc_r+0x7b0>
    5dcc:	3804d33a 	srli	r2,r7,12
    5dd0:	11401bc4 	addi	r5,r2,111
    5dd4:	10c01b84 	addi	r3,r2,110
    5dd8:	294b883a 	add	r5,r5,r5
    5ddc:	003f7b06 	br	5bcc <__alt_data_end+0xfffe5bcc>
    5de0:	9c000217 	ldw	r16,8(r19)
    5de4:	00bfff04 	movi	r2,-4
    5de8:	80c00117 	ldw	r3,4(r16)
    5dec:	1886703a 	and	r3,r3,r2
    5df0:	003f5306 	br	5b40 <__alt_data_end+0xfffe5b40>
    5df4:	3083ffcc 	andi	r2,r6,4095
    5df8:	103f181e 	bne	r2,zero,5a5c <__alt_data_end+0xfffe5a5c>
    5dfc:	99000217 	ldw	r4,8(r19)
    5e00:	b545883a 	add	r2,r22,r21
    5e04:	10800054 	ori	r2,r2,1
    5e08:	20800115 	stw	r2,4(r4)
    5e0c:	003f3e06 	br	5b08 <__alt_data_end+0xfffe5b08>
    5e10:	01003f84 	movi	r4,254
    5e14:	02001fc4 	movi	r8,127
    5e18:	01c01f84 	movi	r7,126
    5e1c:	003e4006 	br	5720 <__alt_data_end+0xfffe5720>
    5e20:	00800074 	movhi	r2,1
    5e24:	10860d04 	addi	r2,r2,6196
    5e28:	15000015 	stw	r20,0(r2)
    5e2c:	003f1106 	br	5a74 <__alt_data_end+0xfffe5a74>
    5e30:	00800044 	movi	r2,1
    5e34:	002b883a 	mov	r21,zero
    5e38:	003f1f06 	br	5ab8 <__alt_data_end+0xfffe5ab8>
    5e3c:	81400204 	addi	r5,r16,8
    5e40:	9009883a 	mov	r4,r18
    5e44:	0004ab00 	call	4ab0 <_free_r>
    5e48:	00800074 	movhi	r2,1
    5e4c:	108ce304 	addi	r2,r2,13196
    5e50:	10c00017 	ldw	r3,0(r2)
    5e54:	003f2c06 	br	5b08 <__alt_data_end+0xfffe5b08>
    5e58:	00c05504 	movi	r3,340
    5e5c:	18800536 	bltu	r3,r2,5e74 <_malloc_r+0x7cc>
    5e60:	3804d3fa 	srli	r2,r7,15
    5e64:	11401e04 	addi	r5,r2,120
    5e68:	10c01dc4 	addi	r3,r2,119
    5e6c:	294b883a 	add	r5,r5,r5
    5e70:	003f5606 	br	5bcc <__alt_data_end+0xfffe5bcc>
    5e74:	00c15504 	movi	r3,1364
    5e78:	18800536 	bltu	r3,r2,5e90 <_malloc_r+0x7e8>
    5e7c:	3804d4ba 	srli	r2,r7,18
    5e80:	11401f44 	addi	r5,r2,125
    5e84:	10c01f04 	addi	r3,r2,124
    5e88:	294b883a 	add	r5,r5,r5
    5e8c:	003f4f06 	br	5bcc <__alt_data_end+0xfffe5bcc>
    5e90:	01403f84 	movi	r5,254
    5e94:	00c01f84 	movi	r3,126
    5e98:	003f4c06 	br	5bcc <__alt_data_end+0xfffe5bcc>
    5e9c:	98800117 	ldw	r2,4(r19)
    5ea0:	003fa006 	br	5d24 <__alt_data_end+0xfffe5d24>
    5ea4:	8808d0fa 	srli	r4,r17,3
    5ea8:	20800044 	addi	r2,r4,1
    5eac:	1085883a 	add	r2,r2,r2
    5eb0:	003e9006 	br	58f4 <__alt_data_end+0xfffe58f4>

00005eb4 <memchr>:
    5eb4:	208000cc 	andi	r2,r4,3
    5eb8:	280f883a 	mov	r7,r5
    5ebc:	10003426 	beq	r2,zero,5f90 <memchr+0xdc>
    5ec0:	30bfffc4 	addi	r2,r6,-1
    5ec4:	30001a26 	beq	r6,zero,5f30 <memchr+0x7c>
    5ec8:	20c00003 	ldbu	r3,0(r4)
    5ecc:	29803fcc 	andi	r6,r5,255
    5ed0:	30c0051e 	bne	r6,r3,5ee8 <memchr+0x34>
    5ed4:	00001806 	br	5f38 <memchr+0x84>
    5ed8:	10001526 	beq	r2,zero,5f30 <memchr+0x7c>
    5edc:	20c00003 	ldbu	r3,0(r4)
    5ee0:	10bfffc4 	addi	r2,r2,-1
    5ee4:	30c01426 	beq	r6,r3,5f38 <memchr+0x84>
    5ee8:	21000044 	addi	r4,r4,1
    5eec:	20c000cc 	andi	r3,r4,3
    5ef0:	183ff91e 	bne	r3,zero,5ed8 <__alt_data_end+0xfffe5ed8>
    5ef4:	020000c4 	movi	r8,3
    5ef8:	40801136 	bltu	r8,r2,5f40 <memchr+0x8c>
    5efc:	10000c26 	beq	r2,zero,5f30 <memchr+0x7c>
    5f00:	20c00003 	ldbu	r3,0(r4)
    5f04:	29403fcc 	andi	r5,r5,255
    5f08:	28c00b26 	beq	r5,r3,5f38 <memchr+0x84>
    5f0c:	20c00044 	addi	r3,r4,1
    5f10:	39803fcc 	andi	r6,r7,255
    5f14:	2089883a 	add	r4,r4,r2
    5f18:	00000306 	br	5f28 <memchr+0x74>
    5f1c:	18c00044 	addi	r3,r3,1
    5f20:	197fffc3 	ldbu	r5,-1(r3)
    5f24:	31400526 	beq	r6,r5,5f3c <memchr+0x88>
    5f28:	1805883a 	mov	r2,r3
    5f2c:	20fffb1e 	bne	r4,r3,5f1c <__alt_data_end+0xfffe5f1c>
    5f30:	0005883a 	mov	r2,zero
    5f34:	f800283a 	ret
    5f38:	2005883a 	mov	r2,r4
    5f3c:	f800283a 	ret
    5f40:	28c03fcc 	andi	r3,r5,255
    5f44:	1812923a 	slli	r9,r3,8
    5f48:	02ffbff4 	movhi	r11,65279
    5f4c:	02a02074 	movhi	r10,32897
    5f50:	48d2b03a 	or	r9,r9,r3
    5f54:	4806943a 	slli	r3,r9,16
    5f58:	5affbfc4 	addi	r11,r11,-257
    5f5c:	52a02004 	addi	r10,r10,-32640
    5f60:	48d2b03a 	or	r9,r9,r3
    5f64:	20c00017 	ldw	r3,0(r4)
    5f68:	48c6f03a 	xor	r3,r9,r3
    5f6c:	1acd883a 	add	r6,r3,r11
    5f70:	00c6303a 	nor	r3,zero,r3
    5f74:	30c6703a 	and	r3,r6,r3
    5f78:	1a86703a 	and	r3,r3,r10
    5f7c:	183fe01e 	bne	r3,zero,5f00 <__alt_data_end+0xfffe5f00>
    5f80:	10bfff04 	addi	r2,r2,-4
    5f84:	21000104 	addi	r4,r4,4
    5f88:	40bff636 	bltu	r8,r2,5f64 <__alt_data_end+0xfffe5f64>
    5f8c:	003fdb06 	br	5efc <__alt_data_end+0xfffe5efc>
    5f90:	3005883a 	mov	r2,r6
    5f94:	003fd706 	br	5ef4 <__alt_data_end+0xfffe5ef4>

00005f98 <memcpy>:
    5f98:	defffd04 	addi	sp,sp,-12
    5f9c:	dfc00215 	stw	ra,8(sp)
    5fa0:	dc400115 	stw	r17,4(sp)
    5fa4:	dc000015 	stw	r16,0(sp)
    5fa8:	00c003c4 	movi	r3,15
    5fac:	2005883a 	mov	r2,r4
    5fb0:	1980452e 	bgeu	r3,r6,60c8 <memcpy+0x130>
    5fb4:	2906b03a 	or	r3,r5,r4
    5fb8:	18c000cc 	andi	r3,r3,3
    5fbc:	1800441e 	bne	r3,zero,60d0 <memcpy+0x138>
    5fc0:	347ffc04 	addi	r17,r6,-16
    5fc4:	8822d13a 	srli	r17,r17,4
    5fc8:	28c00104 	addi	r3,r5,4
    5fcc:	23400104 	addi	r13,r4,4
    5fd0:	8820913a 	slli	r16,r17,4
    5fd4:	2b000204 	addi	r12,r5,8
    5fd8:	22c00204 	addi	r11,r4,8
    5fdc:	84000504 	addi	r16,r16,20
    5fe0:	2a800304 	addi	r10,r5,12
    5fe4:	22400304 	addi	r9,r4,12
    5fe8:	2c21883a 	add	r16,r5,r16
    5fec:	2811883a 	mov	r8,r5
    5ff0:	200f883a 	mov	r7,r4
    5ff4:	41000017 	ldw	r4,0(r8)
    5ff8:	1fc00017 	ldw	ra,0(r3)
    5ffc:	63c00017 	ldw	r15,0(r12)
    6000:	39000015 	stw	r4,0(r7)
    6004:	53800017 	ldw	r14,0(r10)
    6008:	6fc00015 	stw	ra,0(r13)
    600c:	5bc00015 	stw	r15,0(r11)
    6010:	4b800015 	stw	r14,0(r9)
    6014:	18c00404 	addi	r3,r3,16
    6018:	39c00404 	addi	r7,r7,16
    601c:	42000404 	addi	r8,r8,16
    6020:	6b400404 	addi	r13,r13,16
    6024:	63000404 	addi	r12,r12,16
    6028:	5ac00404 	addi	r11,r11,16
    602c:	52800404 	addi	r10,r10,16
    6030:	4a400404 	addi	r9,r9,16
    6034:	1c3fef1e 	bne	r3,r16,5ff4 <__alt_data_end+0xfffe5ff4>
    6038:	89c00044 	addi	r7,r17,1
    603c:	380e913a 	slli	r7,r7,4
    6040:	310003cc 	andi	r4,r6,15
    6044:	02c000c4 	movi	r11,3
    6048:	11c7883a 	add	r3,r2,r7
    604c:	29cb883a 	add	r5,r5,r7
    6050:	5900212e 	bgeu	r11,r4,60d8 <memcpy+0x140>
    6054:	1813883a 	mov	r9,r3
    6058:	2811883a 	mov	r8,r5
    605c:	200f883a 	mov	r7,r4
    6060:	42800017 	ldw	r10,0(r8)
    6064:	4a400104 	addi	r9,r9,4
    6068:	39ffff04 	addi	r7,r7,-4
    606c:	4abfff15 	stw	r10,-4(r9)
    6070:	42000104 	addi	r8,r8,4
    6074:	59fffa36 	bltu	r11,r7,6060 <__alt_data_end+0xfffe6060>
    6078:	213fff04 	addi	r4,r4,-4
    607c:	2008d0ba 	srli	r4,r4,2
    6080:	318000cc 	andi	r6,r6,3
    6084:	21000044 	addi	r4,r4,1
    6088:	2109883a 	add	r4,r4,r4
    608c:	2109883a 	add	r4,r4,r4
    6090:	1907883a 	add	r3,r3,r4
    6094:	290b883a 	add	r5,r5,r4
    6098:	30000626 	beq	r6,zero,60b4 <memcpy+0x11c>
    609c:	198d883a 	add	r6,r3,r6
    60a0:	29c00003 	ldbu	r7,0(r5)
    60a4:	18c00044 	addi	r3,r3,1
    60a8:	29400044 	addi	r5,r5,1
    60ac:	19ffffc5 	stb	r7,-1(r3)
    60b0:	19bffb1e 	bne	r3,r6,60a0 <__alt_data_end+0xfffe60a0>
    60b4:	dfc00217 	ldw	ra,8(sp)
    60b8:	dc400117 	ldw	r17,4(sp)
    60bc:	dc000017 	ldw	r16,0(sp)
    60c0:	dec00304 	addi	sp,sp,12
    60c4:	f800283a 	ret
    60c8:	2007883a 	mov	r3,r4
    60cc:	003ff206 	br	6098 <__alt_data_end+0xfffe6098>
    60d0:	2007883a 	mov	r3,r4
    60d4:	003ff106 	br	609c <__alt_data_end+0xfffe609c>
    60d8:	200d883a 	mov	r6,r4
    60dc:	003fee06 	br	6098 <__alt_data_end+0xfffe6098>

000060e0 <memmove>:
    60e0:	2005883a 	mov	r2,r4
    60e4:	29000b2e 	bgeu	r5,r4,6114 <memmove+0x34>
    60e8:	298f883a 	add	r7,r5,r6
    60ec:	21c0092e 	bgeu	r4,r7,6114 <memmove+0x34>
    60f0:	2187883a 	add	r3,r4,r6
    60f4:	198bc83a 	sub	r5,r3,r6
    60f8:	30004826 	beq	r6,zero,621c <memmove+0x13c>
    60fc:	39ffffc4 	addi	r7,r7,-1
    6100:	39000003 	ldbu	r4,0(r7)
    6104:	18ffffc4 	addi	r3,r3,-1
    6108:	19000005 	stb	r4,0(r3)
    610c:	28fffb1e 	bne	r5,r3,60fc <__alt_data_end+0xfffe60fc>
    6110:	f800283a 	ret
    6114:	00c003c4 	movi	r3,15
    6118:	1980412e 	bgeu	r3,r6,6220 <memmove+0x140>
    611c:	2886b03a 	or	r3,r5,r2
    6120:	18c000cc 	andi	r3,r3,3
    6124:	1800401e 	bne	r3,zero,6228 <memmove+0x148>
    6128:	33fffc04 	addi	r15,r6,-16
    612c:	781ed13a 	srli	r15,r15,4
    6130:	28c00104 	addi	r3,r5,4
    6134:	13400104 	addi	r13,r2,4
    6138:	781c913a 	slli	r14,r15,4
    613c:	2b000204 	addi	r12,r5,8
    6140:	12c00204 	addi	r11,r2,8
    6144:	73800504 	addi	r14,r14,20
    6148:	2a800304 	addi	r10,r5,12
    614c:	12400304 	addi	r9,r2,12
    6150:	2b9d883a 	add	r14,r5,r14
    6154:	2811883a 	mov	r8,r5
    6158:	100f883a 	mov	r7,r2
    615c:	41000017 	ldw	r4,0(r8)
    6160:	39c00404 	addi	r7,r7,16
    6164:	18c00404 	addi	r3,r3,16
    6168:	393ffc15 	stw	r4,-16(r7)
    616c:	193ffc17 	ldw	r4,-16(r3)
    6170:	6b400404 	addi	r13,r13,16
    6174:	5ac00404 	addi	r11,r11,16
    6178:	693ffc15 	stw	r4,-16(r13)
    617c:	61000017 	ldw	r4,0(r12)
    6180:	4a400404 	addi	r9,r9,16
    6184:	42000404 	addi	r8,r8,16
    6188:	593ffc15 	stw	r4,-16(r11)
    618c:	51000017 	ldw	r4,0(r10)
    6190:	63000404 	addi	r12,r12,16
    6194:	52800404 	addi	r10,r10,16
    6198:	493ffc15 	stw	r4,-16(r9)
    619c:	1bbfef1e 	bne	r3,r14,615c <__alt_data_end+0xfffe615c>
    61a0:	79000044 	addi	r4,r15,1
    61a4:	2008913a 	slli	r4,r4,4
    61a8:	328003cc 	andi	r10,r6,15
    61ac:	02c000c4 	movi	r11,3
    61b0:	1107883a 	add	r3,r2,r4
    61b4:	290b883a 	add	r5,r5,r4
    61b8:	5a801e2e 	bgeu	r11,r10,6234 <memmove+0x154>
    61bc:	1813883a 	mov	r9,r3
    61c0:	2811883a 	mov	r8,r5
    61c4:	500f883a 	mov	r7,r10
    61c8:	41000017 	ldw	r4,0(r8)
    61cc:	4a400104 	addi	r9,r9,4
    61d0:	39ffff04 	addi	r7,r7,-4
    61d4:	493fff15 	stw	r4,-4(r9)
    61d8:	42000104 	addi	r8,r8,4
    61dc:	59fffa36 	bltu	r11,r7,61c8 <__alt_data_end+0xfffe61c8>
    61e0:	513fff04 	addi	r4,r10,-4
    61e4:	2008d0ba 	srli	r4,r4,2
    61e8:	318000cc 	andi	r6,r6,3
    61ec:	21000044 	addi	r4,r4,1
    61f0:	2109883a 	add	r4,r4,r4
    61f4:	2109883a 	add	r4,r4,r4
    61f8:	1907883a 	add	r3,r3,r4
    61fc:	290b883a 	add	r5,r5,r4
    6200:	30000b26 	beq	r6,zero,6230 <memmove+0x150>
    6204:	198d883a 	add	r6,r3,r6
    6208:	29c00003 	ldbu	r7,0(r5)
    620c:	18c00044 	addi	r3,r3,1
    6210:	29400044 	addi	r5,r5,1
    6214:	19ffffc5 	stb	r7,-1(r3)
    6218:	19bffb1e 	bne	r3,r6,6208 <__alt_data_end+0xfffe6208>
    621c:	f800283a 	ret
    6220:	1007883a 	mov	r3,r2
    6224:	003ff606 	br	6200 <__alt_data_end+0xfffe6200>
    6228:	1007883a 	mov	r3,r2
    622c:	003ff506 	br	6204 <__alt_data_end+0xfffe6204>
    6230:	f800283a 	ret
    6234:	500d883a 	mov	r6,r10
    6238:	003ff106 	br	6200 <__alt_data_end+0xfffe6200>

0000623c <memset>:
    623c:	20c000cc 	andi	r3,r4,3
    6240:	2005883a 	mov	r2,r4
    6244:	18004426 	beq	r3,zero,6358 <memset+0x11c>
    6248:	31ffffc4 	addi	r7,r6,-1
    624c:	30004026 	beq	r6,zero,6350 <memset+0x114>
    6250:	2813883a 	mov	r9,r5
    6254:	200d883a 	mov	r6,r4
    6258:	2007883a 	mov	r3,r4
    625c:	00000406 	br	6270 <memset+0x34>
    6260:	3a3fffc4 	addi	r8,r7,-1
    6264:	31800044 	addi	r6,r6,1
    6268:	38003926 	beq	r7,zero,6350 <memset+0x114>
    626c:	400f883a 	mov	r7,r8
    6270:	18c00044 	addi	r3,r3,1
    6274:	32400005 	stb	r9,0(r6)
    6278:	1a0000cc 	andi	r8,r3,3
    627c:	403ff81e 	bne	r8,zero,6260 <__alt_data_end+0xfffe6260>
    6280:	010000c4 	movi	r4,3
    6284:	21c02d2e 	bgeu	r4,r7,633c <memset+0x100>
    6288:	29003fcc 	andi	r4,r5,255
    628c:	200c923a 	slli	r6,r4,8
    6290:	3108b03a 	or	r4,r6,r4
    6294:	200c943a 	slli	r6,r4,16
    6298:	218cb03a 	or	r6,r4,r6
    629c:	010003c4 	movi	r4,15
    62a0:	21c0182e 	bgeu	r4,r7,6304 <memset+0xc8>
    62a4:	3b3ffc04 	addi	r12,r7,-16
    62a8:	6018d13a 	srli	r12,r12,4
    62ac:	1a000104 	addi	r8,r3,4
    62b0:	1ac00204 	addi	r11,r3,8
    62b4:	6008913a 	slli	r4,r12,4
    62b8:	1a800304 	addi	r10,r3,12
    62bc:	1813883a 	mov	r9,r3
    62c0:	21000504 	addi	r4,r4,20
    62c4:	1909883a 	add	r4,r3,r4
    62c8:	49800015 	stw	r6,0(r9)
    62cc:	41800015 	stw	r6,0(r8)
    62d0:	59800015 	stw	r6,0(r11)
    62d4:	51800015 	stw	r6,0(r10)
    62d8:	42000404 	addi	r8,r8,16
    62dc:	4a400404 	addi	r9,r9,16
    62e0:	5ac00404 	addi	r11,r11,16
    62e4:	52800404 	addi	r10,r10,16
    62e8:	413ff71e 	bne	r8,r4,62c8 <__alt_data_end+0xfffe62c8>
    62ec:	63000044 	addi	r12,r12,1
    62f0:	6018913a 	slli	r12,r12,4
    62f4:	39c003cc 	andi	r7,r7,15
    62f8:	010000c4 	movi	r4,3
    62fc:	1b07883a 	add	r3,r3,r12
    6300:	21c00e2e 	bgeu	r4,r7,633c <memset+0x100>
    6304:	1813883a 	mov	r9,r3
    6308:	3811883a 	mov	r8,r7
    630c:	010000c4 	movi	r4,3
    6310:	49800015 	stw	r6,0(r9)
    6314:	423fff04 	addi	r8,r8,-4
    6318:	4a400104 	addi	r9,r9,4
    631c:	223ffc36 	bltu	r4,r8,6310 <__alt_data_end+0xfffe6310>
    6320:	393fff04 	addi	r4,r7,-4
    6324:	2008d0ba 	srli	r4,r4,2
    6328:	39c000cc 	andi	r7,r7,3
    632c:	21000044 	addi	r4,r4,1
    6330:	2109883a 	add	r4,r4,r4
    6334:	2109883a 	add	r4,r4,r4
    6338:	1907883a 	add	r3,r3,r4
    633c:	38000526 	beq	r7,zero,6354 <memset+0x118>
    6340:	19cf883a 	add	r7,r3,r7
    6344:	19400005 	stb	r5,0(r3)
    6348:	18c00044 	addi	r3,r3,1
    634c:	38fffd1e 	bne	r7,r3,6344 <__alt_data_end+0xfffe6344>
    6350:	f800283a 	ret
    6354:	f800283a 	ret
    6358:	2007883a 	mov	r3,r4
    635c:	300f883a 	mov	r7,r6
    6360:	003fc706 	br	6280 <__alt_data_end+0xfffe6280>

00006364 <_Balloc>:
    6364:	20801317 	ldw	r2,76(r4)
    6368:	defffc04 	addi	sp,sp,-16
    636c:	dc400115 	stw	r17,4(sp)
    6370:	dc000015 	stw	r16,0(sp)
    6374:	dfc00315 	stw	ra,12(sp)
    6378:	dc800215 	stw	r18,8(sp)
    637c:	2023883a 	mov	r17,r4
    6380:	2821883a 	mov	r16,r5
    6384:	10000f26 	beq	r2,zero,63c4 <_Balloc+0x60>
    6388:	8407883a 	add	r3,r16,r16
    638c:	18c7883a 	add	r3,r3,r3
    6390:	10c7883a 	add	r3,r2,r3
    6394:	18800017 	ldw	r2,0(r3)
    6398:	10001126 	beq	r2,zero,63e0 <_Balloc+0x7c>
    639c:	11000017 	ldw	r4,0(r2)
    63a0:	19000015 	stw	r4,0(r3)
    63a4:	10000415 	stw	zero,16(r2)
    63a8:	10000315 	stw	zero,12(r2)
    63ac:	dfc00317 	ldw	ra,12(sp)
    63b0:	dc800217 	ldw	r18,8(sp)
    63b4:	dc400117 	ldw	r17,4(sp)
    63b8:	dc000017 	ldw	r16,0(sp)
    63bc:	dec00404 	addi	sp,sp,16
    63c0:	f800283a 	ret
    63c4:	01800844 	movi	r6,33
    63c8:	01400104 	movi	r5,4
    63cc:	000940c0 	call	940c <_calloc_r>
    63d0:	88801315 	stw	r2,76(r17)
    63d4:	103fec1e 	bne	r2,zero,6388 <__alt_data_end+0xfffe6388>
    63d8:	0005883a 	mov	r2,zero
    63dc:	003ff306 	br	63ac <__alt_data_end+0xfffe63ac>
    63e0:	01400044 	movi	r5,1
    63e4:	2c24983a 	sll	r18,r5,r16
    63e8:	8809883a 	mov	r4,r17
    63ec:	91800144 	addi	r6,r18,5
    63f0:	318d883a 	add	r6,r6,r6
    63f4:	318d883a 	add	r6,r6,r6
    63f8:	000940c0 	call	940c <_calloc_r>
    63fc:	103ff626 	beq	r2,zero,63d8 <__alt_data_end+0xfffe63d8>
    6400:	14000115 	stw	r16,4(r2)
    6404:	14800215 	stw	r18,8(r2)
    6408:	003fe606 	br	63a4 <__alt_data_end+0xfffe63a4>

0000640c <_Bfree>:
    640c:	28000826 	beq	r5,zero,6430 <_Bfree+0x24>
    6410:	28c00117 	ldw	r3,4(r5)
    6414:	20801317 	ldw	r2,76(r4)
    6418:	18c7883a 	add	r3,r3,r3
    641c:	18c7883a 	add	r3,r3,r3
    6420:	10c5883a 	add	r2,r2,r3
    6424:	10c00017 	ldw	r3,0(r2)
    6428:	28c00015 	stw	r3,0(r5)
    642c:	11400015 	stw	r5,0(r2)
    6430:	f800283a 	ret

00006434 <__multadd>:
    6434:	defff704 	addi	sp,sp,-36
    6438:	dc800215 	stw	r18,8(sp)
    643c:	2c800417 	ldw	r18,16(r5)
    6440:	dd800615 	stw	r22,24(sp)
    6444:	dd400515 	stw	r21,20(sp)
    6448:	dd000415 	stw	r20,16(sp)
    644c:	dcc00315 	stw	r19,12(sp)
    6450:	dc400115 	stw	r17,4(sp)
    6454:	dc000015 	stw	r16,0(sp)
    6458:	dfc00815 	stw	ra,32(sp)
    645c:	ddc00715 	stw	r23,28(sp)
    6460:	2827883a 	mov	r19,r5
    6464:	2029883a 	mov	r20,r4
    6468:	3023883a 	mov	r17,r6
    646c:	3821883a 	mov	r16,r7
    6470:	2d400504 	addi	r21,r5,20
    6474:	002d883a 	mov	r22,zero
    6478:	adc00017 	ldw	r23,0(r21)
    647c:	880b883a 	mov	r5,r17
    6480:	ad400104 	addi	r21,r21,4
    6484:	b93fffcc 	andi	r4,r23,65535
    6488:	000aa180 	call	aa18 <__mulsi3>
    648c:	b808d43a 	srli	r4,r23,16
    6490:	880b883a 	mov	r5,r17
    6494:	1421883a 	add	r16,r2,r16
    6498:	000aa180 	call	aa18 <__mulsi3>
    649c:	800ed43a 	srli	r7,r16,16
    64a0:	80ffffcc 	andi	r3,r16,65535
    64a4:	b5800044 	addi	r22,r22,1
    64a8:	11c5883a 	add	r2,r2,r7
    64ac:	100e943a 	slli	r7,r2,16
    64b0:	1020d43a 	srli	r16,r2,16
    64b4:	38c7883a 	add	r3,r7,r3
    64b8:	a8ffff15 	stw	r3,-4(r21)
    64bc:	b4bfee16 	blt	r22,r18,6478 <__alt_data_end+0xfffe6478>
    64c0:	80000926 	beq	r16,zero,64e8 <__multadd+0xb4>
    64c4:	98800217 	ldw	r2,8(r19)
    64c8:	9080130e 	bge	r18,r2,6518 <__multadd+0xe4>
    64cc:	90800144 	addi	r2,r18,5
    64d0:	1085883a 	add	r2,r2,r2
    64d4:	1085883a 	add	r2,r2,r2
    64d8:	9885883a 	add	r2,r19,r2
    64dc:	14000015 	stw	r16,0(r2)
    64e0:	94800044 	addi	r18,r18,1
    64e4:	9c800415 	stw	r18,16(r19)
    64e8:	9805883a 	mov	r2,r19
    64ec:	dfc00817 	ldw	ra,32(sp)
    64f0:	ddc00717 	ldw	r23,28(sp)
    64f4:	dd800617 	ldw	r22,24(sp)
    64f8:	dd400517 	ldw	r21,20(sp)
    64fc:	dd000417 	ldw	r20,16(sp)
    6500:	dcc00317 	ldw	r19,12(sp)
    6504:	dc800217 	ldw	r18,8(sp)
    6508:	dc400117 	ldw	r17,4(sp)
    650c:	dc000017 	ldw	r16,0(sp)
    6510:	dec00904 	addi	sp,sp,36
    6514:	f800283a 	ret
    6518:	99400117 	ldw	r5,4(r19)
    651c:	a009883a 	mov	r4,r20
    6520:	29400044 	addi	r5,r5,1
    6524:	00063640 	call	6364 <_Balloc>
    6528:	99800417 	ldw	r6,16(r19)
    652c:	99400304 	addi	r5,r19,12
    6530:	11000304 	addi	r4,r2,12
    6534:	31800084 	addi	r6,r6,2
    6538:	318d883a 	add	r6,r6,r6
    653c:	318d883a 	add	r6,r6,r6
    6540:	1023883a 	mov	r17,r2
    6544:	0005f980 	call	5f98 <memcpy>
    6548:	98000a26 	beq	r19,zero,6574 <__multadd+0x140>
    654c:	98c00117 	ldw	r3,4(r19)
    6550:	a0801317 	ldw	r2,76(r20)
    6554:	18c7883a 	add	r3,r3,r3
    6558:	18c7883a 	add	r3,r3,r3
    655c:	10c5883a 	add	r2,r2,r3
    6560:	10c00017 	ldw	r3,0(r2)
    6564:	98c00015 	stw	r3,0(r19)
    6568:	14c00015 	stw	r19,0(r2)
    656c:	8827883a 	mov	r19,r17
    6570:	003fd606 	br	64cc <__alt_data_end+0xfffe64cc>
    6574:	8827883a 	mov	r19,r17
    6578:	003fd406 	br	64cc <__alt_data_end+0xfffe64cc>

0000657c <__s2b>:
    657c:	defff904 	addi	sp,sp,-28
    6580:	dc400115 	stw	r17,4(sp)
    6584:	dc000015 	stw	r16,0(sp)
    6588:	2023883a 	mov	r17,r4
    658c:	2821883a 	mov	r16,r5
    6590:	39000204 	addi	r4,r7,8
    6594:	01400244 	movi	r5,9
    6598:	dcc00315 	stw	r19,12(sp)
    659c:	dc800215 	stw	r18,8(sp)
    65a0:	dfc00615 	stw	ra,24(sp)
    65a4:	dd400515 	stw	r21,20(sp)
    65a8:	dd000415 	stw	r20,16(sp)
    65ac:	3825883a 	mov	r18,r7
    65b0:	3027883a 	mov	r19,r6
    65b4:	000a8640 	call	a864 <__divsi3>
    65b8:	00c00044 	movi	r3,1
    65bc:	000b883a 	mov	r5,zero
    65c0:	1880030e 	bge	r3,r2,65d0 <__s2b+0x54>
    65c4:	18c7883a 	add	r3,r3,r3
    65c8:	29400044 	addi	r5,r5,1
    65cc:	18bffd16 	blt	r3,r2,65c4 <__alt_data_end+0xfffe65c4>
    65d0:	8809883a 	mov	r4,r17
    65d4:	00063640 	call	6364 <_Balloc>
    65d8:	d8c00717 	ldw	r3,28(sp)
    65dc:	10c00515 	stw	r3,20(r2)
    65e0:	00c00044 	movi	r3,1
    65e4:	10c00415 	stw	r3,16(r2)
    65e8:	00c00244 	movi	r3,9
    65ec:	1cc0210e 	bge	r3,r19,6674 <__s2b+0xf8>
    65f0:	80eb883a 	add	r21,r16,r3
    65f4:	a829883a 	mov	r20,r21
    65f8:	84e1883a 	add	r16,r16,r19
    65fc:	a1c00007 	ldb	r7,0(r20)
    6600:	01800284 	movi	r6,10
    6604:	a5000044 	addi	r20,r20,1
    6608:	100b883a 	mov	r5,r2
    660c:	39fff404 	addi	r7,r7,-48
    6610:	8809883a 	mov	r4,r17
    6614:	00064340 	call	6434 <__multadd>
    6618:	a43ff81e 	bne	r20,r16,65fc <__alt_data_end+0xfffe65fc>
    661c:	ace1883a 	add	r16,r21,r19
    6620:	843ffe04 	addi	r16,r16,-8
    6624:	9c800a0e 	bge	r19,r18,6650 <__s2b+0xd4>
    6628:	94e5c83a 	sub	r18,r18,r19
    662c:	84a5883a 	add	r18,r16,r18
    6630:	81c00007 	ldb	r7,0(r16)
    6634:	01800284 	movi	r6,10
    6638:	84000044 	addi	r16,r16,1
    663c:	100b883a 	mov	r5,r2
    6640:	39fff404 	addi	r7,r7,-48
    6644:	8809883a 	mov	r4,r17
    6648:	00064340 	call	6434 <__multadd>
    664c:	84bff81e 	bne	r16,r18,6630 <__alt_data_end+0xfffe6630>
    6650:	dfc00617 	ldw	ra,24(sp)
    6654:	dd400517 	ldw	r21,20(sp)
    6658:	dd000417 	ldw	r20,16(sp)
    665c:	dcc00317 	ldw	r19,12(sp)
    6660:	dc800217 	ldw	r18,8(sp)
    6664:	dc400117 	ldw	r17,4(sp)
    6668:	dc000017 	ldw	r16,0(sp)
    666c:	dec00704 	addi	sp,sp,28
    6670:	f800283a 	ret
    6674:	84000284 	addi	r16,r16,10
    6678:	1827883a 	mov	r19,r3
    667c:	003fe906 	br	6624 <__alt_data_end+0xfffe6624>

00006680 <__hi0bits>:
    6680:	20bfffec 	andhi	r2,r4,65535
    6684:	1000141e 	bne	r2,zero,66d8 <__hi0bits+0x58>
    6688:	2008943a 	slli	r4,r4,16
    668c:	00800404 	movi	r2,16
    6690:	20ffc02c 	andhi	r3,r4,65280
    6694:	1800021e 	bne	r3,zero,66a0 <__hi0bits+0x20>
    6698:	2008923a 	slli	r4,r4,8
    669c:	10800204 	addi	r2,r2,8
    66a0:	20fc002c 	andhi	r3,r4,61440
    66a4:	1800021e 	bne	r3,zero,66b0 <__hi0bits+0x30>
    66a8:	2008913a 	slli	r4,r4,4
    66ac:	10800104 	addi	r2,r2,4
    66b0:	20f0002c 	andhi	r3,r4,49152
    66b4:	1800031e 	bne	r3,zero,66c4 <__hi0bits+0x44>
    66b8:	2109883a 	add	r4,r4,r4
    66bc:	10800084 	addi	r2,r2,2
    66c0:	2109883a 	add	r4,r4,r4
    66c4:	20000316 	blt	r4,zero,66d4 <__hi0bits+0x54>
    66c8:	2110002c 	andhi	r4,r4,16384
    66cc:	2000041e 	bne	r4,zero,66e0 <__hi0bits+0x60>
    66d0:	00800804 	movi	r2,32
    66d4:	f800283a 	ret
    66d8:	0005883a 	mov	r2,zero
    66dc:	003fec06 	br	6690 <__alt_data_end+0xfffe6690>
    66e0:	10800044 	addi	r2,r2,1
    66e4:	f800283a 	ret

000066e8 <__lo0bits>:
    66e8:	20c00017 	ldw	r3,0(r4)
    66ec:	188001cc 	andi	r2,r3,7
    66f0:	10000826 	beq	r2,zero,6714 <__lo0bits+0x2c>
    66f4:	1880004c 	andi	r2,r3,1
    66f8:	1000211e 	bne	r2,zero,6780 <__lo0bits+0x98>
    66fc:	1880008c 	andi	r2,r3,2
    6700:	1000211e 	bne	r2,zero,6788 <__lo0bits+0xa0>
    6704:	1806d0ba 	srli	r3,r3,2
    6708:	00800084 	movi	r2,2
    670c:	20c00015 	stw	r3,0(r4)
    6710:	f800283a 	ret
    6714:	18bfffcc 	andi	r2,r3,65535
    6718:	10001326 	beq	r2,zero,6768 <__lo0bits+0x80>
    671c:	0005883a 	mov	r2,zero
    6720:	19403fcc 	andi	r5,r3,255
    6724:	2800021e 	bne	r5,zero,6730 <__lo0bits+0x48>
    6728:	1806d23a 	srli	r3,r3,8
    672c:	10800204 	addi	r2,r2,8
    6730:	194003cc 	andi	r5,r3,15
    6734:	2800021e 	bne	r5,zero,6740 <__lo0bits+0x58>
    6738:	1806d13a 	srli	r3,r3,4
    673c:	10800104 	addi	r2,r2,4
    6740:	194000cc 	andi	r5,r3,3
    6744:	2800021e 	bne	r5,zero,6750 <__lo0bits+0x68>
    6748:	1806d0ba 	srli	r3,r3,2
    674c:	10800084 	addi	r2,r2,2
    6750:	1940004c 	andi	r5,r3,1
    6754:	2800081e 	bne	r5,zero,6778 <__lo0bits+0x90>
    6758:	1806d07a 	srli	r3,r3,1
    675c:	1800051e 	bne	r3,zero,6774 <__lo0bits+0x8c>
    6760:	00800804 	movi	r2,32
    6764:	f800283a 	ret
    6768:	1806d43a 	srli	r3,r3,16
    676c:	00800404 	movi	r2,16
    6770:	003feb06 	br	6720 <__alt_data_end+0xfffe6720>
    6774:	10800044 	addi	r2,r2,1
    6778:	20c00015 	stw	r3,0(r4)
    677c:	f800283a 	ret
    6780:	0005883a 	mov	r2,zero
    6784:	f800283a 	ret
    6788:	1806d07a 	srli	r3,r3,1
    678c:	00800044 	movi	r2,1
    6790:	20c00015 	stw	r3,0(r4)
    6794:	f800283a 	ret

00006798 <__i2b>:
    6798:	defffd04 	addi	sp,sp,-12
    679c:	dc000015 	stw	r16,0(sp)
    67a0:	04000044 	movi	r16,1
    67a4:	dc400115 	stw	r17,4(sp)
    67a8:	2823883a 	mov	r17,r5
    67ac:	800b883a 	mov	r5,r16
    67b0:	dfc00215 	stw	ra,8(sp)
    67b4:	00063640 	call	6364 <_Balloc>
    67b8:	14400515 	stw	r17,20(r2)
    67bc:	14000415 	stw	r16,16(r2)
    67c0:	dfc00217 	ldw	ra,8(sp)
    67c4:	dc400117 	ldw	r17,4(sp)
    67c8:	dc000017 	ldw	r16,0(sp)
    67cc:	dec00304 	addi	sp,sp,12
    67d0:	f800283a 	ret

000067d4 <__multiply>:
    67d4:	deffef04 	addi	sp,sp,-68
    67d8:	dc400815 	stw	r17,32(sp)
    67dc:	dc000715 	stw	r16,28(sp)
    67e0:	34400417 	ldw	r17,16(r6)
    67e4:	2c000417 	ldw	r16,16(r5)
    67e8:	dd800d15 	stw	r22,52(sp)
    67ec:	dc800915 	stw	r18,36(sp)
    67f0:	dfc01015 	stw	ra,64(sp)
    67f4:	df000f15 	stw	fp,60(sp)
    67f8:	ddc00e15 	stw	r23,56(sp)
    67fc:	dd400c15 	stw	r21,48(sp)
    6800:	dd000b15 	stw	r20,44(sp)
    6804:	dcc00a15 	stw	r19,40(sp)
    6808:	2825883a 	mov	r18,r5
    680c:	302d883a 	mov	r22,r6
    6810:	8440050e 	bge	r16,r17,6828 <__multiply+0x54>
    6814:	8007883a 	mov	r3,r16
    6818:	3025883a 	mov	r18,r6
    681c:	8821883a 	mov	r16,r17
    6820:	282d883a 	mov	r22,r5
    6824:	1823883a 	mov	r17,r3
    6828:	90800217 	ldw	r2,8(r18)
    682c:	8447883a 	add	r3,r16,r17
    6830:	d8c00215 	stw	r3,8(sp)
    6834:	91400117 	ldw	r5,4(r18)
    6838:	10c0010e 	bge	r2,r3,6840 <__multiply+0x6c>
    683c:	29400044 	addi	r5,r5,1
    6840:	00063640 	call	6364 <_Balloc>
    6844:	d8c00217 	ldw	r3,8(sp)
    6848:	d8800615 	stw	r2,24(sp)
    684c:	18eb883a 	add	r21,r3,r3
    6850:	ad6b883a 	add	r21,r21,r21
    6854:	10c00504 	addi	r3,r2,20
    6858:	1d6b883a 	add	r21,r3,r21
    685c:	d8c00115 	stw	r3,4(sp)
    6860:	dd400315 	stw	r21,12(sp)
    6864:	1805883a 	mov	r2,r3
    6868:	1d40042e 	bgeu	r3,r21,687c <__multiply+0xa8>
    686c:	d8c00317 	ldw	r3,12(sp)
    6870:	10000015 	stw	zero,0(r2)
    6874:	10800104 	addi	r2,r2,4
    6878:	10fffc36 	bltu	r2,r3,686c <__alt_data_end+0xfffe686c>
    687c:	8c63883a 	add	r17,r17,r17
    6880:	b5800504 	addi	r22,r22,20
    6884:	8c63883a 	add	r17,r17,r17
    6888:	94800504 	addi	r18,r18,20
    688c:	8421883a 	add	r16,r16,r16
    6890:	b463883a 	add	r17,r22,r17
    6894:	8421883a 	add	r16,r16,r16
    6898:	dd800015 	stw	r22,0(sp)
    689c:	dc800415 	stw	r18,16(sp)
    68a0:	dc400515 	stw	r17,20(sp)
    68a4:	9429883a 	add	r20,r18,r16
    68a8:	b4404f2e 	bgeu	r22,r17,69e8 <__multiply+0x214>
    68ac:	d8c00017 	ldw	r3,0(sp)
    68b0:	1c800017 	ldw	r18,0(r3)
    68b4:	947fffcc 	andi	r17,r18,65535
    68b8:	88001e26 	beq	r17,zero,6934 <__multiply+0x160>
    68bc:	dd800117 	ldw	r22,4(sp)
    68c0:	dd400417 	ldw	r21,16(sp)
    68c4:	0027883a 	mov	r19,zero
    68c8:	ac800017 	ldw	r18,0(r21)
    68cc:	b4000017 	ldw	r16,0(r22)
    68d0:	880b883a 	mov	r5,r17
    68d4:	913fffcc 	andi	r4,r18,65535
    68d8:	000aa180 	call	aa18 <__mulsi3>
    68dc:	9008d43a 	srli	r4,r18,16
    68e0:	84bfffcc 	andi	r18,r16,65535
    68e4:	1485883a 	add	r2,r2,r18
    68e8:	14e5883a 	add	r18,r2,r19
    68ec:	8020d43a 	srli	r16,r16,16
    68f0:	9026d43a 	srli	r19,r18,16
    68f4:	880b883a 	mov	r5,r17
    68f8:	000aa180 	call	aa18 <__mulsi3>
    68fc:	1405883a 	add	r2,r2,r16
    6900:	14e1883a 	add	r16,r2,r19
    6904:	90ffffcc 	andi	r3,r18,65535
    6908:	8024943a 	slli	r18,r16,16
    690c:	ad400104 	addi	r21,r21,4
    6910:	b005883a 	mov	r2,r22
    6914:	90c6b03a 	or	r3,r18,r3
    6918:	b0c00015 	stw	r3,0(r22)
    691c:	8026d43a 	srli	r19,r16,16
    6920:	b5800104 	addi	r22,r22,4
    6924:	ad3fe836 	bltu	r21,r20,68c8 <__alt_data_end+0xfffe68c8>
    6928:	d8c00017 	ldw	r3,0(sp)
    692c:	14c00115 	stw	r19,4(r2)
    6930:	1c800017 	ldw	r18,0(r3)
    6934:	9024d43a 	srli	r18,r18,16
    6938:	90002226 	beq	r18,zero,69c4 <__multiply+0x1f0>
    693c:	d8c00117 	ldw	r3,4(sp)
    6940:	dd800417 	ldw	r22,16(sp)
    6944:	002f883a 	mov	r23,zero
    6948:	1f000017 	ldw	fp,0(r3)
    694c:	1823883a 	mov	r17,r3
    6950:	182b883a 	mov	r21,r3
    6954:	e021883a 	mov	r16,fp
    6958:	00000106 	br	6960 <__multiply+0x18c>
    695c:	982b883a 	mov	r21,r19
    6960:	b100000b 	ldhu	r4,0(r22)
    6964:	8020d43a 	srli	r16,r16,16
    6968:	900b883a 	mov	r5,r18
    696c:	000aa180 	call	aa18 <__mulsi3>
    6970:	1405883a 	add	r2,r2,r16
    6974:	15ef883a 	add	r23,r2,r23
    6978:	b804943a 	slli	r2,r23,16
    697c:	e0ffffcc 	andi	r3,fp,65535
    6980:	8c400104 	addi	r17,r17,4
    6984:	10c6b03a 	or	r3,r2,r3
    6988:	88ffff15 	stw	r3,-4(r17)
    698c:	b5800104 	addi	r22,r22,4
    6990:	b13fff17 	ldw	r4,-4(r22)
    6994:	acc00104 	addi	r19,r21,4
    6998:	900b883a 	mov	r5,r18
    699c:	2008d43a 	srli	r4,r4,16
    69a0:	9c000017 	ldw	r16,0(r19)
    69a4:	000aa180 	call	aa18 <__mulsi3>
    69a8:	b806d43a 	srli	r3,r23,16
    69ac:	813fffcc 	andi	r4,r16,65535
    69b0:	1105883a 	add	r2,r2,r4
    69b4:	10f9883a 	add	fp,r2,r3
    69b8:	e02ed43a 	srli	r23,fp,16
    69bc:	b53fe736 	bltu	r22,r20,695c <__alt_data_end+0xfffe695c>
    69c0:	af000115 	stw	fp,4(r21)
    69c4:	d8c00017 	ldw	r3,0(sp)
    69c8:	d9000517 	ldw	r4,20(sp)
    69cc:	18c00104 	addi	r3,r3,4
    69d0:	d8c00015 	stw	r3,0(sp)
    69d4:	d8c00117 	ldw	r3,4(sp)
    69d8:	18c00104 	addi	r3,r3,4
    69dc:	d8c00115 	stw	r3,4(sp)
    69e0:	d8c00017 	ldw	r3,0(sp)
    69e4:	193fb136 	bltu	r3,r4,68ac <__alt_data_end+0xfffe68ac>
    69e8:	d8c00217 	ldw	r3,8(sp)
    69ec:	00c00c0e 	bge	zero,r3,6a20 <__multiply+0x24c>
    69f0:	d8c00317 	ldw	r3,12(sp)
    69f4:	18bfff17 	ldw	r2,-4(r3)
    69f8:	1d7fff04 	addi	r21,r3,-4
    69fc:	10000326 	beq	r2,zero,6a0c <__multiply+0x238>
    6a00:	00000706 	br	6a20 <__multiply+0x24c>
    6a04:	a8800017 	ldw	r2,0(r21)
    6a08:	1000051e 	bne	r2,zero,6a20 <__multiply+0x24c>
    6a0c:	d8c00217 	ldw	r3,8(sp)
    6a10:	ad7fff04 	addi	r21,r21,-4
    6a14:	18ffffc4 	addi	r3,r3,-1
    6a18:	d8c00215 	stw	r3,8(sp)
    6a1c:	183ff91e 	bne	r3,zero,6a04 <__alt_data_end+0xfffe6a04>
    6a20:	d8c00617 	ldw	r3,24(sp)
    6a24:	d9000217 	ldw	r4,8(sp)
    6a28:	1805883a 	mov	r2,r3
    6a2c:	19000415 	stw	r4,16(r3)
    6a30:	dfc01017 	ldw	ra,64(sp)
    6a34:	df000f17 	ldw	fp,60(sp)
    6a38:	ddc00e17 	ldw	r23,56(sp)
    6a3c:	dd800d17 	ldw	r22,52(sp)
    6a40:	dd400c17 	ldw	r21,48(sp)
    6a44:	dd000b17 	ldw	r20,44(sp)
    6a48:	dcc00a17 	ldw	r19,40(sp)
    6a4c:	dc800917 	ldw	r18,36(sp)
    6a50:	dc400817 	ldw	r17,32(sp)
    6a54:	dc000717 	ldw	r16,28(sp)
    6a58:	dec01104 	addi	sp,sp,68
    6a5c:	f800283a 	ret

00006a60 <__pow5mult>:
    6a60:	defffa04 	addi	sp,sp,-24
    6a64:	dcc00315 	stw	r19,12(sp)
    6a68:	dc000015 	stw	r16,0(sp)
    6a6c:	dfc00515 	stw	ra,20(sp)
    6a70:	dd000415 	stw	r20,16(sp)
    6a74:	dc800215 	stw	r18,8(sp)
    6a78:	dc400115 	stw	r17,4(sp)
    6a7c:	308000cc 	andi	r2,r6,3
    6a80:	3021883a 	mov	r16,r6
    6a84:	2027883a 	mov	r19,r4
    6a88:	10002f1e 	bne	r2,zero,6b48 <__pow5mult+0xe8>
    6a8c:	2825883a 	mov	r18,r5
    6a90:	8021d0ba 	srai	r16,r16,2
    6a94:	80001a26 	beq	r16,zero,6b00 <__pow5mult+0xa0>
    6a98:	9c401217 	ldw	r17,72(r19)
    6a9c:	8800061e 	bne	r17,zero,6ab8 <__pow5mult+0x58>
    6aa0:	00003406 	br	6b74 <__pow5mult+0x114>
    6aa4:	8021d07a 	srai	r16,r16,1
    6aa8:	80001526 	beq	r16,zero,6b00 <__pow5mult+0xa0>
    6aac:	88800017 	ldw	r2,0(r17)
    6ab0:	10001c26 	beq	r2,zero,6b24 <__pow5mult+0xc4>
    6ab4:	1023883a 	mov	r17,r2
    6ab8:	8080004c 	andi	r2,r16,1
    6abc:	103ff926 	beq	r2,zero,6aa4 <__alt_data_end+0xfffe6aa4>
    6ac0:	880d883a 	mov	r6,r17
    6ac4:	900b883a 	mov	r5,r18
    6ac8:	9809883a 	mov	r4,r19
    6acc:	00067d40 	call	67d4 <__multiply>
    6ad0:	90001b26 	beq	r18,zero,6b40 <__pow5mult+0xe0>
    6ad4:	91000117 	ldw	r4,4(r18)
    6ad8:	98c01317 	ldw	r3,76(r19)
    6adc:	8021d07a 	srai	r16,r16,1
    6ae0:	2109883a 	add	r4,r4,r4
    6ae4:	2109883a 	add	r4,r4,r4
    6ae8:	1907883a 	add	r3,r3,r4
    6aec:	19000017 	ldw	r4,0(r3)
    6af0:	91000015 	stw	r4,0(r18)
    6af4:	1c800015 	stw	r18,0(r3)
    6af8:	1025883a 	mov	r18,r2
    6afc:	803feb1e 	bne	r16,zero,6aac <__alt_data_end+0xfffe6aac>
    6b00:	9005883a 	mov	r2,r18
    6b04:	dfc00517 	ldw	ra,20(sp)
    6b08:	dd000417 	ldw	r20,16(sp)
    6b0c:	dcc00317 	ldw	r19,12(sp)
    6b10:	dc800217 	ldw	r18,8(sp)
    6b14:	dc400117 	ldw	r17,4(sp)
    6b18:	dc000017 	ldw	r16,0(sp)
    6b1c:	dec00604 	addi	sp,sp,24
    6b20:	f800283a 	ret
    6b24:	880d883a 	mov	r6,r17
    6b28:	880b883a 	mov	r5,r17
    6b2c:	9809883a 	mov	r4,r19
    6b30:	00067d40 	call	67d4 <__multiply>
    6b34:	88800015 	stw	r2,0(r17)
    6b38:	10000015 	stw	zero,0(r2)
    6b3c:	003fdd06 	br	6ab4 <__alt_data_end+0xfffe6ab4>
    6b40:	1025883a 	mov	r18,r2
    6b44:	003fd706 	br	6aa4 <__alt_data_end+0xfffe6aa4>
    6b48:	10bfffc4 	addi	r2,r2,-1
    6b4c:	1085883a 	add	r2,r2,r2
    6b50:	00c00074 	movhi	r3,1
    6b54:	18fec304 	addi	r3,r3,-1268
    6b58:	1085883a 	add	r2,r2,r2
    6b5c:	1885883a 	add	r2,r3,r2
    6b60:	11800017 	ldw	r6,0(r2)
    6b64:	000f883a 	mov	r7,zero
    6b68:	00064340 	call	6434 <__multadd>
    6b6c:	1025883a 	mov	r18,r2
    6b70:	003fc706 	br	6a90 <__alt_data_end+0xfffe6a90>
    6b74:	05000044 	movi	r20,1
    6b78:	a00b883a 	mov	r5,r20
    6b7c:	9809883a 	mov	r4,r19
    6b80:	00063640 	call	6364 <_Balloc>
    6b84:	1023883a 	mov	r17,r2
    6b88:	00809c44 	movi	r2,625
    6b8c:	88800515 	stw	r2,20(r17)
    6b90:	8d000415 	stw	r20,16(r17)
    6b94:	9c401215 	stw	r17,72(r19)
    6b98:	88000015 	stw	zero,0(r17)
    6b9c:	003fc606 	br	6ab8 <__alt_data_end+0xfffe6ab8>

00006ba0 <__lshift>:
    6ba0:	defff904 	addi	sp,sp,-28
    6ba4:	dd400515 	stw	r21,20(sp)
    6ba8:	dcc00315 	stw	r19,12(sp)
    6bac:	302bd17a 	srai	r21,r6,5
    6bb0:	2cc00417 	ldw	r19,16(r5)
    6bb4:	28800217 	ldw	r2,8(r5)
    6bb8:	dd000415 	stw	r20,16(sp)
    6bbc:	ace7883a 	add	r19,r21,r19
    6bc0:	dc800215 	stw	r18,8(sp)
    6bc4:	dc400115 	stw	r17,4(sp)
    6bc8:	dc000015 	stw	r16,0(sp)
    6bcc:	dfc00615 	stw	ra,24(sp)
    6bd0:	9c000044 	addi	r16,r19,1
    6bd4:	2823883a 	mov	r17,r5
    6bd8:	3029883a 	mov	r20,r6
    6bdc:	2025883a 	mov	r18,r4
    6be0:	29400117 	ldw	r5,4(r5)
    6be4:	1400030e 	bge	r2,r16,6bf4 <__lshift+0x54>
    6be8:	1085883a 	add	r2,r2,r2
    6bec:	29400044 	addi	r5,r5,1
    6bf0:	143ffd16 	blt	r2,r16,6be8 <__alt_data_end+0xfffe6be8>
    6bf4:	9009883a 	mov	r4,r18
    6bf8:	00063640 	call	6364 <_Balloc>
    6bfc:	10c00504 	addi	r3,r2,20
    6c00:	0540070e 	bge	zero,r21,6c20 <__lshift+0x80>
    6c04:	ad6b883a 	add	r21,r21,r21
    6c08:	ad6b883a 	add	r21,r21,r21
    6c0c:	1809883a 	mov	r4,r3
    6c10:	1d47883a 	add	r3,r3,r21
    6c14:	20000015 	stw	zero,0(r4)
    6c18:	21000104 	addi	r4,r4,4
    6c1c:	193ffd1e 	bne	r3,r4,6c14 <__alt_data_end+0xfffe6c14>
    6c20:	8a000417 	ldw	r8,16(r17)
    6c24:	89000504 	addi	r4,r17,20
    6c28:	a18007cc 	andi	r6,r20,31
    6c2c:	4211883a 	add	r8,r8,r8
    6c30:	4211883a 	add	r8,r8,r8
    6c34:	2211883a 	add	r8,r4,r8
    6c38:	30002326 	beq	r6,zero,6cc8 <__lshift+0x128>
    6c3c:	02400804 	movi	r9,32
    6c40:	4993c83a 	sub	r9,r9,r6
    6c44:	000b883a 	mov	r5,zero
    6c48:	21c00017 	ldw	r7,0(r4)
    6c4c:	1815883a 	mov	r10,r3
    6c50:	18c00104 	addi	r3,r3,4
    6c54:	398e983a 	sll	r7,r7,r6
    6c58:	21000104 	addi	r4,r4,4
    6c5c:	394ab03a 	or	r5,r7,r5
    6c60:	197fff15 	stw	r5,-4(r3)
    6c64:	217fff17 	ldw	r5,-4(r4)
    6c68:	2a4ad83a 	srl	r5,r5,r9
    6c6c:	223ff636 	bltu	r4,r8,6c48 <__alt_data_end+0xfffe6c48>
    6c70:	51400115 	stw	r5,4(r10)
    6c74:	28001a1e 	bne	r5,zero,6ce0 <__lshift+0x140>
    6c78:	843fffc4 	addi	r16,r16,-1
    6c7c:	14000415 	stw	r16,16(r2)
    6c80:	88000826 	beq	r17,zero,6ca4 <__lshift+0x104>
    6c84:	89000117 	ldw	r4,4(r17)
    6c88:	90c01317 	ldw	r3,76(r18)
    6c8c:	2109883a 	add	r4,r4,r4
    6c90:	2109883a 	add	r4,r4,r4
    6c94:	1907883a 	add	r3,r3,r4
    6c98:	19000017 	ldw	r4,0(r3)
    6c9c:	89000015 	stw	r4,0(r17)
    6ca0:	1c400015 	stw	r17,0(r3)
    6ca4:	dfc00617 	ldw	ra,24(sp)
    6ca8:	dd400517 	ldw	r21,20(sp)
    6cac:	dd000417 	ldw	r20,16(sp)
    6cb0:	dcc00317 	ldw	r19,12(sp)
    6cb4:	dc800217 	ldw	r18,8(sp)
    6cb8:	dc400117 	ldw	r17,4(sp)
    6cbc:	dc000017 	ldw	r16,0(sp)
    6cc0:	dec00704 	addi	sp,sp,28
    6cc4:	f800283a 	ret
    6cc8:	21400017 	ldw	r5,0(r4)
    6ccc:	18c00104 	addi	r3,r3,4
    6cd0:	21000104 	addi	r4,r4,4
    6cd4:	197fff15 	stw	r5,-4(r3)
    6cd8:	223ffb36 	bltu	r4,r8,6cc8 <__alt_data_end+0xfffe6cc8>
    6cdc:	003fe606 	br	6c78 <__alt_data_end+0xfffe6c78>
    6ce0:	9c000084 	addi	r16,r19,2
    6ce4:	003fe406 	br	6c78 <__alt_data_end+0xfffe6c78>

00006ce8 <__mcmp>:
    6ce8:	20800417 	ldw	r2,16(r4)
    6cec:	28c00417 	ldw	r3,16(r5)
    6cf0:	10c5c83a 	sub	r2,r2,r3
    6cf4:	1000111e 	bne	r2,zero,6d3c <__mcmp+0x54>
    6cf8:	18c7883a 	add	r3,r3,r3
    6cfc:	18c7883a 	add	r3,r3,r3
    6d00:	21000504 	addi	r4,r4,20
    6d04:	29400504 	addi	r5,r5,20
    6d08:	20c5883a 	add	r2,r4,r3
    6d0c:	28cb883a 	add	r5,r5,r3
    6d10:	00000106 	br	6d18 <__mcmp+0x30>
    6d14:	20800a2e 	bgeu	r4,r2,6d40 <__mcmp+0x58>
    6d18:	10bfff04 	addi	r2,r2,-4
    6d1c:	297fff04 	addi	r5,r5,-4
    6d20:	11800017 	ldw	r6,0(r2)
    6d24:	28c00017 	ldw	r3,0(r5)
    6d28:	30fffa26 	beq	r6,r3,6d14 <__alt_data_end+0xfffe6d14>
    6d2c:	30c00236 	bltu	r6,r3,6d38 <__mcmp+0x50>
    6d30:	00800044 	movi	r2,1
    6d34:	f800283a 	ret
    6d38:	00bfffc4 	movi	r2,-1
    6d3c:	f800283a 	ret
    6d40:	0005883a 	mov	r2,zero
    6d44:	f800283a 	ret

00006d48 <__mdiff>:
    6d48:	28c00417 	ldw	r3,16(r5)
    6d4c:	30800417 	ldw	r2,16(r6)
    6d50:	defffa04 	addi	sp,sp,-24
    6d54:	dcc00315 	stw	r19,12(sp)
    6d58:	dc800215 	stw	r18,8(sp)
    6d5c:	dfc00515 	stw	ra,20(sp)
    6d60:	dd000415 	stw	r20,16(sp)
    6d64:	dc400115 	stw	r17,4(sp)
    6d68:	dc000015 	stw	r16,0(sp)
    6d6c:	1887c83a 	sub	r3,r3,r2
    6d70:	2825883a 	mov	r18,r5
    6d74:	3027883a 	mov	r19,r6
    6d78:	1800141e 	bne	r3,zero,6dcc <__mdiff+0x84>
    6d7c:	1085883a 	add	r2,r2,r2
    6d80:	1085883a 	add	r2,r2,r2
    6d84:	2a000504 	addi	r8,r5,20
    6d88:	34000504 	addi	r16,r6,20
    6d8c:	4087883a 	add	r3,r8,r2
    6d90:	8085883a 	add	r2,r16,r2
    6d94:	00000106 	br	6d9c <__mdiff+0x54>
    6d98:	40c0592e 	bgeu	r8,r3,6f00 <__mdiff+0x1b8>
    6d9c:	18ffff04 	addi	r3,r3,-4
    6da0:	10bfff04 	addi	r2,r2,-4
    6da4:	19c00017 	ldw	r7,0(r3)
    6da8:	11400017 	ldw	r5,0(r2)
    6dac:	397ffa26 	beq	r7,r5,6d98 <__alt_data_end+0xfffe6d98>
    6db0:	3940592e 	bgeu	r7,r5,6f18 <__mdiff+0x1d0>
    6db4:	9005883a 	mov	r2,r18
    6db8:	4023883a 	mov	r17,r8
    6dbc:	9825883a 	mov	r18,r19
    6dc0:	05000044 	movi	r20,1
    6dc4:	1027883a 	mov	r19,r2
    6dc8:	00000406 	br	6ddc <__mdiff+0x94>
    6dcc:	18005616 	blt	r3,zero,6f28 <__mdiff+0x1e0>
    6dd0:	34400504 	addi	r17,r6,20
    6dd4:	2c000504 	addi	r16,r5,20
    6dd8:	0029883a 	mov	r20,zero
    6ddc:	91400117 	ldw	r5,4(r18)
    6de0:	00063640 	call	6364 <_Balloc>
    6de4:	92400417 	ldw	r9,16(r18)
    6de8:	9b000417 	ldw	r12,16(r19)
    6dec:	12c00504 	addi	r11,r2,20
    6df0:	4a51883a 	add	r8,r9,r9
    6df4:	6319883a 	add	r12,r12,r12
    6df8:	4211883a 	add	r8,r8,r8
    6dfc:	6319883a 	add	r12,r12,r12
    6e00:	15000315 	stw	r20,12(r2)
    6e04:	8211883a 	add	r8,r16,r8
    6e08:	8b19883a 	add	r12,r17,r12
    6e0c:	0007883a 	mov	r3,zero
    6e10:	81400017 	ldw	r5,0(r16)
    6e14:	89c00017 	ldw	r7,0(r17)
    6e18:	59800104 	addi	r6,r11,4
    6e1c:	293fffcc 	andi	r4,r5,65535
    6e20:	20c7883a 	add	r3,r4,r3
    6e24:	393fffcc 	andi	r4,r7,65535
    6e28:	1909c83a 	sub	r4,r3,r4
    6e2c:	280ad43a 	srli	r5,r5,16
    6e30:	380ed43a 	srli	r7,r7,16
    6e34:	2007d43a 	srai	r3,r4,16
    6e38:	213fffcc 	andi	r4,r4,65535
    6e3c:	29cbc83a 	sub	r5,r5,r7
    6e40:	28c7883a 	add	r3,r5,r3
    6e44:	180a943a 	slli	r5,r3,16
    6e48:	8c400104 	addi	r17,r17,4
    6e4c:	84000104 	addi	r16,r16,4
    6e50:	2908b03a 	or	r4,r5,r4
    6e54:	59000015 	stw	r4,0(r11)
    6e58:	1807d43a 	srai	r3,r3,16
    6e5c:	3015883a 	mov	r10,r6
    6e60:	3017883a 	mov	r11,r6
    6e64:	8b3fea36 	bltu	r17,r12,6e10 <__alt_data_end+0xfffe6e10>
    6e68:	8200162e 	bgeu	r16,r8,6ec4 <__mdiff+0x17c>
    6e6c:	8017883a 	mov	r11,r16
    6e70:	59400017 	ldw	r5,0(r11)
    6e74:	31800104 	addi	r6,r6,4
    6e78:	5ac00104 	addi	r11,r11,4
    6e7c:	293fffcc 	andi	r4,r5,65535
    6e80:	20c7883a 	add	r3,r4,r3
    6e84:	280ed43a 	srli	r7,r5,16
    6e88:	180bd43a 	srai	r5,r3,16
    6e8c:	193fffcc 	andi	r4,r3,65535
    6e90:	3947883a 	add	r3,r7,r5
    6e94:	180a943a 	slli	r5,r3,16
    6e98:	1807d43a 	srai	r3,r3,16
    6e9c:	2908b03a 	or	r4,r5,r4
    6ea0:	313fff15 	stw	r4,-4(r6)
    6ea4:	5a3ff236 	bltu	r11,r8,6e70 <__alt_data_end+0xfffe6e70>
    6ea8:	0406303a 	nor	r3,zero,r16
    6eac:	1a07883a 	add	r3,r3,r8
    6eb0:	1806d0ba 	srli	r3,r3,2
    6eb4:	18c00044 	addi	r3,r3,1
    6eb8:	18c7883a 	add	r3,r3,r3
    6ebc:	18c7883a 	add	r3,r3,r3
    6ec0:	50d5883a 	add	r10,r10,r3
    6ec4:	50ffff04 	addi	r3,r10,-4
    6ec8:	2000041e 	bne	r4,zero,6edc <__mdiff+0x194>
    6ecc:	18ffff04 	addi	r3,r3,-4
    6ed0:	19000017 	ldw	r4,0(r3)
    6ed4:	4a7fffc4 	addi	r9,r9,-1
    6ed8:	203ffc26 	beq	r4,zero,6ecc <__alt_data_end+0xfffe6ecc>
    6edc:	12400415 	stw	r9,16(r2)
    6ee0:	dfc00517 	ldw	ra,20(sp)
    6ee4:	dd000417 	ldw	r20,16(sp)
    6ee8:	dcc00317 	ldw	r19,12(sp)
    6eec:	dc800217 	ldw	r18,8(sp)
    6ef0:	dc400117 	ldw	r17,4(sp)
    6ef4:	dc000017 	ldw	r16,0(sp)
    6ef8:	dec00604 	addi	sp,sp,24
    6efc:	f800283a 	ret
    6f00:	000b883a 	mov	r5,zero
    6f04:	00063640 	call	6364 <_Balloc>
    6f08:	00c00044 	movi	r3,1
    6f0c:	10c00415 	stw	r3,16(r2)
    6f10:	10000515 	stw	zero,20(r2)
    6f14:	003ff206 	br	6ee0 <__alt_data_end+0xfffe6ee0>
    6f18:	8023883a 	mov	r17,r16
    6f1c:	0029883a 	mov	r20,zero
    6f20:	4021883a 	mov	r16,r8
    6f24:	003fad06 	br	6ddc <__alt_data_end+0xfffe6ddc>
    6f28:	9005883a 	mov	r2,r18
    6f2c:	94400504 	addi	r17,r18,20
    6f30:	9c000504 	addi	r16,r19,20
    6f34:	9825883a 	mov	r18,r19
    6f38:	05000044 	movi	r20,1
    6f3c:	1027883a 	mov	r19,r2
    6f40:	003fa606 	br	6ddc <__alt_data_end+0xfffe6ddc>

00006f44 <__ulp>:
    6f44:	295ffc2c 	andhi	r5,r5,32752
    6f48:	00bf3034 	movhi	r2,64704
    6f4c:	2887883a 	add	r3,r5,r2
    6f50:	00c0020e 	bge	zero,r3,6f5c <__ulp+0x18>
    6f54:	0005883a 	mov	r2,zero
    6f58:	f800283a 	ret
    6f5c:	00c7c83a 	sub	r3,zero,r3
    6f60:	1807d53a 	srai	r3,r3,20
    6f64:	008004c4 	movi	r2,19
    6f68:	10c00b0e 	bge	r2,r3,6f98 <__ulp+0x54>
    6f6c:	18bffb04 	addi	r2,r3,-20
    6f70:	01000784 	movi	r4,30
    6f74:	0007883a 	mov	r3,zero
    6f78:	20800516 	blt	r4,r2,6f90 <__ulp+0x4c>
    6f7c:	010007c4 	movi	r4,31
    6f80:	2089c83a 	sub	r4,r4,r2
    6f84:	00800044 	movi	r2,1
    6f88:	1104983a 	sll	r2,r2,r4
    6f8c:	f800283a 	ret
    6f90:	00800044 	movi	r2,1
    6f94:	f800283a 	ret
    6f98:	01400234 	movhi	r5,8
    6f9c:	28c7d83a 	sra	r3,r5,r3
    6fa0:	0005883a 	mov	r2,zero
    6fa4:	f800283a 	ret

00006fa8 <__b2d>:
    6fa8:	defffa04 	addi	sp,sp,-24
    6fac:	dc000015 	stw	r16,0(sp)
    6fb0:	24000417 	ldw	r16,16(r4)
    6fb4:	dc400115 	stw	r17,4(sp)
    6fb8:	24400504 	addi	r17,r4,20
    6fbc:	8421883a 	add	r16,r16,r16
    6fc0:	8421883a 	add	r16,r16,r16
    6fc4:	8c21883a 	add	r16,r17,r16
    6fc8:	dc800215 	stw	r18,8(sp)
    6fcc:	84bfff17 	ldw	r18,-4(r16)
    6fd0:	dd000415 	stw	r20,16(sp)
    6fd4:	dcc00315 	stw	r19,12(sp)
    6fd8:	9009883a 	mov	r4,r18
    6fdc:	2829883a 	mov	r20,r5
    6fe0:	dfc00515 	stw	ra,20(sp)
    6fe4:	00066800 	call	6680 <__hi0bits>
    6fe8:	00c00804 	movi	r3,32
    6fec:	1889c83a 	sub	r4,r3,r2
    6ff0:	a1000015 	stw	r4,0(r20)
    6ff4:	01000284 	movi	r4,10
    6ff8:	84ffff04 	addi	r19,r16,-4
    6ffc:	20801216 	blt	r4,r2,7048 <__b2d+0xa0>
    7000:	018002c4 	movi	r6,11
    7004:	308dc83a 	sub	r6,r6,r2
    7008:	9186d83a 	srl	r3,r18,r6
    700c:	18cffc34 	orhi	r3,r3,16368
    7010:	8cc0212e 	bgeu	r17,r19,7098 <__b2d+0xf0>
    7014:	813ffe17 	ldw	r4,-8(r16)
    7018:	218cd83a 	srl	r6,r4,r6
    701c:	10800544 	addi	r2,r2,21
    7020:	9084983a 	sll	r2,r18,r2
    7024:	1184b03a 	or	r2,r2,r6
    7028:	dfc00517 	ldw	ra,20(sp)
    702c:	dd000417 	ldw	r20,16(sp)
    7030:	dcc00317 	ldw	r19,12(sp)
    7034:	dc800217 	ldw	r18,8(sp)
    7038:	dc400117 	ldw	r17,4(sp)
    703c:	dc000017 	ldw	r16,0(sp)
    7040:	dec00604 	addi	sp,sp,24
    7044:	f800283a 	ret
    7048:	8cc00f2e 	bgeu	r17,r19,7088 <__b2d+0xe0>
    704c:	117ffd44 	addi	r5,r2,-11
    7050:	80bffe17 	ldw	r2,-8(r16)
    7054:	28000e26 	beq	r5,zero,7090 <__b2d+0xe8>
    7058:	1949c83a 	sub	r4,r3,r5
    705c:	9164983a 	sll	r18,r18,r5
    7060:	1106d83a 	srl	r3,r2,r4
    7064:	81bffe04 	addi	r6,r16,-8
    7068:	948ffc34 	orhi	r18,r18,16368
    706c:	90c6b03a 	or	r3,r18,r3
    7070:	89800e2e 	bgeu	r17,r6,70ac <__b2d+0x104>
    7074:	81bffd17 	ldw	r6,-12(r16)
    7078:	1144983a 	sll	r2,r2,r5
    707c:	310ad83a 	srl	r5,r6,r4
    7080:	2884b03a 	or	r2,r5,r2
    7084:	003fe806 	br	7028 <__alt_data_end+0xfffe7028>
    7088:	10bffd44 	addi	r2,r2,-11
    708c:	1000041e 	bne	r2,zero,70a0 <__b2d+0xf8>
    7090:	90cffc34 	orhi	r3,r18,16368
    7094:	003fe406 	br	7028 <__alt_data_end+0xfffe7028>
    7098:	000d883a 	mov	r6,zero
    709c:	003fdf06 	br	701c <__alt_data_end+0xfffe701c>
    70a0:	90a4983a 	sll	r18,r18,r2
    70a4:	0005883a 	mov	r2,zero
    70a8:	003ff906 	br	7090 <__alt_data_end+0xfffe7090>
    70ac:	1144983a 	sll	r2,r2,r5
    70b0:	003fdd06 	br	7028 <__alt_data_end+0xfffe7028>

000070b4 <__d2b>:
    70b4:	defff804 	addi	sp,sp,-32
    70b8:	dc000215 	stw	r16,8(sp)
    70bc:	3021883a 	mov	r16,r6
    70c0:	dc400315 	stw	r17,12(sp)
    70c4:	8022907a 	slli	r17,r16,1
    70c8:	dd000615 	stw	r20,24(sp)
    70cc:	2829883a 	mov	r20,r5
    70d0:	01400044 	movi	r5,1
    70d4:	dcc00515 	stw	r19,20(sp)
    70d8:	dc800415 	stw	r18,16(sp)
    70dc:	dfc00715 	stw	ra,28(sp)
    70e0:	3825883a 	mov	r18,r7
    70e4:	8822d57a 	srli	r17,r17,21
    70e8:	00063640 	call	6364 <_Balloc>
    70ec:	1027883a 	mov	r19,r2
    70f0:	00800434 	movhi	r2,16
    70f4:	10bfffc4 	addi	r2,r2,-1
    70f8:	808c703a 	and	r6,r16,r2
    70fc:	88000126 	beq	r17,zero,7104 <__d2b+0x50>
    7100:	31800434 	orhi	r6,r6,16
    7104:	d9800015 	stw	r6,0(sp)
    7108:	a0002426 	beq	r20,zero,719c <__d2b+0xe8>
    710c:	d9000104 	addi	r4,sp,4
    7110:	dd000115 	stw	r20,4(sp)
    7114:	00066e80 	call	66e8 <__lo0bits>
    7118:	d8c00017 	ldw	r3,0(sp)
    711c:	10002f1e 	bne	r2,zero,71dc <__d2b+0x128>
    7120:	d9000117 	ldw	r4,4(sp)
    7124:	99000515 	stw	r4,20(r19)
    7128:	1821003a 	cmpeq	r16,r3,zero
    712c:	01000084 	movi	r4,2
    7130:	2421c83a 	sub	r16,r4,r16
    7134:	98c00615 	stw	r3,24(r19)
    7138:	9c000415 	stw	r16,16(r19)
    713c:	88001f1e 	bne	r17,zero,71bc <__d2b+0x108>
    7140:	10bef384 	addi	r2,r2,-1074
    7144:	90800015 	stw	r2,0(r18)
    7148:	00900034 	movhi	r2,16384
    714c:	10bfffc4 	addi	r2,r2,-1
    7150:	8085883a 	add	r2,r16,r2
    7154:	1085883a 	add	r2,r2,r2
    7158:	1085883a 	add	r2,r2,r2
    715c:	9885883a 	add	r2,r19,r2
    7160:	11000517 	ldw	r4,20(r2)
    7164:	8020917a 	slli	r16,r16,5
    7168:	00066800 	call	6680 <__hi0bits>
    716c:	d8c00817 	ldw	r3,32(sp)
    7170:	8085c83a 	sub	r2,r16,r2
    7174:	18800015 	stw	r2,0(r3)
    7178:	9805883a 	mov	r2,r19
    717c:	dfc00717 	ldw	ra,28(sp)
    7180:	dd000617 	ldw	r20,24(sp)
    7184:	dcc00517 	ldw	r19,20(sp)
    7188:	dc800417 	ldw	r18,16(sp)
    718c:	dc400317 	ldw	r17,12(sp)
    7190:	dc000217 	ldw	r16,8(sp)
    7194:	dec00804 	addi	sp,sp,32
    7198:	f800283a 	ret
    719c:	d809883a 	mov	r4,sp
    71a0:	00066e80 	call	66e8 <__lo0bits>
    71a4:	d8c00017 	ldw	r3,0(sp)
    71a8:	04000044 	movi	r16,1
    71ac:	9c000415 	stw	r16,16(r19)
    71b0:	98c00515 	stw	r3,20(r19)
    71b4:	10800804 	addi	r2,r2,32
    71b8:	883fe126 	beq	r17,zero,7140 <__alt_data_end+0xfffe7140>
    71bc:	00c00d44 	movi	r3,53
    71c0:	8c7ef344 	addi	r17,r17,-1075
    71c4:	88a3883a 	add	r17,r17,r2
    71c8:	1885c83a 	sub	r2,r3,r2
    71cc:	d8c00817 	ldw	r3,32(sp)
    71d0:	94400015 	stw	r17,0(r18)
    71d4:	18800015 	stw	r2,0(r3)
    71d8:	003fe706 	br	7178 <__alt_data_end+0xfffe7178>
    71dc:	01000804 	movi	r4,32
    71e0:	2089c83a 	sub	r4,r4,r2
    71e4:	1908983a 	sll	r4,r3,r4
    71e8:	d9400117 	ldw	r5,4(sp)
    71ec:	1886d83a 	srl	r3,r3,r2
    71f0:	2148b03a 	or	r4,r4,r5
    71f4:	99000515 	stw	r4,20(r19)
    71f8:	d8c00015 	stw	r3,0(sp)
    71fc:	003fca06 	br	7128 <__alt_data_end+0xfffe7128>

00007200 <__ratio>:
    7200:	defff904 	addi	sp,sp,-28
    7204:	dc400315 	stw	r17,12(sp)
    7208:	2823883a 	mov	r17,r5
    720c:	d9400104 	addi	r5,sp,4
    7210:	dfc00615 	stw	ra,24(sp)
    7214:	dcc00515 	stw	r19,20(sp)
    7218:	dc800415 	stw	r18,16(sp)
    721c:	2027883a 	mov	r19,r4
    7220:	dc000215 	stw	r16,8(sp)
    7224:	0006fa80 	call	6fa8 <__b2d>
    7228:	d80b883a 	mov	r5,sp
    722c:	8809883a 	mov	r4,r17
    7230:	1025883a 	mov	r18,r2
    7234:	1821883a 	mov	r16,r3
    7238:	0006fa80 	call	6fa8 <__b2d>
    723c:	8a000417 	ldw	r8,16(r17)
    7240:	99000417 	ldw	r4,16(r19)
    7244:	d9400117 	ldw	r5,4(sp)
    7248:	2209c83a 	sub	r4,r4,r8
    724c:	2010917a 	slli	r8,r4,5
    7250:	d9000017 	ldw	r4,0(sp)
    7254:	2909c83a 	sub	r4,r5,r4
    7258:	4109883a 	add	r4,r8,r4
    725c:	01000e0e 	bge	zero,r4,7298 <__ratio+0x98>
    7260:	2008953a 	slli	r4,r4,20
    7264:	2421883a 	add	r16,r4,r16
    7268:	100d883a 	mov	r6,r2
    726c:	180f883a 	mov	r7,r3
    7270:	9009883a 	mov	r4,r18
    7274:	800b883a 	mov	r5,r16
    7278:	000b2ec0 	call	b2ec <__divdf3>
    727c:	dfc00617 	ldw	ra,24(sp)
    7280:	dcc00517 	ldw	r19,20(sp)
    7284:	dc800417 	ldw	r18,16(sp)
    7288:	dc400317 	ldw	r17,12(sp)
    728c:	dc000217 	ldw	r16,8(sp)
    7290:	dec00704 	addi	sp,sp,28
    7294:	f800283a 	ret
    7298:	2008953a 	slli	r4,r4,20
    729c:	1907c83a 	sub	r3,r3,r4
    72a0:	003ff106 	br	7268 <__alt_data_end+0xfffe7268>

000072a4 <_mprec_log10>:
    72a4:	defffe04 	addi	sp,sp,-8
    72a8:	dc000015 	stw	r16,0(sp)
    72ac:	dfc00115 	stw	ra,4(sp)
    72b0:	008005c4 	movi	r2,23
    72b4:	2021883a 	mov	r16,r4
    72b8:	11000d0e 	bge	r2,r4,72f0 <_mprec_log10+0x4c>
    72bc:	0005883a 	mov	r2,zero
    72c0:	00cffc34 	movhi	r3,16368
    72c4:	843fffc4 	addi	r16,r16,-1
    72c8:	000d883a 	mov	r6,zero
    72cc:	01d00934 	movhi	r7,16420
    72d0:	1009883a 	mov	r4,r2
    72d4:	180b883a 	mov	r5,r3
    72d8:	000bf140 	call	bf14 <__muldf3>
    72dc:	803ff91e 	bne	r16,zero,72c4 <__alt_data_end+0xfffe72c4>
    72e0:	dfc00117 	ldw	ra,4(sp)
    72e4:	dc000017 	ldw	r16,0(sp)
    72e8:	dec00204 	addi	sp,sp,8
    72ec:	f800283a 	ret
    72f0:	202090fa 	slli	r16,r4,3
    72f4:	00800074 	movhi	r2,1
    72f8:	10beda04 	addi	r2,r2,-1176
    72fc:	1421883a 	add	r16,r2,r16
    7300:	80800017 	ldw	r2,0(r16)
    7304:	80c00117 	ldw	r3,4(r16)
    7308:	dfc00117 	ldw	ra,4(sp)
    730c:	dc000017 	ldw	r16,0(sp)
    7310:	dec00204 	addi	sp,sp,8
    7314:	f800283a 	ret

00007318 <__copybits>:
    7318:	297fffc4 	addi	r5,r5,-1
    731c:	280fd17a 	srai	r7,r5,5
    7320:	30c00417 	ldw	r3,16(r6)
    7324:	30800504 	addi	r2,r6,20
    7328:	39c00044 	addi	r7,r7,1
    732c:	18c7883a 	add	r3,r3,r3
    7330:	39cf883a 	add	r7,r7,r7
    7334:	18c7883a 	add	r3,r3,r3
    7338:	39cf883a 	add	r7,r7,r7
    733c:	10c7883a 	add	r3,r2,r3
    7340:	21cf883a 	add	r7,r4,r7
    7344:	10c00d2e 	bgeu	r2,r3,737c <__copybits+0x64>
    7348:	200b883a 	mov	r5,r4
    734c:	12000017 	ldw	r8,0(r2)
    7350:	29400104 	addi	r5,r5,4
    7354:	10800104 	addi	r2,r2,4
    7358:	2a3fff15 	stw	r8,-4(r5)
    735c:	10fffb36 	bltu	r2,r3,734c <__alt_data_end+0xfffe734c>
    7360:	1985c83a 	sub	r2,r3,r6
    7364:	10bffac4 	addi	r2,r2,-21
    7368:	1004d0ba 	srli	r2,r2,2
    736c:	10800044 	addi	r2,r2,1
    7370:	1085883a 	add	r2,r2,r2
    7374:	1085883a 	add	r2,r2,r2
    7378:	2089883a 	add	r4,r4,r2
    737c:	21c0032e 	bgeu	r4,r7,738c <__copybits+0x74>
    7380:	20000015 	stw	zero,0(r4)
    7384:	21000104 	addi	r4,r4,4
    7388:	21fffd36 	bltu	r4,r7,7380 <__alt_data_end+0xfffe7380>
    738c:	f800283a 	ret

00007390 <__any_on>:
    7390:	20c00417 	ldw	r3,16(r4)
    7394:	2805d17a 	srai	r2,r5,5
    7398:	21000504 	addi	r4,r4,20
    739c:	18800d0e 	bge	r3,r2,73d4 <__any_on+0x44>
    73a0:	18c7883a 	add	r3,r3,r3
    73a4:	18c7883a 	add	r3,r3,r3
    73a8:	20c7883a 	add	r3,r4,r3
    73ac:	20c0192e 	bgeu	r4,r3,7414 <__any_on+0x84>
    73b0:	18bfff17 	ldw	r2,-4(r3)
    73b4:	18ffff04 	addi	r3,r3,-4
    73b8:	1000041e 	bne	r2,zero,73cc <__any_on+0x3c>
    73bc:	20c0142e 	bgeu	r4,r3,7410 <__any_on+0x80>
    73c0:	18ffff04 	addi	r3,r3,-4
    73c4:	19400017 	ldw	r5,0(r3)
    73c8:	283ffc26 	beq	r5,zero,73bc <__alt_data_end+0xfffe73bc>
    73cc:	00800044 	movi	r2,1
    73d0:	f800283a 	ret
    73d4:	10c00a0e 	bge	r2,r3,7400 <__any_on+0x70>
    73d8:	1085883a 	add	r2,r2,r2
    73dc:	1085883a 	add	r2,r2,r2
    73e0:	294007cc 	andi	r5,r5,31
    73e4:	2087883a 	add	r3,r4,r2
    73e8:	283ff026 	beq	r5,zero,73ac <__alt_data_end+0xfffe73ac>
    73ec:	19800017 	ldw	r6,0(r3)
    73f0:	3144d83a 	srl	r2,r6,r5
    73f4:	114a983a 	sll	r5,r2,r5
    73f8:	317ff41e 	bne	r6,r5,73cc <__alt_data_end+0xfffe73cc>
    73fc:	003feb06 	br	73ac <__alt_data_end+0xfffe73ac>
    7400:	1085883a 	add	r2,r2,r2
    7404:	1085883a 	add	r2,r2,r2
    7408:	2087883a 	add	r3,r4,r2
    740c:	003fe706 	br	73ac <__alt_data_end+0xfffe73ac>
    7410:	f800283a 	ret
    7414:	0005883a 	mov	r2,zero
    7418:	f800283a 	ret

0000741c <_realloc_r>:
    741c:	defff604 	addi	sp,sp,-40
    7420:	dc800215 	stw	r18,8(sp)
    7424:	dfc00915 	stw	ra,36(sp)
    7428:	df000815 	stw	fp,32(sp)
    742c:	ddc00715 	stw	r23,28(sp)
    7430:	dd800615 	stw	r22,24(sp)
    7434:	dd400515 	stw	r21,20(sp)
    7438:	dd000415 	stw	r20,16(sp)
    743c:	dcc00315 	stw	r19,12(sp)
    7440:	dc400115 	stw	r17,4(sp)
    7444:	dc000015 	stw	r16,0(sp)
    7448:	3025883a 	mov	r18,r6
    744c:	2800b726 	beq	r5,zero,772c <_realloc_r+0x310>
    7450:	282b883a 	mov	r21,r5
    7454:	2029883a 	mov	r20,r4
    7458:	000d8980 	call	d898 <__malloc_lock>
    745c:	a8bfff17 	ldw	r2,-4(r21)
    7460:	043fff04 	movi	r16,-4
    7464:	90c002c4 	addi	r3,r18,11
    7468:	01000584 	movi	r4,22
    746c:	acfffe04 	addi	r19,r21,-8
    7470:	1420703a 	and	r16,r2,r16
    7474:	20c0332e 	bgeu	r4,r3,7544 <_realloc_r+0x128>
    7478:	047ffe04 	movi	r17,-8
    747c:	1c62703a 	and	r17,r3,r17
    7480:	8807883a 	mov	r3,r17
    7484:	88005816 	blt	r17,zero,75e8 <_realloc_r+0x1cc>
    7488:	8c805736 	bltu	r17,r18,75e8 <_realloc_r+0x1cc>
    748c:	80c0300e 	bge	r16,r3,7550 <_realloc_r+0x134>
    7490:	07000074 	movhi	fp,1
    7494:	e7008604 	addi	fp,fp,536
    7498:	e1c00217 	ldw	r7,8(fp)
    749c:	9c09883a 	add	r4,r19,r16
    74a0:	22000117 	ldw	r8,4(r4)
    74a4:	21c06326 	beq	r4,r7,7634 <_realloc_r+0x218>
    74a8:	017fff84 	movi	r5,-2
    74ac:	414a703a 	and	r5,r8,r5
    74b0:	214b883a 	add	r5,r4,r5
    74b4:	29800117 	ldw	r6,4(r5)
    74b8:	3180004c 	andi	r6,r6,1
    74bc:	30003f26 	beq	r6,zero,75bc <_realloc_r+0x1a0>
    74c0:	1080004c 	andi	r2,r2,1
    74c4:	10008326 	beq	r2,zero,76d4 <_realloc_r+0x2b8>
    74c8:	900b883a 	mov	r5,r18
    74cc:	a009883a 	mov	r4,r20
    74d0:	00056a80 	call	56a8 <_malloc_r>
    74d4:	1025883a 	mov	r18,r2
    74d8:	10011e26 	beq	r2,zero,7954 <_realloc_r+0x538>
    74dc:	a93fff17 	ldw	r4,-4(r21)
    74e0:	10fffe04 	addi	r3,r2,-8
    74e4:	00bfff84 	movi	r2,-2
    74e8:	2084703a 	and	r2,r4,r2
    74ec:	9885883a 	add	r2,r19,r2
    74f0:	1880ee26 	beq	r3,r2,78ac <_realloc_r+0x490>
    74f4:	81bfff04 	addi	r6,r16,-4
    74f8:	00800904 	movi	r2,36
    74fc:	1180b836 	bltu	r2,r6,77e0 <_realloc_r+0x3c4>
    7500:	00c004c4 	movi	r3,19
    7504:	19809636 	bltu	r3,r6,7760 <_realloc_r+0x344>
    7508:	9005883a 	mov	r2,r18
    750c:	a807883a 	mov	r3,r21
    7510:	19000017 	ldw	r4,0(r3)
    7514:	11000015 	stw	r4,0(r2)
    7518:	19000117 	ldw	r4,4(r3)
    751c:	11000115 	stw	r4,4(r2)
    7520:	18c00217 	ldw	r3,8(r3)
    7524:	10c00215 	stw	r3,8(r2)
    7528:	a80b883a 	mov	r5,r21
    752c:	a009883a 	mov	r4,r20
    7530:	0004ab00 	call	4ab0 <_free_r>
    7534:	a009883a 	mov	r4,r20
    7538:	000d8bc0 	call	d8bc <__malloc_unlock>
    753c:	9005883a 	mov	r2,r18
    7540:	00001206 	br	758c <_realloc_r+0x170>
    7544:	00c00404 	movi	r3,16
    7548:	1823883a 	mov	r17,r3
    754c:	003fce06 	br	7488 <__alt_data_end+0xfffe7488>
    7550:	a825883a 	mov	r18,r21
    7554:	8445c83a 	sub	r2,r16,r17
    7558:	00c003c4 	movi	r3,15
    755c:	18802636 	bltu	r3,r2,75f8 <_realloc_r+0x1dc>
    7560:	99800117 	ldw	r6,4(r19)
    7564:	9c07883a 	add	r3,r19,r16
    7568:	3180004c 	andi	r6,r6,1
    756c:	3420b03a 	or	r16,r6,r16
    7570:	9c000115 	stw	r16,4(r19)
    7574:	18800117 	ldw	r2,4(r3)
    7578:	10800054 	ori	r2,r2,1
    757c:	18800115 	stw	r2,4(r3)
    7580:	a009883a 	mov	r4,r20
    7584:	000d8bc0 	call	d8bc <__malloc_unlock>
    7588:	9005883a 	mov	r2,r18
    758c:	dfc00917 	ldw	ra,36(sp)
    7590:	df000817 	ldw	fp,32(sp)
    7594:	ddc00717 	ldw	r23,28(sp)
    7598:	dd800617 	ldw	r22,24(sp)
    759c:	dd400517 	ldw	r21,20(sp)
    75a0:	dd000417 	ldw	r20,16(sp)
    75a4:	dcc00317 	ldw	r19,12(sp)
    75a8:	dc800217 	ldw	r18,8(sp)
    75ac:	dc400117 	ldw	r17,4(sp)
    75b0:	dc000017 	ldw	r16,0(sp)
    75b4:	dec00a04 	addi	sp,sp,40
    75b8:	f800283a 	ret
    75bc:	017fff04 	movi	r5,-4
    75c0:	414a703a 	and	r5,r8,r5
    75c4:	814d883a 	add	r6,r16,r5
    75c8:	30c01f16 	blt	r6,r3,7648 <_realloc_r+0x22c>
    75cc:	20800317 	ldw	r2,12(r4)
    75d0:	20c00217 	ldw	r3,8(r4)
    75d4:	a825883a 	mov	r18,r21
    75d8:	3021883a 	mov	r16,r6
    75dc:	18800315 	stw	r2,12(r3)
    75e0:	10c00215 	stw	r3,8(r2)
    75e4:	003fdb06 	br	7554 <__alt_data_end+0xfffe7554>
    75e8:	00800304 	movi	r2,12
    75ec:	a0800015 	stw	r2,0(r20)
    75f0:	0005883a 	mov	r2,zero
    75f4:	003fe506 	br	758c <__alt_data_end+0xfffe758c>
    75f8:	98c00117 	ldw	r3,4(r19)
    75fc:	9c4b883a 	add	r5,r19,r17
    7600:	11000054 	ori	r4,r2,1
    7604:	18c0004c 	andi	r3,r3,1
    7608:	1c62b03a 	or	r17,r3,r17
    760c:	9c400115 	stw	r17,4(r19)
    7610:	29000115 	stw	r4,4(r5)
    7614:	2885883a 	add	r2,r5,r2
    7618:	10c00117 	ldw	r3,4(r2)
    761c:	29400204 	addi	r5,r5,8
    7620:	a009883a 	mov	r4,r20
    7624:	18c00054 	ori	r3,r3,1
    7628:	10c00115 	stw	r3,4(r2)
    762c:	0004ab00 	call	4ab0 <_free_r>
    7630:	003fd306 	br	7580 <__alt_data_end+0xfffe7580>
    7634:	017fff04 	movi	r5,-4
    7638:	414a703a 	and	r5,r8,r5
    763c:	89800404 	addi	r6,r17,16
    7640:	8151883a 	add	r8,r16,r5
    7644:	4180590e 	bge	r8,r6,77ac <_realloc_r+0x390>
    7648:	1080004c 	andi	r2,r2,1
    764c:	103f9e1e 	bne	r2,zero,74c8 <__alt_data_end+0xfffe74c8>
    7650:	adbffe17 	ldw	r22,-8(r21)
    7654:	00bfff04 	movi	r2,-4
    7658:	9dadc83a 	sub	r22,r19,r22
    765c:	b1800117 	ldw	r6,4(r22)
    7660:	3084703a 	and	r2,r6,r2
    7664:	20002026 	beq	r4,zero,76e8 <_realloc_r+0x2cc>
    7668:	80af883a 	add	r23,r16,r2
    766c:	b96f883a 	add	r23,r23,r5
    7670:	21c05f26 	beq	r4,r7,77f0 <_realloc_r+0x3d4>
    7674:	b8c01c16 	blt	r23,r3,76e8 <_realloc_r+0x2cc>
    7678:	20800317 	ldw	r2,12(r4)
    767c:	20c00217 	ldw	r3,8(r4)
    7680:	81bfff04 	addi	r6,r16,-4
    7684:	01000904 	movi	r4,36
    7688:	18800315 	stw	r2,12(r3)
    768c:	10c00215 	stw	r3,8(r2)
    7690:	b0c00217 	ldw	r3,8(r22)
    7694:	b0800317 	ldw	r2,12(r22)
    7698:	b4800204 	addi	r18,r22,8
    769c:	18800315 	stw	r2,12(r3)
    76a0:	10c00215 	stw	r3,8(r2)
    76a4:	21801b36 	bltu	r4,r6,7714 <_realloc_r+0x2f8>
    76a8:	008004c4 	movi	r2,19
    76ac:	1180352e 	bgeu	r2,r6,7784 <_realloc_r+0x368>
    76b0:	a8800017 	ldw	r2,0(r21)
    76b4:	b0800215 	stw	r2,8(r22)
    76b8:	a8800117 	ldw	r2,4(r21)
    76bc:	b0800315 	stw	r2,12(r22)
    76c0:	008006c4 	movi	r2,27
    76c4:	11807f36 	bltu	r2,r6,78c4 <_realloc_r+0x4a8>
    76c8:	b0800404 	addi	r2,r22,16
    76cc:	ad400204 	addi	r21,r21,8
    76d0:	00002d06 	br	7788 <_realloc_r+0x36c>
    76d4:	adbffe17 	ldw	r22,-8(r21)
    76d8:	00bfff04 	movi	r2,-4
    76dc:	9dadc83a 	sub	r22,r19,r22
    76e0:	b1000117 	ldw	r4,4(r22)
    76e4:	2084703a 	and	r2,r4,r2
    76e8:	b03f7726 	beq	r22,zero,74c8 <__alt_data_end+0xfffe74c8>
    76ec:	80af883a 	add	r23,r16,r2
    76f0:	b8ff7516 	blt	r23,r3,74c8 <__alt_data_end+0xfffe74c8>
    76f4:	b0800317 	ldw	r2,12(r22)
    76f8:	b0c00217 	ldw	r3,8(r22)
    76fc:	81bfff04 	addi	r6,r16,-4
    7700:	01000904 	movi	r4,36
    7704:	18800315 	stw	r2,12(r3)
    7708:	10c00215 	stw	r3,8(r2)
    770c:	b4800204 	addi	r18,r22,8
    7710:	21bfe52e 	bgeu	r4,r6,76a8 <__alt_data_end+0xfffe76a8>
    7714:	a80b883a 	mov	r5,r21
    7718:	9009883a 	mov	r4,r18
    771c:	00060e00 	call	60e0 <memmove>
    7720:	b821883a 	mov	r16,r23
    7724:	b027883a 	mov	r19,r22
    7728:	003f8a06 	br	7554 <__alt_data_end+0xfffe7554>
    772c:	300b883a 	mov	r5,r6
    7730:	dfc00917 	ldw	ra,36(sp)
    7734:	df000817 	ldw	fp,32(sp)
    7738:	ddc00717 	ldw	r23,28(sp)
    773c:	dd800617 	ldw	r22,24(sp)
    7740:	dd400517 	ldw	r21,20(sp)
    7744:	dd000417 	ldw	r20,16(sp)
    7748:	dcc00317 	ldw	r19,12(sp)
    774c:	dc800217 	ldw	r18,8(sp)
    7750:	dc400117 	ldw	r17,4(sp)
    7754:	dc000017 	ldw	r16,0(sp)
    7758:	dec00a04 	addi	sp,sp,40
    775c:	00056a81 	jmpi	56a8 <_malloc_r>
    7760:	a8c00017 	ldw	r3,0(r21)
    7764:	90c00015 	stw	r3,0(r18)
    7768:	a8c00117 	ldw	r3,4(r21)
    776c:	90c00115 	stw	r3,4(r18)
    7770:	00c006c4 	movi	r3,27
    7774:	19804536 	bltu	r3,r6,788c <_realloc_r+0x470>
    7778:	90800204 	addi	r2,r18,8
    777c:	a8c00204 	addi	r3,r21,8
    7780:	003f6306 	br	7510 <__alt_data_end+0xfffe7510>
    7784:	9005883a 	mov	r2,r18
    7788:	a8c00017 	ldw	r3,0(r21)
    778c:	b821883a 	mov	r16,r23
    7790:	b027883a 	mov	r19,r22
    7794:	10c00015 	stw	r3,0(r2)
    7798:	a8c00117 	ldw	r3,4(r21)
    779c:	10c00115 	stw	r3,4(r2)
    77a0:	a8c00217 	ldw	r3,8(r21)
    77a4:	10c00215 	stw	r3,8(r2)
    77a8:	003f6a06 	br	7554 <__alt_data_end+0xfffe7554>
    77ac:	9c67883a 	add	r19,r19,r17
    77b0:	4445c83a 	sub	r2,r8,r17
    77b4:	e4c00215 	stw	r19,8(fp)
    77b8:	10800054 	ori	r2,r2,1
    77bc:	98800115 	stw	r2,4(r19)
    77c0:	a8bfff17 	ldw	r2,-4(r21)
    77c4:	a009883a 	mov	r4,r20
    77c8:	1080004c 	andi	r2,r2,1
    77cc:	1462b03a 	or	r17,r2,r17
    77d0:	ac7fff15 	stw	r17,-4(r21)
    77d4:	000d8bc0 	call	d8bc <__malloc_unlock>
    77d8:	a805883a 	mov	r2,r21
    77dc:	003f6b06 	br	758c <__alt_data_end+0xfffe758c>
    77e0:	a80b883a 	mov	r5,r21
    77e4:	9009883a 	mov	r4,r18
    77e8:	00060e00 	call	60e0 <memmove>
    77ec:	003f4e06 	br	7528 <__alt_data_end+0xfffe7528>
    77f0:	89000404 	addi	r4,r17,16
    77f4:	b93fbc16 	blt	r23,r4,76e8 <__alt_data_end+0xfffe76e8>
    77f8:	b0800317 	ldw	r2,12(r22)
    77fc:	b0c00217 	ldw	r3,8(r22)
    7800:	81bfff04 	addi	r6,r16,-4
    7804:	01000904 	movi	r4,36
    7808:	18800315 	stw	r2,12(r3)
    780c:	10c00215 	stw	r3,8(r2)
    7810:	b4800204 	addi	r18,r22,8
    7814:	21804336 	bltu	r4,r6,7924 <_realloc_r+0x508>
    7818:	008004c4 	movi	r2,19
    781c:	11803f2e 	bgeu	r2,r6,791c <_realloc_r+0x500>
    7820:	a8800017 	ldw	r2,0(r21)
    7824:	b0800215 	stw	r2,8(r22)
    7828:	a8800117 	ldw	r2,4(r21)
    782c:	b0800315 	stw	r2,12(r22)
    7830:	008006c4 	movi	r2,27
    7834:	11803f36 	bltu	r2,r6,7934 <_realloc_r+0x518>
    7838:	b0800404 	addi	r2,r22,16
    783c:	ad400204 	addi	r21,r21,8
    7840:	a8c00017 	ldw	r3,0(r21)
    7844:	10c00015 	stw	r3,0(r2)
    7848:	a8c00117 	ldw	r3,4(r21)
    784c:	10c00115 	stw	r3,4(r2)
    7850:	a8c00217 	ldw	r3,8(r21)
    7854:	10c00215 	stw	r3,8(r2)
    7858:	b447883a 	add	r3,r22,r17
    785c:	bc45c83a 	sub	r2,r23,r17
    7860:	e0c00215 	stw	r3,8(fp)
    7864:	10800054 	ori	r2,r2,1
    7868:	18800115 	stw	r2,4(r3)
    786c:	b0800117 	ldw	r2,4(r22)
    7870:	a009883a 	mov	r4,r20
    7874:	1080004c 	andi	r2,r2,1
    7878:	1462b03a 	or	r17,r2,r17
    787c:	b4400115 	stw	r17,4(r22)
    7880:	000d8bc0 	call	d8bc <__malloc_unlock>
    7884:	9005883a 	mov	r2,r18
    7888:	003f4006 	br	758c <__alt_data_end+0xfffe758c>
    788c:	a8c00217 	ldw	r3,8(r21)
    7890:	90c00215 	stw	r3,8(r18)
    7894:	a8c00317 	ldw	r3,12(r21)
    7898:	90c00315 	stw	r3,12(r18)
    789c:	30801126 	beq	r6,r2,78e4 <_realloc_r+0x4c8>
    78a0:	90800404 	addi	r2,r18,16
    78a4:	a8c00404 	addi	r3,r21,16
    78a8:	003f1906 	br	7510 <__alt_data_end+0xfffe7510>
    78ac:	90ffff17 	ldw	r3,-4(r18)
    78b0:	00bfff04 	movi	r2,-4
    78b4:	a825883a 	mov	r18,r21
    78b8:	1884703a 	and	r2,r3,r2
    78bc:	80a1883a 	add	r16,r16,r2
    78c0:	003f2406 	br	7554 <__alt_data_end+0xfffe7554>
    78c4:	a8800217 	ldw	r2,8(r21)
    78c8:	b0800415 	stw	r2,16(r22)
    78cc:	a8800317 	ldw	r2,12(r21)
    78d0:	b0800515 	stw	r2,20(r22)
    78d4:	31000a26 	beq	r6,r4,7900 <_realloc_r+0x4e4>
    78d8:	b0800604 	addi	r2,r22,24
    78dc:	ad400404 	addi	r21,r21,16
    78e0:	003fa906 	br	7788 <__alt_data_end+0xfffe7788>
    78e4:	a9000417 	ldw	r4,16(r21)
    78e8:	90800604 	addi	r2,r18,24
    78ec:	a8c00604 	addi	r3,r21,24
    78f0:	91000415 	stw	r4,16(r18)
    78f4:	a9000517 	ldw	r4,20(r21)
    78f8:	91000515 	stw	r4,20(r18)
    78fc:	003f0406 	br	7510 <__alt_data_end+0xfffe7510>
    7900:	a8c00417 	ldw	r3,16(r21)
    7904:	ad400604 	addi	r21,r21,24
    7908:	b0800804 	addi	r2,r22,32
    790c:	b0c00615 	stw	r3,24(r22)
    7910:	a8ffff17 	ldw	r3,-4(r21)
    7914:	b0c00715 	stw	r3,28(r22)
    7918:	003f9b06 	br	7788 <__alt_data_end+0xfffe7788>
    791c:	9005883a 	mov	r2,r18
    7920:	003fc706 	br	7840 <__alt_data_end+0xfffe7840>
    7924:	a80b883a 	mov	r5,r21
    7928:	9009883a 	mov	r4,r18
    792c:	00060e00 	call	60e0 <memmove>
    7930:	003fc906 	br	7858 <__alt_data_end+0xfffe7858>
    7934:	a8800217 	ldw	r2,8(r21)
    7938:	b0800415 	stw	r2,16(r22)
    793c:	a8800317 	ldw	r2,12(r21)
    7940:	b0800515 	stw	r2,20(r22)
    7944:	31000726 	beq	r6,r4,7964 <_realloc_r+0x548>
    7948:	b0800604 	addi	r2,r22,24
    794c:	ad400404 	addi	r21,r21,16
    7950:	003fbb06 	br	7840 <__alt_data_end+0xfffe7840>
    7954:	a009883a 	mov	r4,r20
    7958:	000d8bc0 	call	d8bc <__malloc_unlock>
    795c:	0005883a 	mov	r2,zero
    7960:	003f0a06 	br	758c <__alt_data_end+0xfffe758c>
    7964:	a8c00417 	ldw	r3,16(r21)
    7968:	ad400604 	addi	r21,r21,24
    796c:	b0800804 	addi	r2,r22,32
    7970:	b0c00615 	stw	r3,24(r22)
    7974:	a8ffff17 	ldw	r3,-4(r21)
    7978:	b0c00715 	stw	r3,28(r22)
    797c:	003fb006 	br	7840 <__alt_data_end+0xfffe7840>

00007980 <__fpclassifyd>:
    7980:	00a00034 	movhi	r2,32768
    7984:	10bfffc4 	addi	r2,r2,-1
    7988:	2884703a 	and	r2,r5,r2
    798c:	10000726 	beq	r2,zero,79ac <__fpclassifyd+0x2c>
    7990:	00fffc34 	movhi	r3,65520
    7994:	019ff834 	movhi	r6,32736
    7998:	28c7883a 	add	r3,r5,r3
    799c:	31bfffc4 	addi	r6,r6,-1
    79a0:	30c00536 	bltu	r6,r3,79b8 <__fpclassifyd+0x38>
    79a4:	00800104 	movi	r2,4
    79a8:	f800283a 	ret
    79ac:	2000021e 	bne	r4,zero,79b8 <__fpclassifyd+0x38>
    79b0:	00800084 	movi	r2,2
    79b4:	f800283a 	ret
    79b8:	00dffc34 	movhi	r3,32752
    79bc:	019ff834 	movhi	r6,32736
    79c0:	28cb883a 	add	r5,r5,r3
    79c4:	31bfffc4 	addi	r6,r6,-1
    79c8:	317ff62e 	bgeu	r6,r5,79a4 <__alt_data_end+0xfffe79a4>
    79cc:	01400434 	movhi	r5,16
    79d0:	297fffc4 	addi	r5,r5,-1
    79d4:	28800236 	bltu	r5,r2,79e0 <__fpclassifyd+0x60>
    79d8:	008000c4 	movi	r2,3
    79dc:	f800283a 	ret
    79e0:	10c00226 	beq	r2,r3,79ec <__fpclassifyd+0x6c>
    79e4:	0005883a 	mov	r2,zero
    79e8:	f800283a 	ret
    79ec:	2005003a 	cmpeq	r2,r4,zero
    79f0:	f800283a 	ret

000079f4 <_sbrk_r>:
    79f4:	defffd04 	addi	sp,sp,-12
    79f8:	dc000015 	stw	r16,0(sp)
    79fc:	04000074 	movhi	r16,1
    7a00:	dc400115 	stw	r17,4(sp)
    7a04:	840cdb04 	addi	r16,r16,13164
    7a08:	2023883a 	mov	r17,r4
    7a0c:	2809883a 	mov	r4,r5
    7a10:	dfc00215 	stw	ra,8(sp)
    7a14:	80000015 	stw	zero,0(r16)
    7a18:	000daa40 	call	daa4 <sbrk>
    7a1c:	00ffffc4 	movi	r3,-1
    7a20:	10c00526 	beq	r2,r3,7a38 <_sbrk_r+0x44>
    7a24:	dfc00217 	ldw	ra,8(sp)
    7a28:	dc400117 	ldw	r17,4(sp)
    7a2c:	dc000017 	ldw	r16,0(sp)
    7a30:	dec00304 	addi	sp,sp,12
    7a34:	f800283a 	ret
    7a38:	80c00017 	ldw	r3,0(r16)
    7a3c:	183ff926 	beq	r3,zero,7a24 <__alt_data_end+0xfffe7a24>
    7a40:	88c00015 	stw	r3,0(r17)
    7a44:	003ff706 	br	7a24 <__alt_data_end+0xfffe7a24>

00007a48 <__sread>:
    7a48:	defffe04 	addi	sp,sp,-8
    7a4c:	dc000015 	stw	r16,0(sp)
    7a50:	2821883a 	mov	r16,r5
    7a54:	2940038f 	ldh	r5,14(r5)
    7a58:	dfc00115 	stw	ra,4(sp)
    7a5c:	00099040 	call	9904 <_read_r>
    7a60:	10000716 	blt	r2,zero,7a80 <__sread+0x38>
    7a64:	80c01417 	ldw	r3,80(r16)
    7a68:	1887883a 	add	r3,r3,r2
    7a6c:	80c01415 	stw	r3,80(r16)
    7a70:	dfc00117 	ldw	ra,4(sp)
    7a74:	dc000017 	ldw	r16,0(sp)
    7a78:	dec00204 	addi	sp,sp,8
    7a7c:	f800283a 	ret
    7a80:	80c0030b 	ldhu	r3,12(r16)
    7a84:	18fbffcc 	andi	r3,r3,61439
    7a88:	80c0030d 	sth	r3,12(r16)
    7a8c:	dfc00117 	ldw	ra,4(sp)
    7a90:	dc000017 	ldw	r16,0(sp)
    7a94:	dec00204 	addi	sp,sp,8
    7a98:	f800283a 	ret

00007a9c <__seofread>:
    7a9c:	0005883a 	mov	r2,zero
    7aa0:	f800283a 	ret

00007aa4 <__swrite>:
    7aa4:	2880030b 	ldhu	r2,12(r5)
    7aa8:	defffb04 	addi	sp,sp,-20
    7aac:	dcc00315 	stw	r19,12(sp)
    7ab0:	dc800215 	stw	r18,8(sp)
    7ab4:	dc400115 	stw	r17,4(sp)
    7ab8:	dc000015 	stw	r16,0(sp)
    7abc:	dfc00415 	stw	ra,16(sp)
    7ac0:	10c0400c 	andi	r3,r2,256
    7ac4:	2821883a 	mov	r16,r5
    7ac8:	2023883a 	mov	r17,r4
    7acc:	3025883a 	mov	r18,r6
    7ad0:	3827883a 	mov	r19,r7
    7ad4:	18000526 	beq	r3,zero,7aec <__swrite+0x48>
    7ad8:	2940038f 	ldh	r5,14(r5)
    7adc:	01c00084 	movi	r7,2
    7ae0:	000d883a 	mov	r6,zero
    7ae4:	00098a40 	call	98a4 <_lseek_r>
    7ae8:	8080030b 	ldhu	r2,12(r16)
    7aec:	8140038f 	ldh	r5,14(r16)
    7af0:	10bbffcc 	andi	r2,r2,61439
    7af4:	980f883a 	mov	r7,r19
    7af8:	900d883a 	mov	r6,r18
    7afc:	8809883a 	mov	r4,r17
    7b00:	8080030d 	sth	r2,12(r16)
    7b04:	dfc00417 	ldw	ra,16(sp)
    7b08:	dcc00317 	ldw	r19,12(sp)
    7b0c:	dc800217 	ldw	r18,8(sp)
    7b10:	dc400117 	ldw	r17,4(sp)
    7b14:	dc000017 	ldw	r16,0(sp)
    7b18:	dec00504 	addi	sp,sp,20
    7b1c:	00093581 	jmpi	9358 <_write_r>

00007b20 <__sseek>:
    7b20:	defffe04 	addi	sp,sp,-8
    7b24:	dc000015 	stw	r16,0(sp)
    7b28:	2821883a 	mov	r16,r5
    7b2c:	2940038f 	ldh	r5,14(r5)
    7b30:	dfc00115 	stw	ra,4(sp)
    7b34:	00098a40 	call	98a4 <_lseek_r>
    7b38:	00ffffc4 	movi	r3,-1
    7b3c:	10c00826 	beq	r2,r3,7b60 <__sseek+0x40>
    7b40:	80c0030b 	ldhu	r3,12(r16)
    7b44:	80801415 	stw	r2,80(r16)
    7b48:	18c40014 	ori	r3,r3,4096
    7b4c:	80c0030d 	sth	r3,12(r16)
    7b50:	dfc00117 	ldw	ra,4(sp)
    7b54:	dc000017 	ldw	r16,0(sp)
    7b58:	dec00204 	addi	sp,sp,8
    7b5c:	f800283a 	ret
    7b60:	80c0030b 	ldhu	r3,12(r16)
    7b64:	18fbffcc 	andi	r3,r3,61439
    7b68:	80c0030d 	sth	r3,12(r16)
    7b6c:	dfc00117 	ldw	ra,4(sp)
    7b70:	dc000017 	ldw	r16,0(sp)
    7b74:	dec00204 	addi	sp,sp,8
    7b78:	f800283a 	ret

00007b7c <__sclose>:
    7b7c:	2940038f 	ldh	r5,14(r5)
    7b80:	00093b81 	jmpi	93b8 <_close_r>

00007b84 <strcmp>:
    7b84:	2144b03a 	or	r2,r4,r5
    7b88:	108000cc 	andi	r2,r2,3
    7b8c:	1000171e 	bne	r2,zero,7bec <strcmp+0x68>
    7b90:	20800017 	ldw	r2,0(r4)
    7b94:	28c00017 	ldw	r3,0(r5)
    7b98:	10c0141e 	bne	r2,r3,7bec <strcmp+0x68>
    7b9c:	027fbff4 	movhi	r9,65279
    7ba0:	4a7fbfc4 	addi	r9,r9,-257
    7ba4:	0086303a 	nor	r3,zero,r2
    7ba8:	02202074 	movhi	r8,32897
    7bac:	1245883a 	add	r2,r2,r9
    7bb0:	42202004 	addi	r8,r8,-32640
    7bb4:	10c4703a 	and	r2,r2,r3
    7bb8:	1204703a 	and	r2,r2,r8
    7bbc:	10000226 	beq	r2,zero,7bc8 <strcmp+0x44>
    7bc0:	00002306 	br	7c50 <strcmp+0xcc>
    7bc4:	1000221e 	bne	r2,zero,7c50 <strcmp+0xcc>
    7bc8:	21000104 	addi	r4,r4,4
    7bcc:	20c00017 	ldw	r3,0(r4)
    7bd0:	29400104 	addi	r5,r5,4
    7bd4:	29800017 	ldw	r6,0(r5)
    7bd8:	1a4f883a 	add	r7,r3,r9
    7bdc:	00c4303a 	nor	r2,zero,r3
    7be0:	3884703a 	and	r2,r7,r2
    7be4:	1204703a 	and	r2,r2,r8
    7be8:	19bff626 	beq	r3,r6,7bc4 <__alt_data_end+0xfffe7bc4>
    7bec:	20800003 	ldbu	r2,0(r4)
    7bf0:	10c03fcc 	andi	r3,r2,255
    7bf4:	18c0201c 	xori	r3,r3,128
    7bf8:	18ffe004 	addi	r3,r3,-128
    7bfc:	18000c26 	beq	r3,zero,7c30 <strcmp+0xac>
    7c00:	29800007 	ldb	r6,0(r5)
    7c04:	19800326 	beq	r3,r6,7c14 <strcmp+0x90>
    7c08:	00001306 	br	7c58 <strcmp+0xd4>
    7c0c:	29800007 	ldb	r6,0(r5)
    7c10:	11800b1e 	bne	r2,r6,7c40 <strcmp+0xbc>
    7c14:	21000044 	addi	r4,r4,1
    7c18:	20c00003 	ldbu	r3,0(r4)
    7c1c:	29400044 	addi	r5,r5,1
    7c20:	18803fcc 	andi	r2,r3,255
    7c24:	1080201c 	xori	r2,r2,128
    7c28:	10bfe004 	addi	r2,r2,-128
    7c2c:	103ff71e 	bne	r2,zero,7c0c <__alt_data_end+0xfffe7c0c>
    7c30:	0007883a 	mov	r3,zero
    7c34:	28800003 	ldbu	r2,0(r5)
    7c38:	1885c83a 	sub	r2,r3,r2
    7c3c:	f800283a 	ret
    7c40:	28800003 	ldbu	r2,0(r5)
    7c44:	18c03fcc 	andi	r3,r3,255
    7c48:	1885c83a 	sub	r2,r3,r2
    7c4c:	f800283a 	ret
    7c50:	0005883a 	mov	r2,zero
    7c54:	f800283a 	ret
    7c58:	10c03fcc 	andi	r3,r2,255
    7c5c:	003ff506 	br	7c34 <__alt_data_end+0xfffe7c34>

00007c60 <__sprint_r.part.0>:
    7c60:	28801917 	ldw	r2,100(r5)
    7c64:	defff604 	addi	sp,sp,-40
    7c68:	dd400515 	stw	r21,20(sp)
    7c6c:	dfc00915 	stw	ra,36(sp)
    7c70:	df000815 	stw	fp,32(sp)
    7c74:	ddc00715 	stw	r23,28(sp)
    7c78:	dd800615 	stw	r22,24(sp)
    7c7c:	dd000415 	stw	r20,16(sp)
    7c80:	dcc00315 	stw	r19,12(sp)
    7c84:	dc800215 	stw	r18,8(sp)
    7c88:	dc400115 	stw	r17,4(sp)
    7c8c:	dc000015 	stw	r16,0(sp)
    7c90:	1088000c 	andi	r2,r2,8192
    7c94:	302b883a 	mov	r21,r6
    7c98:	10002e26 	beq	r2,zero,7d54 <__sprint_r.part.0+0xf4>
    7c9c:	30800217 	ldw	r2,8(r6)
    7ca0:	35800017 	ldw	r22,0(r6)
    7ca4:	10002926 	beq	r2,zero,7d4c <__sprint_r.part.0+0xec>
    7ca8:	2827883a 	mov	r19,r5
    7cac:	2029883a 	mov	r20,r4
    7cb0:	b5c00104 	addi	r23,r22,4
    7cb4:	04bfffc4 	movi	r18,-1
    7cb8:	bc400017 	ldw	r17,0(r23)
    7cbc:	b4000017 	ldw	r16,0(r22)
    7cc0:	0039883a 	mov	fp,zero
    7cc4:	8822d0ba 	srli	r17,r17,2
    7cc8:	8800031e 	bne	r17,zero,7cd8 <__sprint_r.part.0+0x78>
    7ccc:	00001806 	br	7d30 <__sprint_r.part.0+0xd0>
    7cd0:	84000104 	addi	r16,r16,4
    7cd4:	8f001526 	beq	r17,fp,7d2c <__sprint_r.part.0+0xcc>
    7cd8:	81400017 	ldw	r5,0(r16)
    7cdc:	980d883a 	mov	r6,r19
    7ce0:	a009883a 	mov	r4,r20
    7ce4:	00097500 	call	9750 <_fputwc_r>
    7ce8:	e7000044 	addi	fp,fp,1
    7cec:	14bff81e 	bne	r2,r18,7cd0 <__alt_data_end+0xfffe7cd0>
    7cf0:	9005883a 	mov	r2,r18
    7cf4:	a8000215 	stw	zero,8(r21)
    7cf8:	a8000115 	stw	zero,4(r21)
    7cfc:	dfc00917 	ldw	ra,36(sp)
    7d00:	df000817 	ldw	fp,32(sp)
    7d04:	ddc00717 	ldw	r23,28(sp)
    7d08:	dd800617 	ldw	r22,24(sp)
    7d0c:	dd400517 	ldw	r21,20(sp)
    7d10:	dd000417 	ldw	r20,16(sp)
    7d14:	dcc00317 	ldw	r19,12(sp)
    7d18:	dc800217 	ldw	r18,8(sp)
    7d1c:	dc400117 	ldw	r17,4(sp)
    7d20:	dc000017 	ldw	r16,0(sp)
    7d24:	dec00a04 	addi	sp,sp,40
    7d28:	f800283a 	ret
    7d2c:	a8800217 	ldw	r2,8(r21)
    7d30:	8c63883a 	add	r17,r17,r17
    7d34:	8c63883a 	add	r17,r17,r17
    7d38:	1445c83a 	sub	r2,r2,r17
    7d3c:	a8800215 	stw	r2,8(r21)
    7d40:	b5800204 	addi	r22,r22,8
    7d44:	bdc00204 	addi	r23,r23,8
    7d48:	103fdb1e 	bne	r2,zero,7cb8 <__alt_data_end+0xfffe7cb8>
    7d4c:	0005883a 	mov	r2,zero
    7d50:	003fe806 	br	7cf4 <__alt_data_end+0xfffe7cf4>
    7d54:	0004dc00 	call	4dc0 <__sfvwrite_r>
    7d58:	003fe606 	br	7cf4 <__alt_data_end+0xfffe7cf4>

00007d5c <__sprint_r>:
    7d5c:	30c00217 	ldw	r3,8(r6)
    7d60:	18000126 	beq	r3,zero,7d68 <__sprint_r+0xc>
    7d64:	0007c601 	jmpi	7c60 <__sprint_r.part.0>
    7d68:	30000115 	stw	zero,4(r6)
    7d6c:	0005883a 	mov	r2,zero
    7d70:	f800283a 	ret

00007d74 <___vfiprintf_internal_r>:
    7d74:	deffca04 	addi	sp,sp,-216
    7d78:	dd403115 	stw	r21,196(sp)
    7d7c:	dfc03515 	stw	ra,212(sp)
    7d80:	df003415 	stw	fp,208(sp)
    7d84:	ddc03315 	stw	r23,204(sp)
    7d88:	dd803215 	stw	r22,200(sp)
    7d8c:	dd003015 	stw	r20,192(sp)
    7d90:	dcc02f15 	stw	r19,188(sp)
    7d94:	dc802e15 	stw	r18,184(sp)
    7d98:	dc402d15 	stw	r17,180(sp)
    7d9c:	dc002c15 	stw	r16,176(sp)
    7da0:	d9002115 	stw	r4,132(sp)
    7da4:	d9402015 	stw	r5,128(sp)
    7da8:	d9c02215 	stw	r7,136(sp)
    7dac:	302b883a 	mov	r21,r6
    7db0:	20000226 	beq	r4,zero,7dbc <___vfiprintf_internal_r+0x48>
    7db4:	20800e17 	ldw	r2,56(r4)
    7db8:	1000cf26 	beq	r2,zero,80f8 <___vfiprintf_internal_r+0x384>
    7dbc:	d8c02017 	ldw	r3,128(sp)
    7dc0:	1880030b 	ldhu	r2,12(r3)
    7dc4:	10c8000c 	andi	r3,r2,8192
    7dc8:	1800071e 	bne	r3,zero,7de8 <___vfiprintf_internal_r+0x74>
    7dcc:	d9402017 	ldw	r5,128(sp)
    7dd0:	00f7ffc4 	movi	r3,-8193
    7dd4:	10880014 	ori	r2,r2,8192
    7dd8:	29001917 	ldw	r4,100(r5)
    7ddc:	2880030d 	sth	r2,12(r5)
    7de0:	20c6703a 	and	r3,r4,r3
    7de4:	28c01915 	stw	r3,100(r5)
    7de8:	10c0020c 	andi	r3,r2,8
    7dec:	1800a526 	beq	r3,zero,8084 <___vfiprintf_internal_r+0x310>
    7df0:	d9002017 	ldw	r4,128(sp)
    7df4:	20c00417 	ldw	r3,16(r4)
    7df8:	1800a226 	beq	r3,zero,8084 <___vfiprintf_internal_r+0x310>
    7dfc:	1080068c 	andi	r2,r2,26
    7e00:	00c00284 	movi	r3,10
    7e04:	10c0a826 	beq	r2,r3,80a8 <___vfiprintf_internal_r+0x334>
    7e08:	d9001a04 	addi	r4,sp,104
    7e0c:	d94019c4 	addi	r5,sp,103
    7e10:	04800074 	movhi	r18,1
    7e14:	2145c83a 	sub	r2,r4,r5
    7e18:	94bf0c04 	addi	r18,r18,-976
    7e1c:	d9001e15 	stw	r4,120(sp)
    7e20:	d9401f15 	stw	r5,124(sp)
    7e24:	dec01a15 	stw	sp,104(sp)
    7e28:	d8001c15 	stw	zero,112(sp)
    7e2c:	d8001b15 	stw	zero,108(sp)
    7e30:	d811883a 	mov	r8,sp
    7e34:	d8002615 	stw	zero,152(sp)
    7e38:	d8002415 	stw	zero,144(sp)
    7e3c:	d8802815 	stw	r2,160(sp)
    7e40:	a82d883a 	mov	r22,r21
    7e44:	b0800007 	ldb	r2,0(r22)
    7e48:	10040d26 	beq	r2,zero,8e80 <___vfiprintf_internal_r+0x110c>
    7e4c:	00c00944 	movi	r3,37
    7e50:	b029883a 	mov	r20,r22
    7e54:	10c0021e 	bne	r2,r3,7e60 <___vfiprintf_internal_r+0xec>
    7e58:	00001606 	br	7eb4 <___vfiprintf_internal_r+0x140>
    7e5c:	10c00326 	beq	r2,r3,7e6c <___vfiprintf_internal_r+0xf8>
    7e60:	a5000044 	addi	r20,r20,1
    7e64:	a0800007 	ldb	r2,0(r20)
    7e68:	103ffc1e 	bne	r2,zero,7e5c <__alt_data_end+0xfffe7e5c>
    7e6c:	a5a1c83a 	sub	r16,r20,r22
    7e70:	80001026 	beq	r16,zero,7eb4 <___vfiprintf_internal_r+0x140>
    7e74:	d8c01c17 	ldw	r3,112(sp)
    7e78:	d8801b17 	ldw	r2,108(sp)
    7e7c:	45800015 	stw	r22,0(r8)
    7e80:	80c7883a 	add	r3,r16,r3
    7e84:	10800044 	addi	r2,r2,1
    7e88:	44000115 	stw	r16,4(r8)
    7e8c:	d8c01c15 	stw	r3,112(sp)
    7e90:	d8801b15 	stw	r2,108(sp)
    7e94:	010001c4 	movi	r4,7
    7e98:	2080750e 	bge	r4,r2,8070 <___vfiprintf_internal_r+0x2fc>
    7e9c:	1803951e 	bne	r3,zero,8cf4 <___vfiprintf_internal_r+0xf80>
    7ea0:	d8c02417 	ldw	r3,144(sp)
    7ea4:	d8001b15 	stw	zero,108(sp)
    7ea8:	d811883a 	mov	r8,sp
    7eac:	1c07883a 	add	r3,r3,r16
    7eb0:	d8c02415 	stw	r3,144(sp)
    7eb4:	a0800007 	ldb	r2,0(r20)
    7eb8:	1002e026 	beq	r2,zero,8a3c <___vfiprintf_internal_r+0xcc8>
    7ebc:	a5800044 	addi	r22,r20,1
    7ec0:	a0c00047 	ldb	r3,1(r20)
    7ec4:	d8001d85 	stb	zero,118(sp)
    7ec8:	0027883a 	mov	r19,zero
    7ecc:	d8002305 	stb	zero,140(sp)
    7ed0:	043fffc4 	movi	r16,-1
    7ed4:	d8002515 	stw	zero,148(sp)
    7ed8:	0023883a 	mov	r17,zero
    7edc:	05001604 	movi	r20,88
    7ee0:	05400244 	movi	r21,9
    7ee4:	402f883a 	mov	r23,r8
    7ee8:	b5800044 	addi	r22,r22,1
    7eec:	18bff804 	addi	r2,r3,-32
    7ef0:	a0827736 	bltu	r20,r2,88d0 <___vfiprintf_internal_r+0xb5c>
    7ef4:	100490ba 	slli	r2,r2,2
    7ef8:	01000034 	movhi	r4,0
    7efc:	211fc304 	addi	r4,r4,32524
    7f00:	1105883a 	add	r2,r2,r4
    7f04:	10800017 	ldw	r2,0(r2)
    7f08:	1000683a 	jmp	r2
    7f0c:	000085d0 	cmplti	zero,zero,535
    7f10:	000088d0 	cmplti	zero,zero,547
    7f14:	000088d0 	cmplti	zero,zero,547
    7f18:	000085ec 	andhi	zero,zero,535
    7f1c:	000088d0 	cmplti	zero,zero,547
    7f20:	000088d0 	cmplti	zero,zero,547
    7f24:	000088d0 	cmplti	zero,zero,547
    7f28:	000088d0 	cmplti	zero,zero,547
    7f2c:	000088d0 	cmplti	zero,zero,547
    7f30:	000088d0 	cmplti	zero,zero,547
    7f34:	000087f4 	movhi	zero,543
    7f38:	00008818 	cmpnei	zero,zero,544
    7f3c:	000088d0 	cmplti	zero,zero,547
    7f40:	00008110 	cmplti	zero,zero,516
    7f44:	0000882c 	andhi	zero,zero,544
    7f48:	000088d0 	cmplti	zero,zero,547
    7f4c:	000085f8 	rdprs	zero,zero,535
    7f50:	00008604 	movi	zero,536
    7f54:	00008604 	movi	zero,536
    7f58:	00008604 	movi	zero,536
    7f5c:	00008604 	movi	zero,536
    7f60:	00008604 	movi	zero,536
    7f64:	00008604 	movi	zero,536
    7f68:	00008604 	movi	zero,536
    7f6c:	00008604 	movi	zero,536
    7f70:	00008604 	movi	zero,536
    7f74:	000088d0 	cmplti	zero,zero,547
    7f78:	000088d0 	cmplti	zero,zero,547
    7f7c:	000088d0 	cmplti	zero,zero,547
    7f80:	000088d0 	cmplti	zero,zero,547
    7f84:	000088d0 	cmplti	zero,zero,547
    7f88:	000088d0 	cmplti	zero,zero,547
    7f8c:	000088d0 	cmplti	zero,zero,547
    7f90:	000088d0 	cmplti	zero,zero,547
    7f94:	000088d0 	cmplti	zero,zero,547
    7f98:	000088d0 	cmplti	zero,zero,547
    7f9c:	00008644 	movi	zero,537
    7fa0:	000088d0 	cmplti	zero,zero,547
    7fa4:	000088d0 	cmplti	zero,zero,547
    7fa8:	000088d0 	cmplti	zero,zero,547
    7fac:	000088d0 	cmplti	zero,zero,547
    7fb0:	000088d0 	cmplti	zero,zero,547
    7fb4:	000088d0 	cmplti	zero,zero,547
    7fb8:	000088d0 	cmplti	zero,zero,547
    7fbc:	000088d0 	cmplti	zero,zero,547
    7fc0:	000088d0 	cmplti	zero,zero,547
    7fc4:	000088d0 	cmplti	zero,zero,547
    7fc8:	00008680 	call	868 <___vfprintf_internal_r+0x2ec>
    7fcc:	000088d0 	cmplti	zero,zero,547
    7fd0:	000088d0 	cmplti	zero,zero,547
    7fd4:	000088d0 	cmplti	zero,zero,547
    7fd8:	000088d0 	cmplti	zero,zero,547
    7fdc:	000088d0 	cmplti	zero,zero,547
    7fe0:	000086dc 	xori	zero,zero,539
    7fe4:	000088d0 	cmplti	zero,zero,547
    7fe8:	000088d0 	cmplti	zero,zero,547
    7fec:	00008750 	cmplti	zero,zero,541
    7ff0:	000088d0 	cmplti	zero,zero,547
    7ff4:	000088d0 	cmplti	zero,zero,547
    7ff8:	000088d0 	cmplti	zero,zero,547
    7ffc:	000088d0 	cmplti	zero,zero,547
    8000:	000088d0 	cmplti	zero,zero,547
    8004:	000088d0 	cmplti	zero,zero,547
    8008:	000088d0 	cmplti	zero,zero,547
    800c:	000088d0 	cmplti	zero,zero,547
    8010:	000088d0 	cmplti	zero,zero,547
    8014:	000088d0 	cmplti	zero,zero,547
    8018:	000084f8 	rdprs	zero,zero,531
    801c:	00008528 	cmpgeui	zero,zero,532
    8020:	000088d0 	cmplti	zero,zero,547
    8024:	000088d0 	cmplti	zero,zero,547
    8028:	000088d0 	cmplti	zero,zero,547
    802c:	00008878 	rdprs	zero,zero,545
    8030:	00008528 	cmpgeui	zero,zero,532
    8034:	000088d0 	cmplti	zero,zero,547
    8038:	000088d0 	cmplti	zero,zero,547
    803c:	000083d0 	cmplti	zero,zero,527
    8040:	000088d0 	cmplti	zero,zero,547
    8044:	000083e4 	muli	zero,zero,527
    8048:	0000841c 	xori	zero,zero,528
    804c:	0000811c 	xori	zero,zero,516
    8050:	000083c4 	movi	zero,527
    8054:	000088d0 	cmplti	zero,zero,547
    8058:	00008790 	cmplti	zero,zero,542
    805c:	000088d0 	cmplti	zero,zero,547
    8060:	000087dc 	xori	zero,zero,543
    8064:	000088d0 	cmplti	zero,zero,547
    8068:	000088d0 	cmplti	zero,zero,547
    806c:	000084a0 	cmpeqi	zero,zero,530
    8070:	42000204 	addi	r8,r8,8
    8074:	d8c02417 	ldw	r3,144(sp)
    8078:	1c07883a 	add	r3,r3,r16
    807c:	d8c02415 	stw	r3,144(sp)
    8080:	003f8c06 	br	7eb4 <__alt_data_end+0xfffe7eb4>
    8084:	d9402017 	ldw	r5,128(sp)
    8088:	d9002117 	ldw	r4,132(sp)
    808c:	00029300 	call	2930 <__swsetup_r>
    8090:	1003c11e 	bne	r2,zero,8f98 <___vfiprintf_internal_r+0x1224>
    8094:	d9402017 	ldw	r5,128(sp)
    8098:	00c00284 	movi	r3,10
    809c:	2880030b 	ldhu	r2,12(r5)
    80a0:	1080068c 	andi	r2,r2,26
    80a4:	10ff581e 	bne	r2,r3,7e08 <__alt_data_end+0xfffe7e08>
    80a8:	d8c02017 	ldw	r3,128(sp)
    80ac:	1880038f 	ldh	r2,14(r3)
    80b0:	103f5516 	blt	r2,zero,7e08 <__alt_data_end+0xfffe7e08>
    80b4:	d9c02217 	ldw	r7,136(sp)
    80b8:	d9002117 	ldw	r4,132(sp)
    80bc:	a80d883a 	mov	r6,r21
    80c0:	180b883a 	mov	r5,r3
    80c4:	000929c0 	call	929c <__sbprintf>
    80c8:	dfc03517 	ldw	ra,212(sp)
    80cc:	df003417 	ldw	fp,208(sp)
    80d0:	ddc03317 	ldw	r23,204(sp)
    80d4:	dd803217 	ldw	r22,200(sp)
    80d8:	dd403117 	ldw	r21,196(sp)
    80dc:	dd003017 	ldw	r20,192(sp)
    80e0:	dcc02f17 	ldw	r19,188(sp)
    80e4:	dc802e17 	ldw	r18,184(sp)
    80e8:	dc402d17 	ldw	r17,180(sp)
    80ec:	dc002c17 	ldw	r16,176(sp)
    80f0:	dec03604 	addi	sp,sp,216
    80f4:	f800283a 	ret
    80f8:	000493c0 	call	493c <__sinit>
    80fc:	003f2f06 	br	7dbc <__alt_data_end+0xfffe7dbc>
    8100:	d8c02517 	ldw	r3,148(sp)
    8104:	d8802215 	stw	r2,136(sp)
    8108:	00c7c83a 	sub	r3,zero,r3
    810c:	d8c02515 	stw	r3,148(sp)
    8110:	8c400114 	ori	r17,r17,4
    8114:	b0c00007 	ldb	r3,0(r22)
    8118:	003f7306 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    811c:	00800c04 	movi	r2,48
    8120:	d9402217 	ldw	r5,136(sp)
    8124:	d8801d05 	stb	r2,116(sp)
    8128:	00801e04 	movi	r2,120
    812c:	d8801d45 	stb	r2,117(sp)
    8130:	d8001d85 	stb	zero,118(sp)
    8134:	b811883a 	mov	r8,r23
    8138:	28c00104 	addi	r3,r5,4
    813c:	2cc00017 	ldw	r19,0(r5)
    8140:	0029883a 	mov	r20,zero
    8144:	88800094 	ori	r2,r17,2
    8148:	80032516 	blt	r16,zero,8de0 <___vfiprintf_internal_r+0x106c>
    814c:	00bfdfc4 	movi	r2,-129
    8150:	88a2703a 	and	r17,r17,r2
    8154:	d8c02215 	stw	r3,136(sp)
    8158:	8c400094 	ori	r17,r17,2
    815c:	98032a1e 	bne	r19,zero,8e08 <___vfiprintf_internal_r+0x1094>
    8160:	00800074 	movhi	r2,1
    8164:	10beab04 	addi	r2,r2,-1364
    8168:	d8802615 	stw	r2,152(sp)
    816c:	002b883a 	mov	r21,zero
    8170:	8001741e 	bne	r16,zero,8744 <___vfiprintf_internal_r+0x9d0>
    8174:	0021883a 	mov	r16,zero
    8178:	0029883a 	mov	r20,zero
    817c:	ddc01a04 	addi	r23,sp,104
    8180:	8027883a 	mov	r19,r16
    8184:	8500010e 	bge	r16,r20,818c <___vfiprintf_internal_r+0x418>
    8188:	a027883a 	mov	r19,r20
    818c:	ad403fcc 	andi	r21,r21,255
    8190:	ad40201c 	xori	r21,r21,128
    8194:	ad7fe004 	addi	r21,r21,-128
    8198:	a8000126 	beq	r21,zero,81a0 <___vfiprintf_internal_r+0x42c>
    819c:	9cc00044 	addi	r19,r19,1
    81a0:	89c0008c 	andi	r7,r17,2
    81a4:	38000126 	beq	r7,zero,81ac <___vfiprintf_internal_r+0x438>
    81a8:	9cc00084 	addi	r19,r19,2
    81ac:	88c0210c 	andi	r3,r17,132
    81b0:	1801dd1e 	bne	r3,zero,8928 <___vfiprintf_internal_r+0xbb4>
    81b4:	d9402517 	ldw	r5,148(sp)
    81b8:	2cebc83a 	sub	r21,r5,r19
    81bc:	0541da0e 	bge	zero,r21,8928 <___vfiprintf_internal_r+0xbb4>
    81c0:	07000404 	movi	fp,16
    81c4:	d8801c17 	ldw	r2,112(sp)
    81c8:	e543be0e 	bge	fp,r21,90c4 <___vfiprintf_internal_r+0x1350>
    81cc:	01400074 	movhi	r5,1
    81d0:	297f1004 	addi	r5,r5,-960
    81d4:	dc002715 	stw	r16,156(sp)
    81d8:	d9801b17 	ldw	r6,108(sp)
    81dc:	a821883a 	mov	r16,r21
    81e0:	d9402315 	stw	r5,140(sp)
    81e4:	028001c4 	movi	r10,7
    81e8:	d9c02915 	stw	r7,164(sp)
    81ec:	182b883a 	mov	r21,r3
    81f0:	00000506 	br	8208 <___vfiprintf_internal_r+0x494>
    81f4:	31000084 	addi	r4,r6,2
    81f8:	42000204 	addi	r8,r8,8
    81fc:	180d883a 	mov	r6,r3
    8200:	843ffc04 	addi	r16,r16,-16
    8204:	e4000f0e 	bge	fp,r16,8244 <___vfiprintf_internal_r+0x4d0>
    8208:	01000074 	movhi	r4,1
    820c:	10800404 	addi	r2,r2,16
    8210:	30c00044 	addi	r3,r6,1
    8214:	213f1004 	addi	r4,r4,-960
    8218:	41000015 	stw	r4,0(r8)
    821c:	47000115 	stw	fp,4(r8)
    8220:	d8801c15 	stw	r2,112(sp)
    8224:	d8c01b15 	stw	r3,108(sp)
    8228:	50fff20e 	bge	r10,r3,81f4 <__alt_data_end+0xfffe81f4>
    822c:	1001b21e 	bne	r2,zero,88f8 <___vfiprintf_internal_r+0xb84>
    8230:	843ffc04 	addi	r16,r16,-16
    8234:	000d883a 	mov	r6,zero
    8238:	01000044 	movi	r4,1
    823c:	d811883a 	mov	r8,sp
    8240:	e43ff116 	blt	fp,r16,8208 <__alt_data_end+0xfffe8208>
    8244:	a807883a 	mov	r3,r21
    8248:	d9c02917 	ldw	r7,164(sp)
    824c:	802b883a 	mov	r21,r16
    8250:	dc002717 	ldw	r16,156(sp)
    8254:	d9402317 	ldw	r5,140(sp)
    8258:	a885883a 	add	r2,r21,r2
    825c:	45400115 	stw	r21,4(r8)
    8260:	41400015 	stw	r5,0(r8)
    8264:	d8801c15 	stw	r2,112(sp)
    8268:	d9001b15 	stw	r4,108(sp)
    826c:	014001c4 	movi	r5,7
    8270:	29026216 	blt	r5,r4,8bfc <___vfiprintf_internal_r+0xe88>
    8274:	d9801d87 	ldb	r6,118(sp)
    8278:	42000204 	addi	r8,r8,8
    827c:	21400044 	addi	r5,r4,1
    8280:	3001ae1e 	bne	r6,zero,893c <___vfiprintf_internal_r+0xbc8>
    8284:	3801bb26 	beq	r7,zero,8974 <___vfiprintf_internal_r+0xc00>
    8288:	d9001d04 	addi	r4,sp,116
    828c:	10800084 	addi	r2,r2,2
    8290:	41000015 	stw	r4,0(r8)
    8294:	01000084 	movi	r4,2
    8298:	41000115 	stw	r4,4(r8)
    829c:	d8801c15 	stw	r2,112(sp)
    82a0:	d9401b15 	stw	r5,108(sp)
    82a4:	010001c4 	movi	r4,7
    82a8:	2142680e 	bge	r4,r5,8c4c <___vfiprintf_internal_r+0xed8>
    82ac:	1002b11e 	bne	r2,zero,8d74 <___vfiprintf_internal_r+0x1000>
    82b0:	01802004 	movi	r6,128
    82b4:	01400044 	movi	r5,1
    82b8:	0009883a 	mov	r4,zero
    82bc:	d811883a 	mov	r8,sp
    82c0:	1981ae1e 	bne	r3,r6,897c <___vfiprintf_internal_r+0xc08>
    82c4:	d8c02517 	ldw	r3,148(sp)
    82c8:	1cf9c83a 	sub	fp,r3,r19
    82cc:	0701ab0e 	bge	zero,fp,897c <___vfiprintf_internal_r+0xc08>
    82d0:	05400404 	movi	r21,16
    82d4:	af03a90e 	bge	r21,fp,917c <___vfiprintf_internal_r+0x1408>
    82d8:	01400074 	movhi	r5,1
    82dc:	297f0c04 	addi	r5,r5,-976
    82e0:	d9402315 	stw	r5,140(sp)
    82e4:	01c001c4 	movi	r7,7
    82e8:	00000506 	br	8300 <___vfiprintf_internal_r+0x58c>
    82ec:	21800084 	addi	r6,r4,2
    82f0:	42000204 	addi	r8,r8,8
    82f4:	1809883a 	mov	r4,r3
    82f8:	e73ffc04 	addi	fp,fp,-16
    82fc:	af000d0e 	bge	r21,fp,8334 <___vfiprintf_internal_r+0x5c0>
    8300:	10800404 	addi	r2,r2,16
    8304:	20c00044 	addi	r3,r4,1
    8308:	44800015 	stw	r18,0(r8)
    830c:	45400115 	stw	r21,4(r8)
    8310:	d8801c15 	stw	r2,112(sp)
    8314:	d8c01b15 	stw	r3,108(sp)
    8318:	38fff40e 	bge	r7,r3,82ec <__alt_data_end+0xfffe82ec>
    831c:	10022b1e 	bne	r2,zero,8bcc <___vfiprintf_internal_r+0xe58>
    8320:	e73ffc04 	addi	fp,fp,-16
    8324:	01800044 	movi	r6,1
    8328:	0009883a 	mov	r4,zero
    832c:	d811883a 	mov	r8,sp
    8330:	af3ff316 	blt	r21,fp,8300 <__alt_data_end+0xfffe8300>
    8334:	d8c02317 	ldw	r3,140(sp)
    8338:	1705883a 	add	r2,r2,fp
    833c:	47000115 	stw	fp,4(r8)
    8340:	40c00015 	stw	r3,0(r8)
    8344:	d8801c15 	stw	r2,112(sp)
    8348:	d9801b15 	stw	r6,108(sp)
    834c:	00c001c4 	movi	r3,7
    8350:	19829416 	blt	r3,r6,8da4 <___vfiprintf_internal_r+0x1030>
    8354:	8521c83a 	sub	r16,r16,r20
    8358:	42000204 	addi	r8,r8,8
    835c:	31400044 	addi	r5,r6,1
    8360:	3009883a 	mov	r4,r6
    8364:	04018716 	blt	zero,r16,8984 <___vfiprintf_internal_r+0xc10>
    8368:	a085883a 	add	r2,r20,r2
    836c:	45c00015 	stw	r23,0(r8)
    8370:	45000115 	stw	r20,4(r8)
    8374:	d8801c15 	stw	r2,112(sp)
    8378:	d9401b15 	stw	r5,108(sp)
    837c:	00c001c4 	movi	r3,7
    8380:	1941c20e 	bge	r3,r5,8a8c <___vfiprintf_internal_r+0xd18>
    8384:	1002531e 	bne	r2,zero,8cd4 <___vfiprintf_internal_r+0xf60>
    8388:	d8001b15 	stw	zero,108(sp)
    838c:	8c40010c 	andi	r17,r17,4
    8390:	88023226 	beq	r17,zero,8c5c <___vfiprintf_internal_r+0xee8>
    8394:	d9002517 	ldw	r4,148(sp)
    8398:	24e3c83a 	sub	r17,r4,r19
    839c:	04432916 	blt	zero,r17,9044 <___vfiprintf_internal_r+0x12d0>
    83a0:	d8802517 	ldw	r2,148(sp)
    83a4:	14c0010e 	bge	r2,r19,83ac <___vfiprintf_internal_r+0x638>
    83a8:	9805883a 	mov	r2,r19
    83ac:	d8c02417 	ldw	r3,144(sp)
    83b0:	1887883a 	add	r3,r3,r2
    83b4:	d8c02415 	stw	r3,144(sp)
    83b8:	d8001b15 	stw	zero,108(sp)
    83bc:	d811883a 	mov	r8,sp
    83c0:	003ea006 	br	7e44 <__alt_data_end+0xfffe7e44>
    83c4:	8c400814 	ori	r17,r17,32
    83c8:	b0c00007 	ldb	r3,0(r22)
    83cc:	003ec606 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    83d0:	b0c00007 	ldb	r3,0(r22)
    83d4:	00801b04 	movi	r2,108
    83d8:	18832026 	beq	r3,r2,905c <___vfiprintf_internal_r+0x12e8>
    83dc:	8c400414 	ori	r17,r17,16
    83e0:	003ec106 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    83e4:	9cc03fcc 	andi	r19,r19,255
    83e8:	b811883a 	mov	r8,r23
    83ec:	9803981e 	bne	r19,zero,9250 <___vfiprintf_internal_r+0x14dc>
    83f0:	8880080c 	andi	r2,r17,32
    83f4:	1002be26 	beq	r2,zero,8ef0 <___vfiprintf_internal_r+0x117c>
    83f8:	d9002217 	ldw	r4,136(sp)
    83fc:	d9402417 	ldw	r5,144(sp)
    8400:	20800017 	ldw	r2,0(r4)
    8404:	2807d7fa 	srai	r3,r5,31
    8408:	21000104 	addi	r4,r4,4
    840c:	d9002215 	stw	r4,136(sp)
    8410:	11400015 	stw	r5,0(r2)
    8414:	10c00115 	stw	r3,4(r2)
    8418:	003e8a06 	br	7e44 <__alt_data_end+0xfffe7e44>
    841c:	9cc03fcc 	andi	r19,r19,255
    8420:	b811883a 	mov	r8,r23
    8424:	9803871e 	bne	r19,zero,9244 <___vfiprintf_internal_r+0x14d0>
    8428:	8880080c 	andi	r2,r17,32
    842c:	10009a26 	beq	r2,zero,8698 <___vfiprintf_internal_r+0x924>
    8430:	d9002217 	ldw	r4,136(sp)
    8434:	d8001d85 	stb	zero,118(sp)
    8438:	20800204 	addi	r2,r4,8
    843c:	24c00017 	ldw	r19,0(r4)
    8440:	25000117 	ldw	r20,4(r4)
    8444:	8002a416 	blt	r16,zero,8ed8 <___vfiprintf_internal_r+0x1164>
    8448:	013fdfc4 	movi	r4,-129
    844c:	9d06b03a 	or	r3,r19,r20
    8450:	d8802215 	stw	r2,136(sp)
    8454:	8922703a 	and	r17,r17,r4
    8458:	18009b26 	beq	r3,zero,86c8 <___vfiprintf_internal_r+0x954>
    845c:	002b883a 	mov	r21,zero
    8460:	ddc01a04 	addi	r23,sp,104
    8464:	9806d0fa 	srli	r3,r19,3
    8468:	a008977a 	slli	r4,r20,29
    846c:	a028d0fa 	srli	r20,r20,3
    8470:	9cc001cc 	andi	r19,r19,7
    8474:	98800c04 	addi	r2,r19,48
    8478:	bdffffc4 	addi	r23,r23,-1
    847c:	20e6b03a 	or	r19,r4,r3
    8480:	b8800005 	stb	r2,0(r23)
    8484:	9d06b03a 	or	r3,r19,r20
    8488:	183ff61e 	bne	r3,zero,8464 <__alt_data_end+0xfffe8464>
    848c:	88c0004c 	andi	r3,r17,1
    8490:	18021f1e 	bne	r3,zero,8d10 <___vfiprintf_internal_r+0xf9c>
    8494:	d9401e17 	ldw	r5,120(sp)
    8498:	2de9c83a 	sub	r20,r5,r23
    849c:	003f3806 	br	8180 <__alt_data_end+0xfffe8180>
    84a0:	9cc03fcc 	andi	r19,r19,255
    84a4:	b811883a 	mov	r8,r23
    84a8:	98034f1e 	bne	r19,zero,91e8 <___vfiprintf_internal_r+0x1474>
    84ac:	00800074 	movhi	r2,1
    84b0:	10beab04 	addi	r2,r2,-1364
    84b4:	d8802615 	stw	r2,152(sp)
    84b8:	8880080c 	andi	r2,r17,32
    84bc:	1000ac26 	beq	r2,zero,8770 <___vfiprintf_internal_r+0x9fc>
    84c0:	d9002217 	ldw	r4,136(sp)
    84c4:	24c00017 	ldw	r19,0(r4)
    84c8:	25000117 	ldw	r20,4(r4)
    84cc:	21000204 	addi	r4,r4,8
    84d0:	d9002215 	stw	r4,136(sp)
    84d4:	8880004c 	andi	r2,r17,1
    84d8:	1001e726 	beq	r2,zero,8c78 <___vfiprintf_internal_r+0xf04>
    84dc:	9d04b03a 	or	r2,r19,r20
    84e0:	10025c1e 	bne	r2,zero,8e54 <___vfiprintf_internal_r+0x10e0>
    84e4:	d8001d85 	stb	zero,118(sp)
    84e8:	80024416 	blt	r16,zero,8dfc <___vfiprintf_internal_r+0x1088>
    84ec:	00bfdfc4 	movi	r2,-129
    84f0:	88a2703a 	and	r17,r17,r2
    84f4:	003f1d06 	br	816c <__alt_data_end+0xfffe816c>
    84f8:	d8c02217 	ldw	r3,136(sp)
    84fc:	04c00044 	movi	r19,1
    8500:	b811883a 	mov	r8,r23
    8504:	18800017 	ldw	r2,0(r3)
    8508:	18c00104 	addi	r3,r3,4
    850c:	d8001d85 	stb	zero,118(sp)
    8510:	d8801005 	stb	r2,64(sp)
    8514:	d8c02215 	stw	r3,136(sp)
    8518:	9829883a 	mov	r20,r19
    851c:	ddc01004 	addi	r23,sp,64
    8520:	0021883a 	mov	r16,zero
    8524:	003f1e06 	br	81a0 <__alt_data_end+0xfffe81a0>
    8528:	9cc03fcc 	andi	r19,r19,255
    852c:	b811883a 	mov	r8,r23
    8530:	9803331e 	bne	r19,zero,9200 <___vfiprintf_internal_r+0x148c>
    8534:	8880080c 	andi	r2,r17,32
    8538:	10004826 	beq	r2,zero,865c <___vfiprintf_internal_r+0x8e8>
    853c:	d9002217 	ldw	r4,136(sp)
    8540:	20800117 	ldw	r2,4(r4)
    8544:	24c00017 	ldw	r19,0(r4)
    8548:	21000204 	addi	r4,r4,8
    854c:	d9002215 	stw	r4,136(sp)
    8550:	1029883a 	mov	r20,r2
    8554:	10024c16 	blt	r2,zero,8e88 <___vfiprintf_internal_r+0x1114>
    8558:	dd401d83 	ldbu	r21,118(sp)
    855c:	80007116 	blt	r16,zero,8724 <___vfiprintf_internal_r+0x9b0>
    8560:	00ffdfc4 	movi	r3,-129
    8564:	9d04b03a 	or	r2,r19,r20
    8568:	88e2703a 	and	r17,r17,r3
    856c:	1000d126 	beq	r2,zero,88b4 <___vfiprintf_internal_r+0xb40>
    8570:	a0023526 	beq	r20,zero,8e48 <___vfiprintf_internal_r+0x10d4>
    8574:	ddc01a04 	addi	r23,sp,104
    8578:	4039883a 	mov	fp,r8
    857c:	9809883a 	mov	r4,r19
    8580:	a00b883a 	mov	r5,r20
    8584:	01800284 	movi	r6,10
    8588:	000f883a 	mov	r7,zero
    858c:	000a2a00 	call	a2a0 <__umoddi3>
    8590:	10800c04 	addi	r2,r2,48
    8594:	bdffffc4 	addi	r23,r23,-1
    8598:	9809883a 	mov	r4,r19
    859c:	a00b883a 	mov	r5,r20
    85a0:	b8800005 	stb	r2,0(r23)
    85a4:	01800284 	movi	r6,10
    85a8:	000f883a 	mov	r7,zero
    85ac:	0009ca40 	call	9ca4 <__udivdi3>
    85b0:	1027883a 	mov	r19,r2
    85b4:	10c4b03a 	or	r2,r2,r3
    85b8:	1829883a 	mov	r20,r3
    85bc:	103fef1e 	bne	r2,zero,857c <__alt_data_end+0xfffe857c>
    85c0:	d9001e17 	ldw	r4,120(sp)
    85c4:	e011883a 	mov	r8,fp
    85c8:	25e9c83a 	sub	r20,r4,r23
    85cc:	003eec06 	br	8180 <__alt_data_end+0xfffe8180>
    85d0:	d8802307 	ldb	r2,140(sp)
    85d4:	1002361e 	bne	r2,zero,8eb0 <___vfiprintf_internal_r+0x113c>
    85d8:	00c00804 	movi	r3,32
    85dc:	d8c02305 	stb	r3,140(sp)
    85e0:	04c00044 	movi	r19,1
    85e4:	b0c00007 	ldb	r3,0(r22)
    85e8:	003e3f06 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    85ec:	8c400054 	ori	r17,r17,1
    85f0:	b0c00007 	ldb	r3,0(r22)
    85f4:	003e3c06 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    85f8:	8c402014 	ori	r17,r17,128
    85fc:	b0c00007 	ldb	r3,0(r22)
    8600:	003e3906 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    8604:	dc002715 	stw	r16,156(sp)
    8608:	d8002515 	stw	zero,148(sp)
    860c:	1f3ff404 	addi	fp,r3,-48
    8610:	0009883a 	mov	r4,zero
    8614:	b021883a 	mov	r16,r22
    8618:	01400284 	movi	r5,10
    861c:	000aa180 	call	aa18 <__mulsi3>
    8620:	80c00007 	ldb	r3,0(r16)
    8624:	e089883a 	add	r4,fp,r2
    8628:	b5800044 	addi	r22,r22,1
    862c:	1f3ff404 	addi	fp,r3,-48
    8630:	b021883a 	mov	r16,r22
    8634:	af3ff82e 	bgeu	r21,fp,8618 <__alt_data_end+0xfffe8618>
    8638:	d9002515 	stw	r4,148(sp)
    863c:	dc002717 	ldw	r16,156(sp)
    8640:	003e2a06 	br	7eec <__alt_data_end+0xfffe7eec>
    8644:	9cc03fcc 	andi	r19,r19,255
    8648:	b811883a 	mov	r8,r23
    864c:	9802e91e 	bne	r19,zero,91f4 <___vfiprintf_internal_r+0x1480>
    8650:	8c400414 	ori	r17,r17,16
    8654:	8880080c 	andi	r2,r17,32
    8658:	103fb81e 	bne	r2,zero,853c <__alt_data_end+0xfffe853c>
    865c:	8880040c 	andi	r2,r17,16
    8660:	10022e26 	beq	r2,zero,8f1c <___vfiprintf_internal_r+0x11a8>
    8664:	d9402217 	ldw	r5,136(sp)
    8668:	2cc00017 	ldw	r19,0(r5)
    866c:	29400104 	addi	r5,r5,4
    8670:	d9402215 	stw	r5,136(sp)
    8674:	9829d7fa 	srai	r20,r19,31
    8678:	a005883a 	mov	r2,r20
    867c:	003fb506 	br	8554 <__alt_data_end+0xfffe8554>
    8680:	9cc03fcc 	andi	r19,r19,255
    8684:	b811883a 	mov	r8,r23
    8688:	9802fa1e 	bne	r19,zero,9274 <___vfiprintf_internal_r+0x1500>
    868c:	8c400414 	ori	r17,r17,16
    8690:	8880080c 	andi	r2,r17,32
    8694:	103f661e 	bne	r2,zero,8430 <__alt_data_end+0xfffe8430>
    8698:	8880040c 	andi	r2,r17,16
    869c:	10020626 	beq	r2,zero,8eb8 <___vfiprintf_internal_r+0x1144>
    86a0:	d9402217 	ldw	r5,136(sp)
    86a4:	d8001d85 	stb	zero,118(sp)
    86a8:	0029883a 	mov	r20,zero
    86ac:	28800104 	addi	r2,r5,4
    86b0:	2cc00017 	ldw	r19,0(r5)
    86b4:	80020816 	blt	r16,zero,8ed8 <___vfiprintf_internal_r+0x1164>
    86b8:	00ffdfc4 	movi	r3,-129
    86bc:	d8802215 	stw	r2,136(sp)
    86c0:	88e2703a 	and	r17,r17,r3
    86c4:	983f651e 	bne	r19,zero,845c <__alt_data_end+0xfffe845c>
    86c8:	002b883a 	mov	r21,zero
    86cc:	8002cf26 	beq	r16,zero,920c <___vfiprintf_internal_r+0x1498>
    86d0:	0027883a 	mov	r19,zero
    86d4:	0029883a 	mov	r20,zero
    86d8:	003f6106 	br	8460 <__alt_data_end+0xfffe8460>
    86dc:	9cc03fcc 	andi	r19,r19,255
    86e0:	b811883a 	mov	r8,r23
    86e4:	9802e01e 	bne	r19,zero,9268 <___vfiprintf_internal_r+0x14f4>
    86e8:	8c400414 	ori	r17,r17,16
    86ec:	8880080c 	andi	r2,r17,32
    86f0:	1000641e 	bne	r2,zero,8884 <___vfiprintf_internal_r+0xb10>
    86f4:	8880040c 	andi	r2,r17,16
    86f8:	1001c81e 	bne	r2,zero,8e1c <___vfiprintf_internal_r+0x10a8>
    86fc:	8880100c 	andi	r2,r17,64
    8700:	d8001d85 	stb	zero,118(sp)
    8704:	1002281e 	bne	r2,zero,8fa8 <___vfiprintf_internal_r+0x1234>
    8708:	d9002217 	ldw	r4,136(sp)
    870c:	0029883a 	mov	r20,zero
    8710:	20800104 	addi	r2,r4,4
    8714:	24c00017 	ldw	r19,0(r4)
    8718:	8001c60e 	bge	r16,zero,8e34 <___vfiprintf_internal_r+0x10c0>
    871c:	d8802215 	stw	r2,136(sp)
    8720:	002b883a 	mov	r21,zero
    8724:	9d04b03a 	or	r2,r19,r20
    8728:	103f911e 	bne	r2,zero,8570 <__alt_data_end+0xfffe8570>
    872c:	00800044 	movi	r2,1
    8730:	10803fcc 	andi	r2,r2,255
    8734:	00c00044 	movi	r3,1
    8738:	10c05f26 	beq	r2,r3,88b8 <___vfiprintf_internal_r+0xb44>
    873c:	00c00084 	movi	r3,2
    8740:	10ffe31e 	bne	r2,r3,86d0 <__alt_data_end+0xfffe86d0>
    8744:	0027883a 	mov	r19,zero
    8748:	0029883a 	mov	r20,zero
    874c:	00015106 	br	8c94 <___vfiprintf_internal_r+0xf20>
    8750:	9cc03fcc 	andi	r19,r19,255
    8754:	b811883a 	mov	r8,r23
    8758:	9802c01e 	bne	r19,zero,925c <___vfiprintf_internal_r+0x14e8>
    875c:	01400074 	movhi	r5,1
    8760:	297ea604 	addi	r5,r5,-1384
    8764:	d9402615 	stw	r5,152(sp)
    8768:	8880080c 	andi	r2,r17,32
    876c:	103f541e 	bne	r2,zero,84c0 <__alt_data_end+0xfffe84c0>
    8770:	8880040c 	andi	r2,r17,16
    8774:	1001f226 	beq	r2,zero,8f40 <___vfiprintf_internal_r+0x11cc>
    8778:	d9402217 	ldw	r5,136(sp)
    877c:	0029883a 	mov	r20,zero
    8780:	2cc00017 	ldw	r19,0(r5)
    8784:	29400104 	addi	r5,r5,4
    8788:	d9402215 	stw	r5,136(sp)
    878c:	003f5106 	br	84d4 <__alt_data_end+0xfffe84d4>
    8790:	d8c02217 	ldw	r3,136(sp)
    8794:	b811883a 	mov	r8,r23
    8798:	d8001d85 	stb	zero,118(sp)
    879c:	1dc00017 	ldw	r23,0(r3)
    87a0:	1f000104 	addi	fp,r3,4
    87a4:	b8025926 	beq	r23,zero,910c <___vfiprintf_internal_r+0x1398>
    87a8:	80023316 	blt	r16,zero,9078 <___vfiprintf_internal_r+0x1304>
    87ac:	800d883a 	mov	r6,r16
    87b0:	000b883a 	mov	r5,zero
    87b4:	b809883a 	mov	r4,r23
    87b8:	da002a15 	stw	r8,168(sp)
    87bc:	0005eb40 	call	5eb4 <memchr>
    87c0:	da002a17 	ldw	r8,168(sp)
    87c4:	10026826 	beq	r2,zero,9168 <___vfiprintf_internal_r+0x13f4>
    87c8:	15e9c83a 	sub	r20,r2,r23
    87cc:	dd401d83 	ldbu	r21,118(sp)
    87d0:	df002215 	stw	fp,136(sp)
    87d4:	0021883a 	mov	r16,zero
    87d8:	003e6906 	br	8180 <__alt_data_end+0xfffe8180>
    87dc:	9cc03fcc 	andi	r19,r19,255
    87e0:	b811883a 	mov	r8,r23
    87e4:	983fc126 	beq	r19,zero,86ec <__alt_data_end+0xfffe86ec>
    87e8:	d8c02303 	ldbu	r3,140(sp)
    87ec:	d8c01d85 	stb	r3,118(sp)
    87f0:	003fbe06 	br	86ec <__alt_data_end+0xfffe86ec>
    87f4:	d9002217 	ldw	r4,136(sp)
    87f8:	d9402217 	ldw	r5,136(sp)
    87fc:	21000017 	ldw	r4,0(r4)
    8800:	28800104 	addi	r2,r5,4
    8804:	d9002515 	stw	r4,148(sp)
    8808:	203e3d16 	blt	r4,zero,8100 <__alt_data_end+0xfffe8100>
    880c:	d8802215 	stw	r2,136(sp)
    8810:	b0c00007 	ldb	r3,0(r22)
    8814:	003db406 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    8818:	00c00ac4 	movi	r3,43
    881c:	d8c02305 	stb	r3,140(sp)
    8820:	04c00044 	movi	r19,1
    8824:	b0c00007 	ldb	r3,0(r22)
    8828:	003daf06 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    882c:	b0c00007 	ldb	r3,0(r22)
    8830:	01000a84 	movi	r4,42
    8834:	b4000044 	addi	r16,r22,1
    8838:	19025e26 	beq	r3,r4,91b4 <___vfiprintf_internal_r+0x1440>
    883c:	1f3ff404 	addi	fp,r3,-48
    8840:	0009883a 	mov	r4,zero
    8844:	af025236 	bltu	r21,fp,9190 <___vfiprintf_internal_r+0x141c>
    8848:	01400284 	movi	r5,10
    884c:	000aa180 	call	aa18 <__mulsi3>
    8850:	80c00007 	ldb	r3,0(r16)
    8854:	1709883a 	add	r4,r2,fp
    8858:	85800044 	addi	r22,r16,1
    885c:	1f3ff404 	addi	fp,r3,-48
    8860:	b021883a 	mov	r16,r22
    8864:	af3ff82e 	bgeu	r21,fp,8848 <__alt_data_end+0xfffe8848>
    8868:	2021883a 	mov	r16,r4
    886c:	203d9f0e 	bge	r4,zero,7eec <__alt_data_end+0xfffe7eec>
    8870:	043fffc4 	movi	r16,-1
    8874:	003d9d06 	br	7eec <__alt_data_end+0xfffe7eec>
    8878:	8c401014 	ori	r17,r17,64
    887c:	b0c00007 	ldb	r3,0(r22)
    8880:	003d9906 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    8884:	d9002217 	ldw	r4,136(sp)
    8888:	d8001d85 	stb	zero,118(sp)
    888c:	20c00204 	addi	r3,r4,8
    8890:	24c00017 	ldw	r19,0(r4)
    8894:	25000117 	ldw	r20,4(r4)
    8898:	8001e716 	blt	r16,zero,9038 <___vfiprintf_internal_r+0x12c4>
    889c:	013fdfc4 	movi	r4,-129
    88a0:	9d04b03a 	or	r2,r19,r20
    88a4:	d8c02215 	stw	r3,136(sp)
    88a8:	8922703a 	and	r17,r17,r4
    88ac:	002b883a 	mov	r21,zero
    88b0:	103f2f1e 	bne	r2,zero,8570 <__alt_data_end+0xfffe8570>
    88b4:	803e2f26 	beq	r16,zero,8174 <__alt_data_end+0xfffe8174>
    88b8:	0027883a 	mov	r19,zero
    88bc:	9cc00c04 	addi	r19,r19,48
    88c0:	dcc019c5 	stb	r19,103(sp)
    88c4:	dd002817 	ldw	r20,160(sp)
    88c8:	ddc019c4 	addi	r23,sp,103
    88cc:	003e2c06 	br	8180 <__alt_data_end+0xfffe8180>
    88d0:	9cc03fcc 	andi	r19,r19,255
    88d4:	b811883a 	mov	r8,r23
    88d8:	9802571e 	bne	r19,zero,9238 <___vfiprintf_internal_r+0x14c4>
    88dc:	18005726 	beq	r3,zero,8a3c <___vfiprintf_internal_r+0xcc8>
    88e0:	04c00044 	movi	r19,1
    88e4:	d8c01005 	stb	r3,64(sp)
    88e8:	d8001d85 	stb	zero,118(sp)
    88ec:	9829883a 	mov	r20,r19
    88f0:	ddc01004 	addi	r23,sp,64
    88f4:	003f0a06 	br	8520 <__alt_data_end+0xfffe8520>
    88f8:	d9402017 	ldw	r5,128(sp)
    88fc:	d9002117 	ldw	r4,132(sp)
    8900:	d9801a04 	addi	r6,sp,104
    8904:	da802a15 	stw	r10,168(sp)
    8908:	0007c600 	call	7c60 <__sprint_r.part.0>
    890c:	da802a17 	ldw	r10,168(sp)
    8910:	1000501e 	bne	r2,zero,8a54 <___vfiprintf_internal_r+0xce0>
    8914:	d9801b17 	ldw	r6,108(sp)
    8918:	d8801c17 	ldw	r2,112(sp)
    891c:	d811883a 	mov	r8,sp
    8920:	31000044 	addi	r4,r6,1
    8924:	003e3606 	br	8200 <__alt_data_end+0xfffe8200>
    8928:	d9001b17 	ldw	r4,108(sp)
    892c:	d8801c17 	ldw	r2,112(sp)
    8930:	21400044 	addi	r5,r4,1
    8934:	d9801d87 	ldb	r6,118(sp)
    8938:	303e5226 	beq	r6,zero,8284 <__alt_data_end+0xfffe8284>
    893c:	01800044 	movi	r6,1
    8940:	d9001d84 	addi	r4,sp,118
    8944:	1185883a 	add	r2,r2,r6
    8948:	41000015 	stw	r4,0(r8)
    894c:	41800115 	stw	r6,4(r8)
    8950:	d8801c15 	stw	r2,112(sp)
    8954:	d9401b15 	stw	r5,108(sp)
    8958:	010001c4 	movi	r4,7
    895c:	2140b00e 	bge	r4,r5,8c20 <___vfiprintf_internal_r+0xeac>
    8960:	1000f61e 	bne	r2,zero,8d3c <___vfiprintf_internal_r+0xfc8>
    8964:	3800b31e 	bne	r7,zero,8c34 <___vfiprintf_internal_r+0xec0>
    8968:	0009883a 	mov	r4,zero
    896c:	300b883a 	mov	r5,r6
    8970:	d811883a 	mov	r8,sp
    8974:	01802004 	movi	r6,128
    8978:	19be5226 	beq	r3,r6,82c4 <__alt_data_end+0xfffe82c4>
    897c:	8521c83a 	sub	r16,r16,r20
    8980:	043e790e 	bge	zero,r16,8368 <__alt_data_end+0xfffe8368>
    8984:	05400404 	movi	r21,16
    8988:	ac01b00e 	bge	r21,r16,904c <___vfiprintf_internal_r+0x12d8>
    898c:	01400074 	movhi	r5,1
    8990:	297f0c04 	addi	r5,r5,-976
    8994:	d9402315 	stw	r5,140(sp)
    8998:	070001c4 	movi	fp,7
    899c:	00000506 	br	89b4 <___vfiprintf_internal_r+0xc40>
    89a0:	21400084 	addi	r5,r4,2
    89a4:	42000204 	addi	r8,r8,8
    89a8:	1809883a 	mov	r4,r3
    89ac:	843ffc04 	addi	r16,r16,-16
    89b0:	ac000d0e 	bge	r21,r16,89e8 <___vfiprintf_internal_r+0xc74>
    89b4:	10800404 	addi	r2,r2,16
    89b8:	20c00044 	addi	r3,r4,1
    89bc:	44800015 	stw	r18,0(r8)
    89c0:	45400115 	stw	r21,4(r8)
    89c4:	d8801c15 	stw	r2,112(sp)
    89c8:	d8c01b15 	stw	r3,108(sp)
    89cc:	e0fff40e 	bge	fp,r3,89a0 <__alt_data_end+0xfffe89a0>
    89d0:	1000101e 	bne	r2,zero,8a14 <___vfiprintf_internal_r+0xca0>
    89d4:	843ffc04 	addi	r16,r16,-16
    89d8:	01400044 	movi	r5,1
    89dc:	0009883a 	mov	r4,zero
    89e0:	d811883a 	mov	r8,sp
    89e4:	ac3ff316 	blt	r21,r16,89b4 <__alt_data_end+0xfffe89b4>
    89e8:	d8c02317 	ldw	r3,140(sp)
    89ec:	1405883a 	add	r2,r2,r16
    89f0:	44000115 	stw	r16,4(r8)
    89f4:	40c00015 	stw	r3,0(r8)
    89f8:	d8801c15 	stw	r2,112(sp)
    89fc:	d9401b15 	stw	r5,108(sp)
    8a00:	00c001c4 	movi	r3,7
    8a04:	19401916 	blt	r3,r5,8a6c <___vfiprintf_internal_r+0xcf8>
    8a08:	42000204 	addi	r8,r8,8
    8a0c:	29400044 	addi	r5,r5,1
    8a10:	003e5506 	br	8368 <__alt_data_end+0xfffe8368>
    8a14:	d9402017 	ldw	r5,128(sp)
    8a18:	d9002117 	ldw	r4,132(sp)
    8a1c:	d9801a04 	addi	r6,sp,104
    8a20:	0007c600 	call	7c60 <__sprint_r.part.0>
    8a24:	10000b1e 	bne	r2,zero,8a54 <___vfiprintf_internal_r+0xce0>
    8a28:	d9001b17 	ldw	r4,108(sp)
    8a2c:	d8801c17 	ldw	r2,112(sp)
    8a30:	d811883a 	mov	r8,sp
    8a34:	21400044 	addi	r5,r4,1
    8a38:	003fdc06 	br	89ac <__alt_data_end+0xfffe89ac>
    8a3c:	d8801c17 	ldw	r2,112(sp)
    8a40:	10000426 	beq	r2,zero,8a54 <___vfiprintf_internal_r+0xce0>
    8a44:	d9402017 	ldw	r5,128(sp)
    8a48:	d9002117 	ldw	r4,132(sp)
    8a4c:	d9801a04 	addi	r6,sp,104
    8a50:	0007c600 	call	7c60 <__sprint_r.part.0>
    8a54:	d9402017 	ldw	r5,128(sp)
    8a58:	2880030b 	ldhu	r2,12(r5)
    8a5c:	1080100c 	andi	r2,r2,64
    8a60:	10014d1e 	bne	r2,zero,8f98 <___vfiprintf_internal_r+0x1224>
    8a64:	d8802417 	ldw	r2,144(sp)
    8a68:	003d9706 	br	80c8 <__alt_data_end+0xfffe80c8>
    8a6c:	1000d21e 	bne	r2,zero,8db8 <___vfiprintf_internal_r+0x1044>
    8a70:	00c00044 	movi	r3,1
    8a74:	a005883a 	mov	r2,r20
    8a78:	ddc00015 	stw	r23,0(sp)
    8a7c:	dd000115 	stw	r20,4(sp)
    8a80:	dd001c15 	stw	r20,112(sp)
    8a84:	d8c01b15 	stw	r3,108(sp)
    8a88:	d811883a 	mov	r8,sp
    8a8c:	42000204 	addi	r8,r8,8
    8a90:	8c40010c 	andi	r17,r17,4
    8a94:	88004026 	beq	r17,zero,8b98 <___vfiprintf_internal_r+0xe24>
    8a98:	d9002517 	ldw	r4,148(sp)
    8a9c:	24e3c83a 	sub	r17,r4,r19
    8aa0:	04403d0e 	bge	zero,r17,8b98 <___vfiprintf_internal_r+0xe24>
    8aa4:	04000404 	movi	r16,16
    8aa8:	8441a90e 	bge	r16,r17,9150 <___vfiprintf_internal_r+0x13dc>
    8aac:	00c00074 	movhi	r3,1
    8ab0:	18ff1004 	addi	r3,r3,-960
    8ab4:	d9001b17 	ldw	r4,108(sp)
    8ab8:	d8c02315 	stw	r3,140(sp)
    8abc:	050001c4 	movi	r20,7
    8ac0:	dd402117 	ldw	r21,132(sp)
    8ac4:	ddc02017 	ldw	r23,128(sp)
    8ac8:	00000506 	br	8ae0 <___vfiprintf_internal_r+0xd6c>
    8acc:	21400084 	addi	r5,r4,2
    8ad0:	42000204 	addi	r8,r8,8
    8ad4:	1809883a 	mov	r4,r3
    8ad8:	8c7ffc04 	addi	r17,r17,-16
    8adc:	84400f0e 	bge	r16,r17,8b1c <___vfiprintf_internal_r+0xda8>
    8ae0:	01400074 	movhi	r5,1
    8ae4:	10800404 	addi	r2,r2,16
    8ae8:	20c00044 	addi	r3,r4,1
    8aec:	297f1004 	addi	r5,r5,-960
    8af0:	41400015 	stw	r5,0(r8)
    8af4:	44000115 	stw	r16,4(r8)
    8af8:	d8801c15 	stw	r2,112(sp)
    8afc:	d8c01b15 	stw	r3,108(sp)
    8b00:	a0fff20e 	bge	r20,r3,8acc <__alt_data_end+0xfffe8acc>
    8b04:	1000141e 	bne	r2,zero,8b58 <___vfiprintf_internal_r+0xde4>
    8b08:	8c7ffc04 	addi	r17,r17,-16
    8b0c:	01400044 	movi	r5,1
    8b10:	0009883a 	mov	r4,zero
    8b14:	d811883a 	mov	r8,sp
    8b18:	847ff116 	blt	r16,r17,8ae0 <__alt_data_end+0xfffe8ae0>
    8b1c:	d8c02317 	ldw	r3,140(sp)
    8b20:	1445883a 	add	r2,r2,r17
    8b24:	44400115 	stw	r17,4(r8)
    8b28:	40c00015 	stw	r3,0(r8)
    8b2c:	d8801c15 	stw	r2,112(sp)
    8b30:	d9401b15 	stw	r5,108(sp)
    8b34:	00c001c4 	movi	r3,7
    8b38:	1940170e 	bge	r3,r5,8b98 <___vfiprintf_internal_r+0xe24>
    8b3c:	1000101e 	bne	r2,zero,8b80 <___vfiprintf_internal_r+0xe0c>
    8b40:	d8802517 	ldw	r2,148(sp)
    8b44:	14c11616 	blt	r2,r19,8fa0 <___vfiprintf_internal_r+0x122c>
    8b48:	d9002417 	ldw	r4,144(sp)
    8b4c:	2089883a 	add	r4,r4,r2
    8b50:	d9002415 	stw	r4,144(sp)
    8b54:	003e1806 	br	83b8 <__alt_data_end+0xfffe83b8>
    8b58:	d9801a04 	addi	r6,sp,104
    8b5c:	b80b883a 	mov	r5,r23
    8b60:	a809883a 	mov	r4,r21
    8b64:	0007c600 	call	7c60 <__sprint_r.part.0>
    8b68:	103fba1e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8b6c:	d9001b17 	ldw	r4,108(sp)
    8b70:	d8801c17 	ldw	r2,112(sp)
    8b74:	d811883a 	mov	r8,sp
    8b78:	21400044 	addi	r5,r4,1
    8b7c:	003fd606 	br	8ad8 <__alt_data_end+0xfffe8ad8>
    8b80:	d9402017 	ldw	r5,128(sp)
    8b84:	d9002117 	ldw	r4,132(sp)
    8b88:	d9801a04 	addi	r6,sp,104
    8b8c:	0007c600 	call	7c60 <__sprint_r.part.0>
    8b90:	103fb01e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8b94:	d8801c17 	ldw	r2,112(sp)
    8b98:	d8c02517 	ldw	r3,148(sp)
    8b9c:	1cc0010e 	bge	r3,r19,8ba4 <___vfiprintf_internal_r+0xe30>
    8ba0:	9807883a 	mov	r3,r19
    8ba4:	d9002417 	ldw	r4,144(sp)
    8ba8:	20c9883a 	add	r4,r4,r3
    8bac:	d9002415 	stw	r4,144(sp)
    8bb0:	103e0126 	beq	r2,zero,83b8 <__alt_data_end+0xfffe83b8>
    8bb4:	d9402017 	ldw	r5,128(sp)
    8bb8:	d9002117 	ldw	r4,132(sp)
    8bbc:	d9801a04 	addi	r6,sp,104
    8bc0:	0007c600 	call	7c60 <__sprint_r.part.0>
    8bc4:	103dfc26 	beq	r2,zero,83b8 <__alt_data_end+0xfffe83b8>
    8bc8:	003fa206 	br	8a54 <__alt_data_end+0xfffe8a54>
    8bcc:	d9402017 	ldw	r5,128(sp)
    8bd0:	d9002117 	ldw	r4,132(sp)
    8bd4:	d9801a04 	addi	r6,sp,104
    8bd8:	d9c02b15 	stw	r7,172(sp)
    8bdc:	0007c600 	call	7c60 <__sprint_r.part.0>
    8be0:	d9c02b17 	ldw	r7,172(sp)
    8be4:	103f9b1e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8be8:	d9001b17 	ldw	r4,108(sp)
    8bec:	d8801c17 	ldw	r2,112(sp)
    8bf0:	d811883a 	mov	r8,sp
    8bf4:	21800044 	addi	r6,r4,1
    8bf8:	003dbf06 	br	82f8 <__alt_data_end+0xfffe82f8>
    8bfc:	1000d81e 	bne	r2,zero,8f60 <___vfiprintf_internal_r+0x11ec>
    8c00:	d9001d87 	ldb	r4,118(sp)
    8c04:	20000a26 	beq	r4,zero,8c30 <___vfiprintf_internal_r+0xebc>
    8c08:	00800044 	movi	r2,1
    8c0c:	d9001d84 	addi	r4,sp,118
    8c10:	100b883a 	mov	r5,r2
    8c14:	d9000015 	stw	r4,0(sp)
    8c18:	d8800115 	stw	r2,4(sp)
    8c1c:	d811883a 	mov	r8,sp
    8c20:	2809883a 	mov	r4,r5
    8c24:	42000204 	addi	r8,r8,8
    8c28:	29400044 	addi	r5,r5,1
    8c2c:	003d9506 	br	8284 <__alt_data_end+0xfffe8284>
    8c30:	3800fd26 	beq	r7,zero,9028 <___vfiprintf_internal_r+0x12b4>
    8c34:	00800084 	movi	r2,2
    8c38:	d9001d04 	addi	r4,sp,116
    8c3c:	d9000015 	stw	r4,0(sp)
    8c40:	d8800115 	stw	r2,4(sp)
    8c44:	01400044 	movi	r5,1
    8c48:	d811883a 	mov	r8,sp
    8c4c:	2809883a 	mov	r4,r5
    8c50:	42000204 	addi	r8,r8,8
    8c54:	29400044 	addi	r5,r5,1
    8c58:	003f4606 	br	8974 <__alt_data_end+0xfffe8974>
    8c5c:	d8802517 	ldw	r2,148(sp)
    8c60:	14c0010e 	bge	r2,r19,8c68 <___vfiprintf_internal_r+0xef4>
    8c64:	9805883a 	mov	r2,r19
    8c68:	d9402417 	ldw	r5,144(sp)
    8c6c:	288b883a 	add	r5,r5,r2
    8c70:	d9402415 	stw	r5,144(sp)
    8c74:	003dd006 	br	83b8 <__alt_data_end+0xfffe83b8>
    8c78:	d8001d85 	stb	zero,118(sp)
    8c7c:	80005d16 	blt	r16,zero,8df4 <___vfiprintf_internal_r+0x1080>
    8c80:	00ffdfc4 	movi	r3,-129
    8c84:	9d04b03a 	or	r2,r19,r20
    8c88:	88e2703a 	and	r17,r17,r3
    8c8c:	103d3726 	beq	r2,zero,816c <__alt_data_end+0xfffe816c>
    8c90:	002b883a 	mov	r21,zero
    8c94:	d9002617 	ldw	r4,152(sp)
    8c98:	ddc01a04 	addi	r23,sp,104
    8c9c:	988003cc 	andi	r2,r19,15
    8ca0:	a006973a 	slli	r3,r20,28
    8ca4:	2085883a 	add	r2,r4,r2
    8ca8:	9826d13a 	srli	r19,r19,4
    8cac:	10800003 	ldbu	r2,0(r2)
    8cb0:	a028d13a 	srli	r20,r20,4
    8cb4:	bdffffc4 	addi	r23,r23,-1
    8cb8:	1ce6b03a 	or	r19,r3,r19
    8cbc:	b8800005 	stb	r2,0(r23)
    8cc0:	9d04b03a 	or	r2,r19,r20
    8cc4:	103ff51e 	bne	r2,zero,8c9c <__alt_data_end+0xfffe8c9c>
    8cc8:	d8801e17 	ldw	r2,120(sp)
    8ccc:	15e9c83a 	sub	r20,r2,r23
    8cd0:	003d2b06 	br	8180 <__alt_data_end+0xfffe8180>
    8cd4:	d9402017 	ldw	r5,128(sp)
    8cd8:	d9002117 	ldw	r4,132(sp)
    8cdc:	d9801a04 	addi	r6,sp,104
    8ce0:	0007c600 	call	7c60 <__sprint_r.part.0>
    8ce4:	103f5b1e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8ce8:	d8801c17 	ldw	r2,112(sp)
    8cec:	d811883a 	mov	r8,sp
    8cf0:	003f6706 	br	8a90 <__alt_data_end+0xfffe8a90>
    8cf4:	d9402017 	ldw	r5,128(sp)
    8cf8:	d9002117 	ldw	r4,132(sp)
    8cfc:	d9801a04 	addi	r6,sp,104
    8d00:	0007c600 	call	7c60 <__sprint_r.part.0>
    8d04:	103f531e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8d08:	d811883a 	mov	r8,sp
    8d0c:	003cd906 	br	8074 <__alt_data_end+0xfffe8074>
    8d10:	10803fcc 	andi	r2,r2,255
    8d14:	1080201c 	xori	r2,r2,128
    8d18:	10bfe004 	addi	r2,r2,-128
    8d1c:	00c00c04 	movi	r3,48
    8d20:	10ffe926 	beq	r2,r3,8cc8 <__alt_data_end+0xfffe8cc8>
    8d24:	b8ffffc5 	stb	r3,-1(r23)
    8d28:	d8c01e17 	ldw	r3,120(sp)
    8d2c:	b8bfffc4 	addi	r2,r23,-1
    8d30:	102f883a 	mov	r23,r2
    8d34:	18a9c83a 	sub	r20,r3,r2
    8d38:	003d1106 	br	8180 <__alt_data_end+0xfffe8180>
    8d3c:	d9402017 	ldw	r5,128(sp)
    8d40:	d9002117 	ldw	r4,132(sp)
    8d44:	d9801a04 	addi	r6,sp,104
    8d48:	d8c02a15 	stw	r3,168(sp)
    8d4c:	d9c02b15 	stw	r7,172(sp)
    8d50:	0007c600 	call	7c60 <__sprint_r.part.0>
    8d54:	d8c02a17 	ldw	r3,168(sp)
    8d58:	d9c02b17 	ldw	r7,172(sp)
    8d5c:	103f3d1e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8d60:	d9001b17 	ldw	r4,108(sp)
    8d64:	d8801c17 	ldw	r2,112(sp)
    8d68:	d811883a 	mov	r8,sp
    8d6c:	21400044 	addi	r5,r4,1
    8d70:	003d4406 	br	8284 <__alt_data_end+0xfffe8284>
    8d74:	d9402017 	ldw	r5,128(sp)
    8d78:	d9002117 	ldw	r4,132(sp)
    8d7c:	d9801a04 	addi	r6,sp,104
    8d80:	d8c02a15 	stw	r3,168(sp)
    8d84:	0007c600 	call	7c60 <__sprint_r.part.0>
    8d88:	d8c02a17 	ldw	r3,168(sp)
    8d8c:	103f311e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8d90:	d9001b17 	ldw	r4,108(sp)
    8d94:	d8801c17 	ldw	r2,112(sp)
    8d98:	d811883a 	mov	r8,sp
    8d9c:	21400044 	addi	r5,r4,1
    8da0:	003ef406 	br	8974 <__alt_data_end+0xfffe8974>
    8da4:	1000bd1e 	bne	r2,zero,909c <___vfiprintf_internal_r+0x1328>
    8da8:	01400044 	movi	r5,1
    8dac:	0009883a 	mov	r4,zero
    8db0:	d811883a 	mov	r8,sp
    8db4:	003ef106 	br	897c <__alt_data_end+0xfffe897c>
    8db8:	d9402017 	ldw	r5,128(sp)
    8dbc:	d9002117 	ldw	r4,132(sp)
    8dc0:	d9801a04 	addi	r6,sp,104
    8dc4:	0007c600 	call	7c60 <__sprint_r.part.0>
    8dc8:	103f221e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8dcc:	d9401b17 	ldw	r5,108(sp)
    8dd0:	d8801c17 	ldw	r2,112(sp)
    8dd4:	d811883a 	mov	r8,sp
    8dd8:	29400044 	addi	r5,r5,1
    8ddc:	003d6206 	br	8368 <__alt_data_end+0xfffe8368>
    8de0:	01400074 	movhi	r5,1
    8de4:	297eab04 	addi	r5,r5,-1364
    8de8:	d9402615 	stw	r5,152(sp)
    8dec:	d8c02215 	stw	r3,136(sp)
    8df0:	1023883a 	mov	r17,r2
    8df4:	9d04b03a 	or	r2,r19,r20
    8df8:	103fa51e 	bne	r2,zero,8c90 <__alt_data_end+0xfffe8c90>
    8dfc:	002b883a 	mov	r21,zero
    8e00:	00800084 	movi	r2,2
    8e04:	003e4a06 	br	8730 <__alt_data_end+0xfffe8730>
    8e08:	01400074 	movhi	r5,1
    8e0c:	297eab04 	addi	r5,r5,-1364
    8e10:	002b883a 	mov	r21,zero
    8e14:	d9402615 	stw	r5,152(sp)
    8e18:	003f9e06 	br	8c94 <__alt_data_end+0xfffe8c94>
    8e1c:	d9402217 	ldw	r5,136(sp)
    8e20:	d8001d85 	stb	zero,118(sp)
    8e24:	0029883a 	mov	r20,zero
    8e28:	28800104 	addi	r2,r5,4
    8e2c:	2cc00017 	ldw	r19,0(r5)
    8e30:	803e3a16 	blt	r16,zero,871c <__alt_data_end+0xfffe871c>
    8e34:	00ffdfc4 	movi	r3,-129
    8e38:	d8802215 	stw	r2,136(sp)
    8e3c:	88e2703a 	and	r17,r17,r3
    8e40:	002b883a 	mov	r21,zero
    8e44:	983e9b26 	beq	r19,zero,88b4 <__alt_data_end+0xfffe88b4>
    8e48:	00800244 	movi	r2,9
    8e4c:	14fdc936 	bltu	r2,r19,8574 <__alt_data_end+0xfffe8574>
    8e50:	003e9a06 	br	88bc <__alt_data_end+0xfffe88bc>
    8e54:	00800c04 	movi	r2,48
    8e58:	d8c01d45 	stb	r3,117(sp)
    8e5c:	d8801d05 	stb	r2,116(sp)
    8e60:	d8001d85 	stb	zero,118(sp)
    8e64:	88c00094 	ori	r3,r17,2
    8e68:	80009c16 	blt	r16,zero,90dc <___vfiprintf_internal_r+0x1368>
    8e6c:	00bfdfc4 	movi	r2,-129
    8e70:	88a2703a 	and	r17,r17,r2
    8e74:	8c400094 	ori	r17,r17,2
    8e78:	002b883a 	mov	r21,zero
    8e7c:	003f8506 	br	8c94 <__alt_data_end+0xfffe8c94>
    8e80:	b029883a 	mov	r20,r22
    8e84:	003c0b06 	br	7eb4 <__alt_data_end+0xfffe7eb4>
    8e88:	04e7c83a 	sub	r19,zero,r19
    8e8c:	05400b44 	movi	r21,45
    8e90:	9804c03a 	cmpne	r2,r19,zero
    8e94:	0529c83a 	sub	r20,zero,r20
    8e98:	dd401d85 	stb	r21,118(sp)
    8e9c:	a0a9c83a 	sub	r20,r20,r2
    8ea0:	80009716 	blt	r16,zero,9100 <___vfiprintf_internal_r+0x138c>
    8ea4:	00bfdfc4 	movi	r2,-129
    8ea8:	88a2703a 	and	r17,r17,r2
    8eac:	003db006 	br	8570 <__alt_data_end+0xfffe8570>
    8eb0:	b0c00007 	ldb	r3,0(r22)
    8eb4:	003c0c06 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    8eb8:	8880100c 	andi	r2,r17,64
    8ebc:	d8001d85 	stb	zero,118(sp)
    8ec0:	1000461e 	bne	r2,zero,8fdc <___vfiprintf_internal_r+0x1268>
    8ec4:	d9002217 	ldw	r4,136(sp)
    8ec8:	0029883a 	mov	r20,zero
    8ecc:	20800104 	addi	r2,r4,4
    8ed0:	24c00017 	ldw	r19,0(r4)
    8ed4:	803df80e 	bge	r16,zero,86b8 <__alt_data_end+0xfffe86b8>
    8ed8:	9d06b03a 	or	r3,r19,r20
    8edc:	d8802215 	stw	r2,136(sp)
    8ee0:	183d5e1e 	bne	r3,zero,845c <__alt_data_end+0xfffe845c>
    8ee4:	002b883a 	mov	r21,zero
    8ee8:	0005883a 	mov	r2,zero
    8eec:	003e1006 	br	8730 <__alt_data_end+0xfffe8730>
    8ef0:	8880040c 	andi	r2,r17,16
    8ef4:	1000321e 	bne	r2,zero,8fc0 <___vfiprintf_internal_r+0x124c>
    8ef8:	8c40100c 	andi	r17,r17,64
    8efc:	88008d26 	beq	r17,zero,9134 <___vfiprintf_internal_r+0x13c0>
    8f00:	d9402217 	ldw	r5,136(sp)
    8f04:	d8c02417 	ldw	r3,144(sp)
    8f08:	28800017 	ldw	r2,0(r5)
    8f0c:	29400104 	addi	r5,r5,4
    8f10:	d9402215 	stw	r5,136(sp)
    8f14:	10c0000d 	sth	r3,0(r2)
    8f18:	003bca06 	br	7e44 <__alt_data_end+0xfffe7e44>
    8f1c:	8880100c 	andi	r2,r17,64
    8f20:	10003a26 	beq	r2,zero,900c <___vfiprintf_internal_r+0x1298>
    8f24:	d8802217 	ldw	r2,136(sp)
    8f28:	14c0000f 	ldh	r19,0(r2)
    8f2c:	10800104 	addi	r2,r2,4
    8f30:	d8802215 	stw	r2,136(sp)
    8f34:	9829d7fa 	srai	r20,r19,31
    8f38:	a005883a 	mov	r2,r20
    8f3c:	003d8506 	br	8554 <__alt_data_end+0xfffe8554>
    8f40:	8880100c 	andi	r2,r17,64
    8f44:	10002b26 	beq	r2,zero,8ff4 <___vfiprintf_internal_r+0x1280>
    8f48:	d8802217 	ldw	r2,136(sp)
    8f4c:	0029883a 	mov	r20,zero
    8f50:	14c0000b 	ldhu	r19,0(r2)
    8f54:	10800104 	addi	r2,r2,4
    8f58:	d8802215 	stw	r2,136(sp)
    8f5c:	003d5d06 	br	84d4 <__alt_data_end+0xfffe84d4>
    8f60:	d9402017 	ldw	r5,128(sp)
    8f64:	d9002117 	ldw	r4,132(sp)
    8f68:	d9801a04 	addi	r6,sp,104
    8f6c:	d8c02a15 	stw	r3,168(sp)
    8f70:	d9c02b15 	stw	r7,172(sp)
    8f74:	0007c600 	call	7c60 <__sprint_r.part.0>
    8f78:	d8c02a17 	ldw	r3,168(sp)
    8f7c:	d9c02b17 	ldw	r7,172(sp)
    8f80:	103eb41e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    8f84:	d9001b17 	ldw	r4,108(sp)
    8f88:	d8801c17 	ldw	r2,112(sp)
    8f8c:	d811883a 	mov	r8,sp
    8f90:	21400044 	addi	r5,r4,1
    8f94:	003e6706 	br	8934 <__alt_data_end+0xfffe8934>
    8f98:	00bfffc4 	movi	r2,-1
    8f9c:	003c4a06 	br	80c8 <__alt_data_end+0xfffe80c8>
    8fa0:	9805883a 	mov	r2,r19
    8fa4:	003ee806 	br	8b48 <__alt_data_end+0xfffe8b48>
    8fa8:	d8c02217 	ldw	r3,136(sp)
    8fac:	0029883a 	mov	r20,zero
    8fb0:	18800104 	addi	r2,r3,4
    8fb4:	1cc0000b 	ldhu	r19,0(r3)
    8fb8:	803f9e0e 	bge	r16,zero,8e34 <__alt_data_end+0xfffe8e34>
    8fbc:	003dd706 	br	871c <__alt_data_end+0xfffe871c>
    8fc0:	d8c02217 	ldw	r3,136(sp)
    8fc4:	d9002417 	ldw	r4,144(sp)
    8fc8:	18800017 	ldw	r2,0(r3)
    8fcc:	18c00104 	addi	r3,r3,4
    8fd0:	d8c02215 	stw	r3,136(sp)
    8fd4:	11000015 	stw	r4,0(r2)
    8fd8:	003b9a06 	br	7e44 <__alt_data_end+0xfffe7e44>
    8fdc:	d8c02217 	ldw	r3,136(sp)
    8fe0:	0029883a 	mov	r20,zero
    8fe4:	18800104 	addi	r2,r3,4
    8fe8:	1cc0000b 	ldhu	r19,0(r3)
    8fec:	803db20e 	bge	r16,zero,86b8 <__alt_data_end+0xfffe86b8>
    8ff0:	003fb906 	br	8ed8 <__alt_data_end+0xfffe8ed8>
    8ff4:	d9002217 	ldw	r4,136(sp)
    8ff8:	0029883a 	mov	r20,zero
    8ffc:	24c00017 	ldw	r19,0(r4)
    9000:	21000104 	addi	r4,r4,4
    9004:	d9002215 	stw	r4,136(sp)
    9008:	003d3206 	br	84d4 <__alt_data_end+0xfffe84d4>
    900c:	d8c02217 	ldw	r3,136(sp)
    9010:	1cc00017 	ldw	r19,0(r3)
    9014:	18c00104 	addi	r3,r3,4
    9018:	d8c02215 	stw	r3,136(sp)
    901c:	9829d7fa 	srai	r20,r19,31
    9020:	a005883a 	mov	r2,r20
    9024:	003d4b06 	br	8554 <__alt_data_end+0xfffe8554>
    9028:	0009883a 	mov	r4,zero
    902c:	01400044 	movi	r5,1
    9030:	d811883a 	mov	r8,sp
    9034:	003e4f06 	br	8974 <__alt_data_end+0xfffe8974>
    9038:	d8c02215 	stw	r3,136(sp)
    903c:	002b883a 	mov	r21,zero
    9040:	003db806 	br	8724 <__alt_data_end+0xfffe8724>
    9044:	d811883a 	mov	r8,sp
    9048:	003e9606 	br	8aa4 <__alt_data_end+0xfffe8aa4>
    904c:	01000074 	movhi	r4,1
    9050:	213f0c04 	addi	r4,r4,-976
    9054:	d9002315 	stw	r4,140(sp)
    9058:	003e6306 	br	89e8 <__alt_data_end+0xfffe89e8>
    905c:	b0c00043 	ldbu	r3,1(r22)
    9060:	8c400814 	ori	r17,r17,32
    9064:	b5800044 	addi	r22,r22,1
    9068:	18c03fcc 	andi	r3,r3,255
    906c:	18c0201c 	xori	r3,r3,128
    9070:	18ffe004 	addi	r3,r3,-128
    9074:	003b9c06 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    9078:	b809883a 	mov	r4,r23
    907c:	da002a15 	stw	r8,168(sp)
    9080:	00004e40 	call	4e4 <strlen>
    9084:	1029883a 	mov	r20,r2
    9088:	dd401d83 	ldbu	r21,118(sp)
    908c:	df002215 	stw	fp,136(sp)
    9090:	0021883a 	mov	r16,zero
    9094:	da002a17 	ldw	r8,168(sp)
    9098:	003c3906 	br	8180 <__alt_data_end+0xfffe8180>
    909c:	d9402017 	ldw	r5,128(sp)
    90a0:	d9002117 	ldw	r4,132(sp)
    90a4:	d9801a04 	addi	r6,sp,104
    90a8:	0007c600 	call	7c60 <__sprint_r.part.0>
    90ac:	103e691e 	bne	r2,zero,8a54 <__alt_data_end+0xfffe8a54>
    90b0:	d9001b17 	ldw	r4,108(sp)
    90b4:	d8801c17 	ldw	r2,112(sp)
    90b8:	d811883a 	mov	r8,sp
    90bc:	21400044 	addi	r5,r4,1
    90c0:	003e2e06 	br	897c <__alt_data_end+0xfffe897c>
    90c4:	01000074 	movhi	r4,1
    90c8:	213f1004 	addi	r4,r4,-960
    90cc:	d9002315 	stw	r4,140(sp)
    90d0:	d9001b17 	ldw	r4,108(sp)
    90d4:	21000044 	addi	r4,r4,1
    90d8:	003c5e06 	br	8254 <__alt_data_end+0xfffe8254>
    90dc:	002b883a 	mov	r21,zero
    90e0:	00800084 	movi	r2,2
    90e4:	10803fcc 	andi	r2,r2,255
    90e8:	01000044 	movi	r4,1
    90ec:	11002b26 	beq	r2,r4,919c <___vfiprintf_internal_r+0x1428>
    90f0:	01000084 	movi	r4,2
    90f4:	11002b1e 	bne	r2,r4,91a4 <___vfiprintf_internal_r+0x1430>
    90f8:	1823883a 	mov	r17,r3
    90fc:	003ee506 	br	8c94 <__alt_data_end+0xfffe8c94>
    9100:	8807883a 	mov	r3,r17
    9104:	00800044 	movi	r2,1
    9108:	003ff606 	br	90e4 <__alt_data_end+0xfffe90e4>
    910c:	00800184 	movi	r2,6
    9110:	1400012e 	bgeu	r2,r16,9118 <___vfiprintf_internal_r+0x13a4>
    9114:	1021883a 	mov	r16,r2
    9118:	8029883a 	mov	r20,r16
    911c:	8027883a 	mov	r19,r16
    9120:	80002216 	blt	r16,zero,91ac <___vfiprintf_internal_r+0x1438>
    9124:	05c00074 	movhi	r23,1
    9128:	df002215 	stw	fp,136(sp)
    912c:	bdfeb004 	addi	r23,r23,-1344
    9130:	003cfb06 	br	8520 <__alt_data_end+0xfffe8520>
    9134:	d9002217 	ldw	r4,136(sp)
    9138:	d9402417 	ldw	r5,144(sp)
    913c:	20800017 	ldw	r2,0(r4)
    9140:	21000104 	addi	r4,r4,4
    9144:	d9002215 	stw	r4,136(sp)
    9148:	11400015 	stw	r5,0(r2)
    914c:	003b3d06 	br	7e44 <__alt_data_end+0xfffe7e44>
    9150:	01400074 	movhi	r5,1
    9154:	297f1004 	addi	r5,r5,-960
    9158:	d9402315 	stw	r5,140(sp)
    915c:	d9401b17 	ldw	r5,108(sp)
    9160:	29400044 	addi	r5,r5,1
    9164:	003e6d06 	br	8b1c <__alt_data_end+0xfffe8b1c>
    9168:	8029883a 	mov	r20,r16
    916c:	dd401d83 	ldbu	r21,118(sp)
    9170:	df002215 	stw	fp,136(sp)
    9174:	0021883a 	mov	r16,zero
    9178:	003c0106 	br	8180 <__alt_data_end+0xfffe8180>
    917c:	00c00074 	movhi	r3,1
    9180:	18ff0c04 	addi	r3,r3,-976
    9184:	d8c02315 	stw	r3,140(sp)
    9188:	280d883a 	mov	r6,r5
    918c:	003c6906 	br	8334 <__alt_data_end+0xfffe8334>
    9190:	802d883a 	mov	r22,r16
    9194:	0021883a 	mov	r16,zero
    9198:	003b5406 	br	7eec <__alt_data_end+0xfffe7eec>
    919c:	1823883a 	mov	r17,r3
    91a0:	003cf306 	br	8570 <__alt_data_end+0xfffe8570>
    91a4:	1823883a 	mov	r17,r3
    91a8:	003cad06 	br	8460 <__alt_data_end+0xfffe8460>
    91ac:	0027883a 	mov	r19,zero
    91b0:	003fdc06 	br	9124 <__alt_data_end+0xfffe9124>
    91b4:	d9402217 	ldw	r5,136(sp)
    91b8:	8005883a 	mov	r2,r16
    91bc:	b0c00043 	ldbu	r3,1(r22)
    91c0:	2c000017 	ldw	r16,0(r5)
    91c4:	29000104 	addi	r4,r5,4
    91c8:	d9002215 	stw	r4,136(sp)
    91cc:	102d883a 	mov	r22,r2
    91d0:	803fa50e 	bge	r16,zero,9068 <__alt_data_end+0xfffe9068>
    91d4:	18c03fcc 	andi	r3,r3,255
    91d8:	18c0201c 	xori	r3,r3,128
    91dc:	043fffc4 	movi	r16,-1
    91e0:	18ffe004 	addi	r3,r3,-128
    91e4:	003b4006 	br	7ee8 <__alt_data_end+0xfffe7ee8>
    91e8:	d9402303 	ldbu	r5,140(sp)
    91ec:	d9401d85 	stb	r5,118(sp)
    91f0:	003cae06 	br	84ac <__alt_data_end+0xfffe84ac>
    91f4:	d8c02303 	ldbu	r3,140(sp)
    91f8:	d8c01d85 	stb	r3,118(sp)
    91fc:	003d1406 	br	8650 <__alt_data_end+0xfffe8650>
    9200:	d8c02303 	ldbu	r3,140(sp)
    9204:	d8c01d85 	stb	r3,118(sp)
    9208:	003cca06 	br	8534 <__alt_data_end+0xfffe8534>
    920c:	8880004c 	andi	r2,r17,1
    9210:	002b883a 	mov	r21,zero
    9214:	10000526 	beq	r2,zero,922c <___vfiprintf_internal_r+0x14b8>
    9218:	00800c04 	movi	r2,48
    921c:	d88019c5 	stb	r2,103(sp)
    9220:	dd002817 	ldw	r20,160(sp)
    9224:	ddc019c4 	addi	r23,sp,103
    9228:	003bd506 	br	8180 <__alt_data_end+0xfffe8180>
    922c:	0029883a 	mov	r20,zero
    9230:	ddc01a04 	addi	r23,sp,104
    9234:	003bd206 	br	8180 <__alt_data_end+0xfffe8180>
    9238:	d9002303 	ldbu	r4,140(sp)
    923c:	d9001d85 	stb	r4,118(sp)
    9240:	003da606 	br	88dc <__alt_data_end+0xfffe88dc>
    9244:	d8c02303 	ldbu	r3,140(sp)
    9248:	d8c01d85 	stb	r3,118(sp)
    924c:	003c7606 	br	8428 <__alt_data_end+0xfffe8428>
    9250:	d8c02303 	ldbu	r3,140(sp)
    9254:	d8c01d85 	stb	r3,118(sp)
    9258:	003c6506 	br	83f0 <__alt_data_end+0xfffe83f0>
    925c:	d9002303 	ldbu	r4,140(sp)
    9260:	d9001d85 	stb	r4,118(sp)
    9264:	003d3d06 	br	875c <__alt_data_end+0xfffe875c>
    9268:	d8c02303 	ldbu	r3,140(sp)
    926c:	d8c01d85 	stb	r3,118(sp)
    9270:	003d1d06 	br	86e8 <__alt_data_end+0xfffe86e8>
    9274:	d8c02303 	ldbu	r3,140(sp)
    9278:	d8c01d85 	stb	r3,118(sp)
    927c:	003d0306 	br	868c <__alt_data_end+0xfffe868c>

00009280 <__vfiprintf_internal>:
    9280:	00800074 	movhi	r2,1
    9284:	10860b04 	addi	r2,r2,6188
    9288:	300f883a 	mov	r7,r6
    928c:	280d883a 	mov	r6,r5
    9290:	200b883a 	mov	r5,r4
    9294:	11000017 	ldw	r4,0(r2)
    9298:	0007d741 	jmpi	7d74 <___vfiprintf_internal_r>

0000929c <__sbprintf>:
    929c:	2880030b 	ldhu	r2,12(r5)
    92a0:	2ac01917 	ldw	r11,100(r5)
    92a4:	2a80038b 	ldhu	r10,14(r5)
    92a8:	2a400717 	ldw	r9,28(r5)
    92ac:	2a000917 	ldw	r8,36(r5)
    92b0:	defee204 	addi	sp,sp,-1144
    92b4:	00c10004 	movi	r3,1024
    92b8:	dc011a15 	stw	r16,1128(sp)
    92bc:	10bfff4c 	andi	r2,r2,65533
    92c0:	2821883a 	mov	r16,r5
    92c4:	d8cb883a 	add	r5,sp,r3
    92c8:	dc811c15 	stw	r18,1136(sp)
    92cc:	dc411b15 	stw	r17,1132(sp)
    92d0:	dfc11d15 	stw	ra,1140(sp)
    92d4:	2025883a 	mov	r18,r4
    92d8:	d881030d 	sth	r2,1036(sp)
    92dc:	dac11915 	stw	r11,1124(sp)
    92e0:	da81038d 	sth	r10,1038(sp)
    92e4:	da410715 	stw	r9,1052(sp)
    92e8:	da010915 	stw	r8,1060(sp)
    92ec:	dec10015 	stw	sp,1024(sp)
    92f0:	dec10415 	stw	sp,1040(sp)
    92f4:	d8c10215 	stw	r3,1032(sp)
    92f8:	d8c10515 	stw	r3,1044(sp)
    92fc:	d8010615 	stw	zero,1048(sp)
    9300:	0007d740 	call	7d74 <___vfiprintf_internal_r>
    9304:	1023883a 	mov	r17,r2
    9308:	10000416 	blt	r2,zero,931c <__sbprintf+0x80>
    930c:	d9410004 	addi	r5,sp,1024
    9310:	9009883a 	mov	r4,r18
    9314:	00045500 	call	4550 <_fflush_r>
    9318:	10000d1e 	bne	r2,zero,9350 <__sbprintf+0xb4>
    931c:	d881030b 	ldhu	r2,1036(sp)
    9320:	1080100c 	andi	r2,r2,64
    9324:	10000326 	beq	r2,zero,9334 <__sbprintf+0x98>
    9328:	8080030b 	ldhu	r2,12(r16)
    932c:	10801014 	ori	r2,r2,64
    9330:	8080030d 	sth	r2,12(r16)
    9334:	8805883a 	mov	r2,r17
    9338:	dfc11d17 	ldw	ra,1140(sp)
    933c:	dc811c17 	ldw	r18,1136(sp)
    9340:	dc411b17 	ldw	r17,1132(sp)
    9344:	dc011a17 	ldw	r16,1128(sp)
    9348:	dec11e04 	addi	sp,sp,1144
    934c:	f800283a 	ret
    9350:	047fffc4 	movi	r17,-1
    9354:	003ff106 	br	931c <__alt_data_end+0xfffe931c>

00009358 <_write_r>:
    9358:	defffd04 	addi	sp,sp,-12
    935c:	2805883a 	mov	r2,r5
    9360:	dc000015 	stw	r16,0(sp)
    9364:	04000074 	movhi	r16,1
    9368:	dc400115 	stw	r17,4(sp)
    936c:	300b883a 	mov	r5,r6
    9370:	840cdb04 	addi	r16,r16,13164
    9374:	2023883a 	mov	r17,r4
    9378:	380d883a 	mov	r6,r7
    937c:	1009883a 	mov	r4,r2
    9380:	dfc00215 	stw	ra,8(sp)
    9384:	80000015 	stw	zero,0(r16)
    9388:	000dbc00 	call	dbc0 <write>
    938c:	00ffffc4 	movi	r3,-1
    9390:	10c00526 	beq	r2,r3,93a8 <_write_r+0x50>
    9394:	dfc00217 	ldw	ra,8(sp)
    9398:	dc400117 	ldw	r17,4(sp)
    939c:	dc000017 	ldw	r16,0(sp)
    93a0:	dec00304 	addi	sp,sp,12
    93a4:	f800283a 	ret
    93a8:	80c00017 	ldw	r3,0(r16)
    93ac:	183ff926 	beq	r3,zero,9394 <__alt_data_end+0xfffe9394>
    93b0:	88c00015 	stw	r3,0(r17)
    93b4:	003ff706 	br	9394 <__alt_data_end+0xfffe9394>

000093b8 <_close_r>:
    93b8:	defffd04 	addi	sp,sp,-12
    93bc:	dc000015 	stw	r16,0(sp)
    93c0:	04000074 	movhi	r16,1
    93c4:	dc400115 	stw	r17,4(sp)
    93c8:	840cdb04 	addi	r16,r16,13164
    93cc:	2023883a 	mov	r17,r4
    93d0:	2809883a 	mov	r4,r5
    93d4:	dfc00215 	stw	ra,8(sp)
    93d8:	80000015 	stw	zero,0(r16)
    93dc:	000d3200 	call	d320 <close>
    93e0:	00ffffc4 	movi	r3,-1
    93e4:	10c00526 	beq	r2,r3,93fc <_close_r+0x44>
    93e8:	dfc00217 	ldw	ra,8(sp)
    93ec:	dc400117 	ldw	r17,4(sp)
    93f0:	dc000017 	ldw	r16,0(sp)
    93f4:	dec00304 	addi	sp,sp,12
    93f8:	f800283a 	ret
    93fc:	80c00017 	ldw	r3,0(r16)
    9400:	183ff926 	beq	r3,zero,93e8 <__alt_data_end+0xfffe93e8>
    9404:	88c00015 	stw	r3,0(r17)
    9408:	003ff706 	br	93e8 <__alt_data_end+0xfffe93e8>

0000940c <_calloc_r>:
    940c:	defffe04 	addi	sp,sp,-8
    9410:	2805883a 	mov	r2,r5
    9414:	dc000015 	stw	r16,0(sp)
    9418:	300b883a 	mov	r5,r6
    941c:	2021883a 	mov	r16,r4
    9420:	1009883a 	mov	r4,r2
    9424:	dfc00115 	stw	ra,4(sp)
    9428:	000aa180 	call	aa18 <__mulsi3>
    942c:	100b883a 	mov	r5,r2
    9430:	8009883a 	mov	r4,r16
    9434:	00056a80 	call	56a8 <_malloc_r>
    9438:	10002926 	beq	r2,zero,94e0 <_calloc_r+0xd4>
    943c:	11bfff17 	ldw	r6,-4(r2)
    9440:	1021883a 	mov	r16,r2
    9444:	00bfff04 	movi	r2,-4
    9448:	308c703a 	and	r6,r6,r2
    944c:	00c00904 	movi	r3,36
    9450:	308d883a 	add	r6,r6,r2
    9454:	19801636 	bltu	r3,r6,94b0 <_calloc_r+0xa4>
    9458:	008004c4 	movi	r2,19
    945c:	11800b2e 	bgeu	r2,r6,948c <_calloc_r+0x80>
    9460:	80000015 	stw	zero,0(r16)
    9464:	80000115 	stw	zero,4(r16)
    9468:	008006c4 	movi	r2,27
    946c:	11801a2e 	bgeu	r2,r6,94d8 <_calloc_r+0xcc>
    9470:	80000215 	stw	zero,8(r16)
    9474:	80000315 	stw	zero,12(r16)
    9478:	30c0151e 	bne	r6,r3,94d0 <_calloc_r+0xc4>
    947c:	80000415 	stw	zero,16(r16)
    9480:	80800604 	addi	r2,r16,24
    9484:	80000515 	stw	zero,20(r16)
    9488:	00000106 	br	9490 <_calloc_r+0x84>
    948c:	8005883a 	mov	r2,r16
    9490:	10000015 	stw	zero,0(r2)
    9494:	10000115 	stw	zero,4(r2)
    9498:	10000215 	stw	zero,8(r2)
    949c:	8005883a 	mov	r2,r16
    94a0:	dfc00117 	ldw	ra,4(sp)
    94a4:	dc000017 	ldw	r16,0(sp)
    94a8:	dec00204 	addi	sp,sp,8
    94ac:	f800283a 	ret
    94b0:	000b883a 	mov	r5,zero
    94b4:	8009883a 	mov	r4,r16
    94b8:	000623c0 	call	623c <memset>
    94bc:	8005883a 	mov	r2,r16
    94c0:	dfc00117 	ldw	ra,4(sp)
    94c4:	dc000017 	ldw	r16,0(sp)
    94c8:	dec00204 	addi	sp,sp,8
    94cc:	f800283a 	ret
    94d0:	80800404 	addi	r2,r16,16
    94d4:	003fee06 	br	9490 <__alt_data_end+0xfffe9490>
    94d8:	80800204 	addi	r2,r16,8
    94dc:	003fec06 	br	9490 <__alt_data_end+0xfffe9490>
    94e0:	0005883a 	mov	r2,zero
    94e4:	003fee06 	br	94a0 <__alt_data_end+0xfffe94a0>

000094e8 <_fclose_r>:
    94e8:	28003926 	beq	r5,zero,95d0 <_fclose_r+0xe8>
    94ec:	defffc04 	addi	sp,sp,-16
    94f0:	dc400115 	stw	r17,4(sp)
    94f4:	dc000015 	stw	r16,0(sp)
    94f8:	dfc00315 	stw	ra,12(sp)
    94fc:	dc800215 	stw	r18,8(sp)
    9500:	2023883a 	mov	r17,r4
    9504:	2821883a 	mov	r16,r5
    9508:	20000226 	beq	r4,zero,9514 <_fclose_r+0x2c>
    950c:	20800e17 	ldw	r2,56(r4)
    9510:	10002726 	beq	r2,zero,95b0 <_fclose_r+0xc8>
    9514:	8080030f 	ldh	r2,12(r16)
    9518:	1000071e 	bne	r2,zero,9538 <_fclose_r+0x50>
    951c:	0005883a 	mov	r2,zero
    9520:	dfc00317 	ldw	ra,12(sp)
    9524:	dc800217 	ldw	r18,8(sp)
    9528:	dc400117 	ldw	r17,4(sp)
    952c:	dc000017 	ldw	r16,0(sp)
    9530:	dec00404 	addi	sp,sp,16
    9534:	f800283a 	ret
    9538:	800b883a 	mov	r5,r16
    953c:	8809883a 	mov	r4,r17
    9540:	00043340 	call	4334 <__sflush_r>
    9544:	1025883a 	mov	r18,r2
    9548:	80800b17 	ldw	r2,44(r16)
    954c:	10000426 	beq	r2,zero,9560 <_fclose_r+0x78>
    9550:	81400717 	ldw	r5,28(r16)
    9554:	8809883a 	mov	r4,r17
    9558:	103ee83a 	callr	r2
    955c:	10001616 	blt	r2,zero,95b8 <_fclose_r+0xd0>
    9560:	8080030b 	ldhu	r2,12(r16)
    9564:	1080200c 	andi	r2,r2,128
    9568:	1000151e 	bne	r2,zero,95c0 <_fclose_r+0xd8>
    956c:	81400c17 	ldw	r5,48(r16)
    9570:	28000526 	beq	r5,zero,9588 <_fclose_r+0xa0>
    9574:	80801004 	addi	r2,r16,64
    9578:	28800226 	beq	r5,r2,9584 <_fclose_r+0x9c>
    957c:	8809883a 	mov	r4,r17
    9580:	0004ab00 	call	4ab0 <_free_r>
    9584:	80000c15 	stw	zero,48(r16)
    9588:	81401117 	ldw	r5,68(r16)
    958c:	28000326 	beq	r5,zero,959c <_fclose_r+0xb4>
    9590:	8809883a 	mov	r4,r17
    9594:	0004ab00 	call	4ab0 <_free_r>
    9598:	80001115 	stw	zero,68(r16)
    959c:	000494c0 	call	494c <__sfp_lock_acquire>
    95a0:	8000030d 	sth	zero,12(r16)
    95a4:	00049500 	call	4950 <__sfp_lock_release>
    95a8:	9005883a 	mov	r2,r18
    95ac:	003fdc06 	br	9520 <__alt_data_end+0xfffe9520>
    95b0:	000493c0 	call	493c <__sinit>
    95b4:	003fd706 	br	9514 <__alt_data_end+0xfffe9514>
    95b8:	04bfffc4 	movi	r18,-1
    95bc:	003fe806 	br	9560 <__alt_data_end+0xfffe9560>
    95c0:	81400417 	ldw	r5,16(r16)
    95c4:	8809883a 	mov	r4,r17
    95c8:	0004ab00 	call	4ab0 <_free_r>
    95cc:	003fe706 	br	956c <__alt_data_end+0xfffe956c>
    95d0:	0005883a 	mov	r2,zero
    95d4:	f800283a 	ret

000095d8 <fclose>:
    95d8:	00800074 	movhi	r2,1
    95dc:	10860b04 	addi	r2,r2,6188
    95e0:	200b883a 	mov	r5,r4
    95e4:	11000017 	ldw	r4,0(r2)
    95e8:	00094e81 	jmpi	94e8 <_fclose_r>

000095ec <__fputwc>:
    95ec:	defff804 	addi	sp,sp,-32
    95f0:	dcc00415 	stw	r19,16(sp)
    95f4:	dc800315 	stw	r18,12(sp)
    95f8:	dc000115 	stw	r16,4(sp)
    95fc:	dfc00715 	stw	ra,28(sp)
    9600:	dd400615 	stw	r21,24(sp)
    9604:	dd000515 	stw	r20,20(sp)
    9608:	dc400215 	stw	r17,8(sp)
    960c:	2027883a 	mov	r19,r4
    9610:	2825883a 	mov	r18,r5
    9614:	3021883a 	mov	r16,r6
    9618:	00054980 	call	5498 <__locale_mb_cur_max>
    961c:	00c00044 	movi	r3,1
    9620:	10c03e26 	beq	r2,r3,971c <__fputwc+0x130>
    9624:	81c01704 	addi	r7,r16,92
    9628:	900d883a 	mov	r6,r18
    962c:	d80b883a 	mov	r5,sp
    9630:	9809883a 	mov	r4,r19
    9634:	0009abc0 	call	9abc <_wcrtomb_r>
    9638:	1029883a 	mov	r20,r2
    963c:	00bfffc4 	movi	r2,-1
    9640:	a0802026 	beq	r20,r2,96c4 <__fputwc+0xd8>
    9644:	d9400003 	ldbu	r5,0(sp)
    9648:	a0001c26 	beq	r20,zero,96bc <__fputwc+0xd0>
    964c:	0023883a 	mov	r17,zero
    9650:	05400284 	movi	r21,10
    9654:	00000906 	br	967c <__fputwc+0x90>
    9658:	80800017 	ldw	r2,0(r16)
    965c:	11400005 	stb	r5,0(r2)
    9660:	80c00017 	ldw	r3,0(r16)
    9664:	18c00044 	addi	r3,r3,1
    9668:	80c00015 	stw	r3,0(r16)
    966c:	8c400044 	addi	r17,r17,1
    9670:	dc45883a 	add	r2,sp,r17
    9674:	8d00112e 	bgeu	r17,r20,96bc <__fputwc+0xd0>
    9678:	11400003 	ldbu	r5,0(r2)
    967c:	80c00217 	ldw	r3,8(r16)
    9680:	18ffffc4 	addi	r3,r3,-1
    9684:	80c00215 	stw	r3,8(r16)
    9688:	183ff30e 	bge	r3,zero,9658 <__alt_data_end+0xfffe9658>
    968c:	80800617 	ldw	r2,24(r16)
    9690:	18801916 	blt	r3,r2,96f8 <__fputwc+0x10c>
    9694:	80800017 	ldw	r2,0(r16)
    9698:	11400005 	stb	r5,0(r2)
    969c:	80800017 	ldw	r2,0(r16)
    96a0:	10c00003 	ldbu	r3,0(r2)
    96a4:	10800044 	addi	r2,r2,1
    96a8:	1d402326 	beq	r3,r21,9738 <__fputwc+0x14c>
    96ac:	80800015 	stw	r2,0(r16)
    96b0:	8c400044 	addi	r17,r17,1
    96b4:	dc45883a 	add	r2,sp,r17
    96b8:	8d3fef36 	bltu	r17,r20,9678 <__alt_data_end+0xfffe9678>
    96bc:	9005883a 	mov	r2,r18
    96c0:	00000406 	br	96d4 <__fputwc+0xe8>
    96c4:	80c0030b 	ldhu	r3,12(r16)
    96c8:	a005883a 	mov	r2,r20
    96cc:	18c01014 	ori	r3,r3,64
    96d0:	80c0030d 	sth	r3,12(r16)
    96d4:	dfc00717 	ldw	ra,28(sp)
    96d8:	dd400617 	ldw	r21,24(sp)
    96dc:	dd000517 	ldw	r20,20(sp)
    96e0:	dcc00417 	ldw	r19,16(sp)
    96e4:	dc800317 	ldw	r18,12(sp)
    96e8:	dc400217 	ldw	r17,8(sp)
    96ec:	dc000117 	ldw	r16,4(sp)
    96f0:	dec00804 	addi	sp,sp,32
    96f4:	f800283a 	ret
    96f8:	800d883a 	mov	r6,r16
    96fc:	29403fcc 	andi	r5,r5,255
    9700:	9809883a 	mov	r4,r19
    9704:	00099640 	call	9964 <__swbuf_r>
    9708:	10bfffe0 	cmpeqi	r2,r2,-1
    970c:	10803fcc 	andi	r2,r2,255
    9710:	103fd626 	beq	r2,zero,966c <__alt_data_end+0xfffe966c>
    9714:	00bfffc4 	movi	r2,-1
    9718:	003fee06 	br	96d4 <__alt_data_end+0xfffe96d4>
    971c:	90ffffc4 	addi	r3,r18,-1
    9720:	01003f84 	movi	r4,254
    9724:	20ffbf36 	bltu	r4,r3,9624 <__alt_data_end+0xfffe9624>
    9728:	900b883a 	mov	r5,r18
    972c:	dc800005 	stb	r18,0(sp)
    9730:	1029883a 	mov	r20,r2
    9734:	003fc506 	br	964c <__alt_data_end+0xfffe964c>
    9738:	800d883a 	mov	r6,r16
    973c:	a80b883a 	mov	r5,r21
    9740:	9809883a 	mov	r4,r19
    9744:	00099640 	call	9964 <__swbuf_r>
    9748:	10bfffe0 	cmpeqi	r2,r2,-1
    974c:	003fef06 	br	970c <__alt_data_end+0xfffe970c>

00009750 <_fputwc_r>:
    9750:	3080030b 	ldhu	r2,12(r6)
    9754:	10c8000c 	andi	r3,r2,8192
    9758:	1800051e 	bne	r3,zero,9770 <_fputwc_r+0x20>
    975c:	30c01917 	ldw	r3,100(r6)
    9760:	10880014 	ori	r2,r2,8192
    9764:	3080030d 	sth	r2,12(r6)
    9768:	18880014 	ori	r2,r3,8192
    976c:	30801915 	stw	r2,100(r6)
    9770:	00095ec1 	jmpi	95ec <__fputwc>

00009774 <fputwc>:
    9774:	00800074 	movhi	r2,1
    9778:	defffc04 	addi	sp,sp,-16
    977c:	10860b04 	addi	r2,r2,6188
    9780:	dc000115 	stw	r16,4(sp)
    9784:	14000017 	ldw	r16,0(r2)
    9788:	dc400215 	stw	r17,8(sp)
    978c:	dfc00315 	stw	ra,12(sp)
    9790:	2023883a 	mov	r17,r4
    9794:	80000226 	beq	r16,zero,97a0 <fputwc+0x2c>
    9798:	80800e17 	ldw	r2,56(r16)
    979c:	10001026 	beq	r2,zero,97e0 <fputwc+0x6c>
    97a0:	2880030b 	ldhu	r2,12(r5)
    97a4:	10c8000c 	andi	r3,r2,8192
    97a8:	1800051e 	bne	r3,zero,97c0 <fputwc+0x4c>
    97ac:	28c01917 	ldw	r3,100(r5)
    97b0:	10880014 	ori	r2,r2,8192
    97b4:	2880030d 	sth	r2,12(r5)
    97b8:	18880014 	ori	r2,r3,8192
    97bc:	28801915 	stw	r2,100(r5)
    97c0:	280d883a 	mov	r6,r5
    97c4:	8009883a 	mov	r4,r16
    97c8:	880b883a 	mov	r5,r17
    97cc:	dfc00317 	ldw	ra,12(sp)
    97d0:	dc400217 	ldw	r17,8(sp)
    97d4:	dc000117 	ldw	r16,4(sp)
    97d8:	dec00404 	addi	sp,sp,16
    97dc:	00095ec1 	jmpi	95ec <__fputwc>
    97e0:	8009883a 	mov	r4,r16
    97e4:	d9400015 	stw	r5,0(sp)
    97e8:	000493c0 	call	493c <__sinit>
    97ec:	d9400017 	ldw	r5,0(sp)
    97f0:	003feb06 	br	97a0 <__alt_data_end+0xfffe97a0>

000097f4 <_fstat_r>:
    97f4:	defffd04 	addi	sp,sp,-12
    97f8:	2805883a 	mov	r2,r5
    97fc:	dc000015 	stw	r16,0(sp)
    9800:	04000074 	movhi	r16,1
    9804:	dc400115 	stw	r17,4(sp)
    9808:	840cdb04 	addi	r16,r16,13164
    980c:	2023883a 	mov	r17,r4
    9810:	300b883a 	mov	r5,r6
    9814:	1009883a 	mov	r4,r2
    9818:	dfc00215 	stw	ra,8(sp)
    981c:	80000015 	stw	zero,0(r16)
    9820:	000d4880 	call	d488 <fstat>
    9824:	00ffffc4 	movi	r3,-1
    9828:	10c00526 	beq	r2,r3,9840 <_fstat_r+0x4c>
    982c:	dfc00217 	ldw	ra,8(sp)
    9830:	dc400117 	ldw	r17,4(sp)
    9834:	dc000017 	ldw	r16,0(sp)
    9838:	dec00304 	addi	sp,sp,12
    983c:	f800283a 	ret
    9840:	80c00017 	ldw	r3,0(r16)
    9844:	183ff926 	beq	r3,zero,982c <__alt_data_end+0xfffe982c>
    9848:	88c00015 	stw	r3,0(r17)
    984c:	003ff706 	br	982c <__alt_data_end+0xfffe982c>

00009850 <_isatty_r>:
    9850:	defffd04 	addi	sp,sp,-12
    9854:	dc000015 	stw	r16,0(sp)
    9858:	04000074 	movhi	r16,1
    985c:	dc400115 	stw	r17,4(sp)
    9860:	840cdb04 	addi	r16,r16,13164
    9864:	2023883a 	mov	r17,r4
    9868:	2809883a 	mov	r4,r5
    986c:	dfc00215 	stw	ra,8(sp)
    9870:	80000015 	stw	zero,0(r16)
    9874:	000d57c0 	call	d57c <isatty>
    9878:	00ffffc4 	movi	r3,-1
    987c:	10c00526 	beq	r2,r3,9894 <_isatty_r+0x44>
    9880:	dfc00217 	ldw	ra,8(sp)
    9884:	dc400117 	ldw	r17,4(sp)
    9888:	dc000017 	ldw	r16,0(sp)
    988c:	dec00304 	addi	sp,sp,12
    9890:	f800283a 	ret
    9894:	80c00017 	ldw	r3,0(r16)
    9898:	183ff926 	beq	r3,zero,9880 <__alt_data_end+0xfffe9880>
    989c:	88c00015 	stw	r3,0(r17)
    98a0:	003ff706 	br	9880 <__alt_data_end+0xfffe9880>

000098a4 <_lseek_r>:
    98a4:	defffd04 	addi	sp,sp,-12
    98a8:	2805883a 	mov	r2,r5
    98ac:	dc000015 	stw	r16,0(sp)
    98b0:	04000074 	movhi	r16,1
    98b4:	dc400115 	stw	r17,4(sp)
    98b8:	300b883a 	mov	r5,r6
    98bc:	840cdb04 	addi	r16,r16,13164
    98c0:	2023883a 	mov	r17,r4
    98c4:	380d883a 	mov	r6,r7
    98c8:	1009883a 	mov	r4,r2
    98cc:	dfc00215 	stw	ra,8(sp)
    98d0:	80000015 	stw	zero,0(r16)
    98d4:	000d7500 	call	d750 <lseek>
    98d8:	00ffffc4 	movi	r3,-1
    98dc:	10c00526 	beq	r2,r3,98f4 <_lseek_r+0x50>
    98e0:	dfc00217 	ldw	ra,8(sp)
    98e4:	dc400117 	ldw	r17,4(sp)
    98e8:	dc000017 	ldw	r16,0(sp)
    98ec:	dec00304 	addi	sp,sp,12
    98f0:	f800283a 	ret
    98f4:	80c00017 	ldw	r3,0(r16)
    98f8:	183ff926 	beq	r3,zero,98e0 <__alt_data_end+0xfffe98e0>
    98fc:	88c00015 	stw	r3,0(r17)
    9900:	003ff706 	br	98e0 <__alt_data_end+0xfffe98e0>

00009904 <_read_r>:
    9904:	defffd04 	addi	sp,sp,-12
    9908:	2805883a 	mov	r2,r5
    990c:	dc000015 	stw	r16,0(sp)
    9910:	04000074 	movhi	r16,1
    9914:	dc400115 	stw	r17,4(sp)
    9918:	300b883a 	mov	r5,r6
    991c:	840cdb04 	addi	r16,r16,13164
    9920:	2023883a 	mov	r17,r4
    9924:	380d883a 	mov	r6,r7
    9928:	1009883a 	mov	r4,r2
    992c:	dfc00215 	stw	ra,8(sp)
    9930:	80000015 	stw	zero,0(r16)
    9934:	000d91c0 	call	d91c <read>
    9938:	00ffffc4 	movi	r3,-1
    993c:	10c00526 	beq	r2,r3,9954 <_read_r+0x50>
    9940:	dfc00217 	ldw	ra,8(sp)
    9944:	dc400117 	ldw	r17,4(sp)
    9948:	dc000017 	ldw	r16,0(sp)
    994c:	dec00304 	addi	sp,sp,12
    9950:	f800283a 	ret
    9954:	80c00017 	ldw	r3,0(r16)
    9958:	183ff926 	beq	r3,zero,9940 <__alt_data_end+0xfffe9940>
    995c:	88c00015 	stw	r3,0(r17)
    9960:	003ff706 	br	9940 <__alt_data_end+0xfffe9940>

00009964 <__swbuf_r>:
    9964:	defffb04 	addi	sp,sp,-20
    9968:	dcc00315 	stw	r19,12(sp)
    996c:	dc800215 	stw	r18,8(sp)
    9970:	dc000015 	stw	r16,0(sp)
    9974:	dfc00415 	stw	ra,16(sp)
    9978:	dc400115 	stw	r17,4(sp)
    997c:	2025883a 	mov	r18,r4
    9980:	2827883a 	mov	r19,r5
    9984:	3021883a 	mov	r16,r6
    9988:	20000226 	beq	r4,zero,9994 <__swbuf_r+0x30>
    998c:	20800e17 	ldw	r2,56(r4)
    9990:	10004226 	beq	r2,zero,9a9c <__swbuf_r+0x138>
    9994:	80800617 	ldw	r2,24(r16)
    9998:	8100030b 	ldhu	r4,12(r16)
    999c:	80800215 	stw	r2,8(r16)
    99a0:	2080020c 	andi	r2,r4,8
    99a4:	10003626 	beq	r2,zero,9a80 <__swbuf_r+0x11c>
    99a8:	80c00417 	ldw	r3,16(r16)
    99ac:	18003426 	beq	r3,zero,9a80 <__swbuf_r+0x11c>
    99b0:	2088000c 	andi	r2,r4,8192
    99b4:	9c403fcc 	andi	r17,r19,255
    99b8:	10001a26 	beq	r2,zero,9a24 <__swbuf_r+0xc0>
    99bc:	80800017 	ldw	r2,0(r16)
    99c0:	81000517 	ldw	r4,20(r16)
    99c4:	10c7c83a 	sub	r3,r2,r3
    99c8:	1900200e 	bge	r3,r4,9a4c <__swbuf_r+0xe8>
    99cc:	18c00044 	addi	r3,r3,1
    99d0:	81000217 	ldw	r4,8(r16)
    99d4:	11400044 	addi	r5,r2,1
    99d8:	81400015 	stw	r5,0(r16)
    99dc:	213fffc4 	addi	r4,r4,-1
    99e0:	81000215 	stw	r4,8(r16)
    99e4:	14c00005 	stb	r19,0(r2)
    99e8:	80800517 	ldw	r2,20(r16)
    99ec:	10c01e26 	beq	r2,r3,9a68 <__swbuf_r+0x104>
    99f0:	8080030b 	ldhu	r2,12(r16)
    99f4:	1080004c 	andi	r2,r2,1
    99f8:	10000226 	beq	r2,zero,9a04 <__swbuf_r+0xa0>
    99fc:	00800284 	movi	r2,10
    9a00:	88801926 	beq	r17,r2,9a68 <__swbuf_r+0x104>
    9a04:	8805883a 	mov	r2,r17
    9a08:	dfc00417 	ldw	ra,16(sp)
    9a0c:	dcc00317 	ldw	r19,12(sp)
    9a10:	dc800217 	ldw	r18,8(sp)
    9a14:	dc400117 	ldw	r17,4(sp)
    9a18:	dc000017 	ldw	r16,0(sp)
    9a1c:	dec00504 	addi	sp,sp,20
    9a20:	f800283a 	ret
    9a24:	81401917 	ldw	r5,100(r16)
    9a28:	00b7ffc4 	movi	r2,-8193
    9a2c:	21080014 	ori	r4,r4,8192
    9a30:	2884703a 	and	r2,r5,r2
    9a34:	80801915 	stw	r2,100(r16)
    9a38:	80800017 	ldw	r2,0(r16)
    9a3c:	8100030d 	sth	r4,12(r16)
    9a40:	81000517 	ldw	r4,20(r16)
    9a44:	10c7c83a 	sub	r3,r2,r3
    9a48:	193fe016 	blt	r3,r4,99cc <__alt_data_end+0xfffe99cc>
    9a4c:	800b883a 	mov	r5,r16
    9a50:	9009883a 	mov	r4,r18
    9a54:	00045500 	call	4550 <_fflush_r>
    9a58:	1000071e 	bne	r2,zero,9a78 <__swbuf_r+0x114>
    9a5c:	80800017 	ldw	r2,0(r16)
    9a60:	00c00044 	movi	r3,1
    9a64:	003fda06 	br	99d0 <__alt_data_end+0xfffe99d0>
    9a68:	800b883a 	mov	r5,r16
    9a6c:	9009883a 	mov	r4,r18
    9a70:	00045500 	call	4550 <_fflush_r>
    9a74:	103fe326 	beq	r2,zero,9a04 <__alt_data_end+0xfffe9a04>
    9a78:	00bfffc4 	movi	r2,-1
    9a7c:	003fe206 	br	9a08 <__alt_data_end+0xfffe9a08>
    9a80:	800b883a 	mov	r5,r16
    9a84:	9009883a 	mov	r4,r18
    9a88:	00029300 	call	2930 <__swsetup_r>
    9a8c:	103ffa1e 	bne	r2,zero,9a78 <__alt_data_end+0xfffe9a78>
    9a90:	8100030b 	ldhu	r4,12(r16)
    9a94:	80c00417 	ldw	r3,16(r16)
    9a98:	003fc506 	br	99b0 <__alt_data_end+0xfffe99b0>
    9a9c:	000493c0 	call	493c <__sinit>
    9aa0:	003fbc06 	br	9994 <__alt_data_end+0xfffe9994>

00009aa4 <__swbuf>:
    9aa4:	00800074 	movhi	r2,1
    9aa8:	10860b04 	addi	r2,r2,6188
    9aac:	280d883a 	mov	r6,r5
    9ab0:	200b883a 	mov	r5,r4
    9ab4:	11000017 	ldw	r4,0(r2)
    9ab8:	00099641 	jmpi	9964 <__swbuf_r>

00009abc <_wcrtomb_r>:
    9abc:	defff604 	addi	sp,sp,-40
    9ac0:	00800074 	movhi	r2,1
    9ac4:	dc800815 	stw	r18,32(sp)
    9ac8:	dc400715 	stw	r17,28(sp)
    9acc:	dc000615 	stw	r16,24(sp)
    9ad0:	10860f04 	addi	r2,r2,6204
    9ad4:	dfc00915 	stw	ra,36(sp)
    9ad8:	2021883a 	mov	r16,r4
    9adc:	3823883a 	mov	r17,r7
    9ae0:	14800017 	ldw	r18,0(r2)
    9ae4:	28001426 	beq	r5,zero,9b38 <_wcrtomb_r+0x7c>
    9ae8:	d9400415 	stw	r5,16(sp)
    9aec:	d9800515 	stw	r6,20(sp)
    9af0:	000548c0 	call	548c <__locale_charset>
    9af4:	d9800517 	ldw	r6,20(sp)
    9af8:	d9400417 	ldw	r5,16(sp)
    9afc:	100f883a 	mov	r7,r2
    9b00:	dc400015 	stw	r17,0(sp)
    9b04:	8009883a 	mov	r4,r16
    9b08:	903ee83a 	callr	r18
    9b0c:	00ffffc4 	movi	r3,-1
    9b10:	10c0031e 	bne	r2,r3,9b20 <_wcrtomb_r+0x64>
    9b14:	88000015 	stw	zero,0(r17)
    9b18:	00c02284 	movi	r3,138
    9b1c:	80c00015 	stw	r3,0(r16)
    9b20:	dfc00917 	ldw	ra,36(sp)
    9b24:	dc800817 	ldw	r18,32(sp)
    9b28:	dc400717 	ldw	r17,28(sp)
    9b2c:	dc000617 	ldw	r16,24(sp)
    9b30:	dec00a04 	addi	sp,sp,40
    9b34:	f800283a 	ret
    9b38:	000548c0 	call	548c <__locale_charset>
    9b3c:	100f883a 	mov	r7,r2
    9b40:	dc400015 	stw	r17,0(sp)
    9b44:	000d883a 	mov	r6,zero
    9b48:	d9400104 	addi	r5,sp,4
    9b4c:	8009883a 	mov	r4,r16
    9b50:	903ee83a 	callr	r18
    9b54:	003fed06 	br	9b0c <__alt_data_end+0xfffe9b0c>

00009b58 <wcrtomb>:
    9b58:	defff604 	addi	sp,sp,-40
    9b5c:	00800074 	movhi	r2,1
    9b60:	dc800615 	stw	r18,24(sp)
    9b64:	dc400515 	stw	r17,20(sp)
    9b68:	10860b04 	addi	r2,r2,6188
    9b6c:	dfc00915 	stw	ra,36(sp)
    9b70:	dd000815 	stw	r20,32(sp)
    9b74:	dcc00715 	stw	r19,28(sp)
    9b78:	dc000415 	stw	r16,16(sp)
    9b7c:	3025883a 	mov	r18,r6
    9b80:	14400017 	ldw	r17,0(r2)
    9b84:	20001926 	beq	r4,zero,9bec <wcrtomb+0x94>
    9b88:	00800074 	movhi	r2,1
    9b8c:	10860f04 	addi	r2,r2,6204
    9b90:	15000017 	ldw	r20,0(r2)
    9b94:	2021883a 	mov	r16,r4
    9b98:	2827883a 	mov	r19,r5
    9b9c:	000548c0 	call	548c <__locale_charset>
    9ba0:	100f883a 	mov	r7,r2
    9ba4:	dc800015 	stw	r18,0(sp)
    9ba8:	980d883a 	mov	r6,r19
    9bac:	800b883a 	mov	r5,r16
    9bb0:	8809883a 	mov	r4,r17
    9bb4:	a03ee83a 	callr	r20
    9bb8:	00ffffc4 	movi	r3,-1
    9bbc:	10c0031e 	bne	r2,r3,9bcc <wcrtomb+0x74>
    9bc0:	90000015 	stw	zero,0(r18)
    9bc4:	00c02284 	movi	r3,138
    9bc8:	88c00015 	stw	r3,0(r17)
    9bcc:	dfc00917 	ldw	ra,36(sp)
    9bd0:	dd000817 	ldw	r20,32(sp)
    9bd4:	dcc00717 	ldw	r19,28(sp)
    9bd8:	dc800617 	ldw	r18,24(sp)
    9bdc:	dc400517 	ldw	r17,20(sp)
    9be0:	dc000417 	ldw	r16,16(sp)
    9be4:	dec00a04 	addi	sp,sp,40
    9be8:	f800283a 	ret
    9bec:	00800074 	movhi	r2,1
    9bf0:	10860f04 	addi	r2,r2,6204
    9bf4:	14000017 	ldw	r16,0(r2)
    9bf8:	000548c0 	call	548c <__locale_charset>
    9bfc:	100f883a 	mov	r7,r2
    9c00:	dc800015 	stw	r18,0(sp)
    9c04:	000d883a 	mov	r6,zero
    9c08:	d9400104 	addi	r5,sp,4
    9c0c:	8809883a 	mov	r4,r17
    9c10:	803ee83a 	callr	r16
    9c14:	003fe806 	br	9bb8 <__alt_data_end+0xfffe9bb8>

00009c18 <__ascii_wctomb>:
    9c18:	28000526 	beq	r5,zero,9c30 <__ascii_wctomb+0x18>
    9c1c:	00803fc4 	movi	r2,255
    9c20:	11800536 	bltu	r2,r6,9c38 <__ascii_wctomb+0x20>
    9c24:	29800005 	stb	r6,0(r5)
    9c28:	00800044 	movi	r2,1
    9c2c:	f800283a 	ret
    9c30:	0005883a 	mov	r2,zero
    9c34:	f800283a 	ret
    9c38:	00802284 	movi	r2,138
    9c3c:	20800015 	stw	r2,0(r4)
    9c40:	00bfffc4 	movi	r2,-1
    9c44:	f800283a 	ret

00009c48 <_wctomb_r>:
    9c48:	00800074 	movhi	r2,1
    9c4c:	defff904 	addi	sp,sp,-28
    9c50:	10860f04 	addi	r2,r2,6204
    9c54:	dfc00615 	stw	ra,24(sp)
    9c58:	dc400515 	stw	r17,20(sp)
    9c5c:	dc000415 	stw	r16,16(sp)
    9c60:	3823883a 	mov	r17,r7
    9c64:	14000017 	ldw	r16,0(r2)
    9c68:	d9000115 	stw	r4,4(sp)
    9c6c:	d9400215 	stw	r5,8(sp)
    9c70:	d9800315 	stw	r6,12(sp)
    9c74:	000548c0 	call	548c <__locale_charset>
    9c78:	d9800317 	ldw	r6,12(sp)
    9c7c:	d9400217 	ldw	r5,8(sp)
    9c80:	d9000117 	ldw	r4,4(sp)
    9c84:	100f883a 	mov	r7,r2
    9c88:	dc400015 	stw	r17,0(sp)
    9c8c:	803ee83a 	callr	r16
    9c90:	dfc00617 	ldw	ra,24(sp)
    9c94:	dc400517 	ldw	r17,20(sp)
    9c98:	dc000417 	ldw	r16,16(sp)
    9c9c:	dec00704 	addi	sp,sp,28
    9ca0:	f800283a 	ret

00009ca4 <__udivdi3>:
    9ca4:	defff404 	addi	sp,sp,-48
    9ca8:	dcc00515 	stw	r19,20(sp)
    9cac:	dc000215 	stw	r16,8(sp)
    9cb0:	dfc00b15 	stw	ra,44(sp)
    9cb4:	df000a15 	stw	fp,40(sp)
    9cb8:	ddc00915 	stw	r23,36(sp)
    9cbc:	dd800815 	stw	r22,32(sp)
    9cc0:	dd400715 	stw	r21,28(sp)
    9cc4:	dd000615 	stw	r20,24(sp)
    9cc8:	dc800415 	stw	r18,16(sp)
    9ccc:	dc400315 	stw	r17,12(sp)
    9cd0:	2027883a 	mov	r19,r4
    9cd4:	2821883a 	mov	r16,r5
    9cd8:	3800461e 	bne	r7,zero,9df4 <__udivdi3+0x150>
    9cdc:	3023883a 	mov	r17,r6
    9ce0:	2025883a 	mov	r18,r4
    9ce4:	2980572e 	bgeu	r5,r6,9e44 <__udivdi3+0x1a0>
    9ce8:	00bfffd4 	movui	r2,65535
    9cec:	282d883a 	mov	r22,r5
    9cf0:	1180b236 	bltu	r2,r6,9fbc <__udivdi3+0x318>
    9cf4:	00803fc4 	movi	r2,255
    9cf8:	1185803a 	cmpltu	r2,r2,r6
    9cfc:	100490fa 	slli	r2,r2,3
    9d00:	3086d83a 	srl	r3,r6,r2
    9d04:	01000074 	movhi	r4,1
    9d08:	213f1404 	addi	r4,r4,-944
    9d0c:	20c7883a 	add	r3,r4,r3
    9d10:	18c00003 	ldbu	r3,0(r3)
    9d14:	1885883a 	add	r2,r3,r2
    9d18:	00c00804 	movi	r3,32
    9d1c:	1887c83a 	sub	r3,r3,r2
    9d20:	18000526 	beq	r3,zero,9d38 <__udivdi3+0x94>
    9d24:	80e0983a 	sll	r16,r16,r3
    9d28:	9884d83a 	srl	r2,r19,r2
    9d2c:	30e2983a 	sll	r17,r6,r3
    9d30:	98e4983a 	sll	r18,r19,r3
    9d34:	142cb03a 	or	r22,r2,r16
    9d38:	882ad43a 	srli	r21,r17,16
    9d3c:	b009883a 	mov	r4,r22
    9d40:	8d3fffcc 	andi	r20,r17,65535
    9d44:	a80b883a 	mov	r5,r21
    9d48:	000a9c00 	call	a9c0 <__umodsi3>
    9d4c:	b009883a 	mov	r4,r22
    9d50:	a80b883a 	mov	r5,r21
    9d54:	1027883a 	mov	r19,r2
    9d58:	000a95c0 	call	a95c <__udivsi3>
    9d5c:	100b883a 	mov	r5,r2
    9d60:	a009883a 	mov	r4,r20
    9d64:	102d883a 	mov	r22,r2
    9d68:	000aa180 	call	aa18 <__mulsi3>
    9d6c:	9826943a 	slli	r19,r19,16
    9d70:	9006d43a 	srli	r3,r18,16
    9d74:	1cc6b03a 	or	r3,r3,r19
    9d78:	1880052e 	bgeu	r3,r2,9d90 <__udivdi3+0xec>
    9d7c:	1c47883a 	add	r3,r3,r17
    9d80:	b13fffc4 	addi	r4,r22,-1
    9d84:	1c400136 	bltu	r3,r17,9d8c <__udivdi3+0xe8>
    9d88:	18814236 	bltu	r3,r2,a294 <__udivdi3+0x5f0>
    9d8c:	202d883a 	mov	r22,r4
    9d90:	18a1c83a 	sub	r16,r3,r2
    9d94:	8009883a 	mov	r4,r16
    9d98:	a80b883a 	mov	r5,r21
    9d9c:	000a9c00 	call	a9c0 <__umodsi3>
    9da0:	1027883a 	mov	r19,r2
    9da4:	8009883a 	mov	r4,r16
    9da8:	a80b883a 	mov	r5,r21
    9dac:	9826943a 	slli	r19,r19,16
    9db0:	000a95c0 	call	a95c <__udivsi3>
    9db4:	100b883a 	mov	r5,r2
    9db8:	a009883a 	mov	r4,r20
    9dbc:	94bfffcc 	andi	r18,r18,65535
    9dc0:	1021883a 	mov	r16,r2
    9dc4:	94e4b03a 	or	r18,r18,r19
    9dc8:	000aa180 	call	aa18 <__mulsi3>
    9dcc:	9080052e 	bgeu	r18,r2,9de4 <__udivdi3+0x140>
    9dd0:	8ca5883a 	add	r18,r17,r18
    9dd4:	80ffffc4 	addi	r3,r16,-1
    9dd8:	94410c36 	bltu	r18,r17,a20c <__udivdi3+0x568>
    9ddc:	90810b2e 	bgeu	r18,r2,a20c <__udivdi3+0x568>
    9de0:	843fff84 	addi	r16,r16,-2
    9de4:	b004943a 	slli	r2,r22,16
    9de8:	0007883a 	mov	r3,zero
    9dec:	1404b03a 	or	r2,r2,r16
    9df0:	00005e06 	br	9f6c <__udivdi3+0x2c8>
    9df4:	29c05b36 	bltu	r5,r7,9f64 <__udivdi3+0x2c0>
    9df8:	00bfffd4 	movui	r2,65535
    9dfc:	11c0672e 	bgeu	r2,r7,9f9c <__udivdi3+0x2f8>
    9e00:	00804034 	movhi	r2,256
    9e04:	10bfffc4 	addi	r2,r2,-1
    9e08:	11c10a36 	bltu	r2,r7,a234 <__udivdi3+0x590>
    9e0c:	00800404 	movi	r2,16
    9e10:	3886d83a 	srl	r3,r7,r2
    9e14:	01000074 	movhi	r4,1
    9e18:	213f1404 	addi	r4,r4,-944
    9e1c:	20c7883a 	add	r3,r4,r3
    9e20:	18c00003 	ldbu	r3,0(r3)
    9e24:	05c00804 	movi	r23,32
    9e28:	1885883a 	add	r2,r3,r2
    9e2c:	b8afc83a 	sub	r23,r23,r2
    9e30:	b800671e 	bne	r23,zero,9fd0 <__udivdi3+0x32c>
    9e34:	3c010536 	bltu	r7,r16,a24c <__udivdi3+0x5a8>
    9e38:	9985403a 	cmpgeu	r2,r19,r6
    9e3c:	0007883a 	mov	r3,zero
    9e40:	00004a06 	br	9f6c <__udivdi3+0x2c8>
    9e44:	3000041e 	bne	r6,zero,9e58 <__udivdi3+0x1b4>
    9e48:	000b883a 	mov	r5,zero
    9e4c:	01000044 	movi	r4,1
    9e50:	000a95c0 	call	a95c <__udivsi3>
    9e54:	1023883a 	mov	r17,r2
    9e58:	00bfffd4 	movui	r2,65535
    9e5c:	1440532e 	bgeu	r2,r17,9fac <__udivdi3+0x308>
    9e60:	00804034 	movhi	r2,256
    9e64:	10bfffc4 	addi	r2,r2,-1
    9e68:	1440f436 	bltu	r2,r17,a23c <__udivdi3+0x598>
    9e6c:	00800404 	movi	r2,16
    9e70:	8886d83a 	srl	r3,r17,r2
    9e74:	01000074 	movhi	r4,1
    9e78:	213f1404 	addi	r4,r4,-944
    9e7c:	20c7883a 	add	r3,r4,r3
    9e80:	18c00003 	ldbu	r3,0(r3)
    9e84:	1885883a 	add	r2,r3,r2
    9e88:	00c00804 	movi	r3,32
    9e8c:	1887c83a 	sub	r3,r3,r2
    9e90:	1800a51e 	bne	r3,zero,a128 <__udivdi3+0x484>
    9e94:	882ad43a 	srli	r21,r17,16
    9e98:	8461c83a 	sub	r16,r16,r17
    9e9c:	8d3fffcc 	andi	r20,r17,65535
    9ea0:	00c00044 	movi	r3,1
    9ea4:	a80b883a 	mov	r5,r21
    9ea8:	8009883a 	mov	r4,r16
    9eac:	d8c00115 	stw	r3,4(sp)
    9eb0:	000a9c00 	call	a9c0 <__umodsi3>
    9eb4:	a80b883a 	mov	r5,r21
    9eb8:	8009883a 	mov	r4,r16
    9ebc:	1027883a 	mov	r19,r2
    9ec0:	000a95c0 	call	a95c <__udivsi3>
    9ec4:	a00b883a 	mov	r5,r20
    9ec8:	1009883a 	mov	r4,r2
    9ecc:	102d883a 	mov	r22,r2
    9ed0:	000aa180 	call	aa18 <__mulsi3>
    9ed4:	9826943a 	slli	r19,r19,16
    9ed8:	900ed43a 	srli	r7,r18,16
    9edc:	d8c00117 	ldw	r3,4(sp)
    9ee0:	3cceb03a 	or	r7,r7,r19
    9ee4:	3880052e 	bgeu	r7,r2,9efc <__udivdi3+0x258>
    9ee8:	3c4f883a 	add	r7,r7,r17
    9eec:	b13fffc4 	addi	r4,r22,-1
    9ef0:	3c400136 	bltu	r7,r17,9ef8 <__udivdi3+0x254>
    9ef4:	3880e436 	bltu	r7,r2,a288 <__udivdi3+0x5e4>
    9ef8:	202d883a 	mov	r22,r4
    9efc:	38a1c83a 	sub	r16,r7,r2
    9f00:	8009883a 	mov	r4,r16
    9f04:	a80b883a 	mov	r5,r21
    9f08:	d8c00115 	stw	r3,4(sp)
    9f0c:	000a9c00 	call	a9c0 <__umodsi3>
    9f10:	1027883a 	mov	r19,r2
    9f14:	8009883a 	mov	r4,r16
    9f18:	a80b883a 	mov	r5,r21
    9f1c:	9826943a 	slli	r19,r19,16
    9f20:	000a95c0 	call	a95c <__udivsi3>
    9f24:	a00b883a 	mov	r5,r20
    9f28:	1009883a 	mov	r4,r2
    9f2c:	94bfffcc 	andi	r18,r18,65535
    9f30:	1021883a 	mov	r16,r2
    9f34:	94e4b03a 	or	r18,r18,r19
    9f38:	000aa180 	call	aa18 <__mulsi3>
    9f3c:	d8c00117 	ldw	r3,4(sp)
    9f40:	9080052e 	bgeu	r18,r2,9f58 <__udivdi3+0x2b4>
    9f44:	8ca5883a 	add	r18,r17,r18
    9f48:	813fffc4 	addi	r4,r16,-1
    9f4c:	9440ad36 	bltu	r18,r17,a204 <__udivdi3+0x560>
    9f50:	9080ac2e 	bgeu	r18,r2,a204 <__udivdi3+0x560>
    9f54:	843fff84 	addi	r16,r16,-2
    9f58:	b004943a 	slli	r2,r22,16
    9f5c:	1404b03a 	or	r2,r2,r16
    9f60:	00000206 	br	9f6c <__udivdi3+0x2c8>
    9f64:	0007883a 	mov	r3,zero
    9f68:	0005883a 	mov	r2,zero
    9f6c:	dfc00b17 	ldw	ra,44(sp)
    9f70:	df000a17 	ldw	fp,40(sp)
    9f74:	ddc00917 	ldw	r23,36(sp)
    9f78:	dd800817 	ldw	r22,32(sp)
    9f7c:	dd400717 	ldw	r21,28(sp)
    9f80:	dd000617 	ldw	r20,24(sp)
    9f84:	dcc00517 	ldw	r19,20(sp)
    9f88:	dc800417 	ldw	r18,16(sp)
    9f8c:	dc400317 	ldw	r17,12(sp)
    9f90:	dc000217 	ldw	r16,8(sp)
    9f94:	dec00c04 	addi	sp,sp,48
    9f98:	f800283a 	ret
    9f9c:	00803fc4 	movi	r2,255
    9fa0:	11c5803a 	cmpltu	r2,r2,r7
    9fa4:	100490fa 	slli	r2,r2,3
    9fa8:	003f9906 	br	9e10 <__alt_data_end+0xfffe9e10>
    9fac:	00803fc4 	movi	r2,255
    9fb0:	1445803a 	cmpltu	r2,r2,r17
    9fb4:	100490fa 	slli	r2,r2,3
    9fb8:	003fad06 	br	9e70 <__alt_data_end+0xfffe9e70>
    9fbc:	00804034 	movhi	r2,256
    9fc0:	10bfffc4 	addi	r2,r2,-1
    9fc4:	11809f36 	bltu	r2,r6,a244 <__udivdi3+0x5a0>
    9fc8:	00800404 	movi	r2,16
    9fcc:	003f4c06 	br	9d00 <__alt_data_end+0xfffe9d00>
    9fd0:	3dce983a 	sll	r7,r7,r23
    9fd4:	30b8d83a 	srl	fp,r6,r2
    9fd8:	80a2d83a 	srl	r17,r16,r2
    9fdc:	35cc983a 	sll	r6,r6,r23
    9fe0:	3f38b03a 	or	fp,r7,fp
    9fe4:	e024d43a 	srli	r18,fp,16
    9fe8:	9884d83a 	srl	r2,r19,r2
    9fec:	85e0983a 	sll	r16,r16,r23
    9ff0:	8809883a 	mov	r4,r17
    9ff4:	900b883a 	mov	r5,r18
    9ff8:	d9800015 	stw	r6,0(sp)
    9ffc:	1420b03a 	or	r16,r2,r16
    a000:	000a9c00 	call	a9c0 <__umodsi3>
    a004:	900b883a 	mov	r5,r18
    a008:	8809883a 	mov	r4,r17
    a00c:	1029883a 	mov	r20,r2
    a010:	e5bfffcc 	andi	r22,fp,65535
    a014:	000a95c0 	call	a95c <__udivsi3>
    a018:	100b883a 	mov	r5,r2
    a01c:	b009883a 	mov	r4,r22
    a020:	102b883a 	mov	r21,r2
    a024:	000aa180 	call	aa18 <__mulsi3>
    a028:	a028943a 	slli	r20,r20,16
    a02c:	8006d43a 	srli	r3,r16,16
    a030:	1d06b03a 	or	r3,r3,r20
    a034:	1880042e 	bgeu	r3,r2,a048 <__udivdi3+0x3a4>
    a038:	1f07883a 	add	r3,r3,fp
    a03c:	a93fffc4 	addi	r4,r21,-1
    a040:	1f00892e 	bgeu	r3,fp,a268 <__udivdi3+0x5c4>
    a044:	202b883a 	mov	r21,r4
    a048:	18a3c83a 	sub	r17,r3,r2
    a04c:	8809883a 	mov	r4,r17
    a050:	900b883a 	mov	r5,r18
    a054:	000a9c00 	call	a9c0 <__umodsi3>
    a058:	1029883a 	mov	r20,r2
    a05c:	8809883a 	mov	r4,r17
    a060:	900b883a 	mov	r5,r18
    a064:	a028943a 	slli	r20,r20,16
    a068:	000a95c0 	call	a95c <__udivsi3>
    a06c:	100b883a 	mov	r5,r2
    a070:	b009883a 	mov	r4,r22
    a074:	843fffcc 	andi	r16,r16,65535
    a078:	1023883a 	mov	r17,r2
    a07c:	8520b03a 	or	r16,r16,r20
    a080:	000aa180 	call	aa18 <__mulsi3>
    a084:	8080042e 	bgeu	r16,r2,a098 <__udivdi3+0x3f4>
    a088:	8721883a 	add	r16,r16,fp
    a08c:	88ffffc4 	addi	r3,r17,-1
    a090:	8700712e 	bgeu	r16,fp,a258 <__udivdi3+0x5b4>
    a094:	1823883a 	mov	r17,r3
    a098:	a80e943a 	slli	r7,r21,16
    a09c:	d8c00017 	ldw	r3,0(sp)
    a0a0:	80a1c83a 	sub	r16,r16,r2
    a0a4:	3c64b03a 	or	r18,r7,r17
    a0a8:	1d3fffcc 	andi	r20,r3,65535
    a0ac:	9022d43a 	srli	r17,r18,16
    a0b0:	95bfffcc 	andi	r22,r18,65535
    a0b4:	a00b883a 	mov	r5,r20
    a0b8:	b009883a 	mov	r4,r22
    a0bc:	182ad43a 	srli	r21,r3,16
    a0c0:	000aa180 	call	aa18 <__mulsi3>
    a0c4:	a00b883a 	mov	r5,r20
    a0c8:	8809883a 	mov	r4,r17
    a0cc:	1039883a 	mov	fp,r2
    a0d0:	000aa180 	call	aa18 <__mulsi3>
    a0d4:	8809883a 	mov	r4,r17
    a0d8:	a80b883a 	mov	r5,r21
    a0dc:	1029883a 	mov	r20,r2
    a0e0:	000aa180 	call	aa18 <__mulsi3>
    a0e4:	a80b883a 	mov	r5,r21
    a0e8:	b009883a 	mov	r4,r22
    a0ec:	1023883a 	mov	r17,r2
    a0f0:	000aa180 	call	aa18 <__mulsi3>
    a0f4:	e006d43a 	srli	r3,fp,16
    a0f8:	1505883a 	add	r2,r2,r20
    a0fc:	1887883a 	add	r3,r3,r2
    a100:	1d00022e 	bgeu	r3,r20,a10c <__udivdi3+0x468>
    a104:	00800074 	movhi	r2,1
    a108:	88a3883a 	add	r17,r17,r2
    a10c:	1804d43a 	srli	r2,r3,16
    a110:	1463883a 	add	r17,r2,r17
    a114:	84404436 	bltu	r16,r17,a228 <__udivdi3+0x584>
    a118:	84403e26 	beq	r16,r17,a214 <__udivdi3+0x570>
    a11c:	9005883a 	mov	r2,r18
    a120:	0007883a 	mov	r3,zero
    a124:	003f9106 	br	9f6c <__alt_data_end+0xfffe9f6c>
    a128:	88e2983a 	sll	r17,r17,r3
    a12c:	80aed83a 	srl	r23,r16,r2
    a130:	80e0983a 	sll	r16,r16,r3
    a134:	882ad43a 	srli	r21,r17,16
    a138:	9884d83a 	srl	r2,r19,r2
    a13c:	b809883a 	mov	r4,r23
    a140:	a80b883a 	mov	r5,r21
    a144:	98e4983a 	sll	r18,r19,r3
    a148:	142cb03a 	or	r22,r2,r16
    a14c:	000a9c00 	call	a9c0 <__umodsi3>
    a150:	b809883a 	mov	r4,r23
    a154:	a80b883a 	mov	r5,r21
    a158:	1027883a 	mov	r19,r2
    a15c:	8d3fffcc 	andi	r20,r17,65535
    a160:	000a95c0 	call	a95c <__udivsi3>
    a164:	a009883a 	mov	r4,r20
    a168:	100b883a 	mov	r5,r2
    a16c:	102f883a 	mov	r23,r2
    a170:	000aa180 	call	aa18 <__mulsi3>
    a174:	9826943a 	slli	r19,r19,16
    a178:	b008d43a 	srli	r4,r22,16
    a17c:	24c8b03a 	or	r4,r4,r19
    a180:	2080062e 	bgeu	r4,r2,a19c <__udivdi3+0x4f8>
    a184:	2449883a 	add	r4,r4,r17
    a188:	b8ffffc4 	addi	r3,r23,-1
    a18c:	24403c36 	bltu	r4,r17,a280 <__udivdi3+0x5dc>
    a190:	20803b2e 	bgeu	r4,r2,a280 <__udivdi3+0x5dc>
    a194:	bdffff84 	addi	r23,r23,-2
    a198:	2449883a 	add	r4,r4,r17
    a19c:	20a1c83a 	sub	r16,r4,r2
    a1a0:	a80b883a 	mov	r5,r21
    a1a4:	8009883a 	mov	r4,r16
    a1a8:	000a9c00 	call	a9c0 <__umodsi3>
    a1ac:	a80b883a 	mov	r5,r21
    a1b0:	8009883a 	mov	r4,r16
    a1b4:	1027883a 	mov	r19,r2
    a1b8:	000a95c0 	call	a95c <__udivsi3>
    a1bc:	a009883a 	mov	r4,r20
    a1c0:	100b883a 	mov	r5,r2
    a1c4:	9826943a 	slli	r19,r19,16
    a1c8:	1039883a 	mov	fp,r2
    a1cc:	000aa180 	call	aa18 <__mulsi3>
    a1d0:	b13fffcc 	andi	r4,r22,65535
    a1d4:	24c8b03a 	or	r4,r4,r19
    a1d8:	2080062e 	bgeu	r4,r2,a1f4 <__udivdi3+0x550>
    a1dc:	2449883a 	add	r4,r4,r17
    a1e0:	e0ffffc4 	addi	r3,fp,-1
    a1e4:	24402436 	bltu	r4,r17,a278 <__udivdi3+0x5d4>
    a1e8:	2080232e 	bgeu	r4,r2,a278 <__udivdi3+0x5d4>
    a1ec:	e73fff84 	addi	fp,fp,-2
    a1f0:	2449883a 	add	r4,r4,r17
    a1f4:	b82e943a 	slli	r23,r23,16
    a1f8:	20a1c83a 	sub	r16,r4,r2
    a1fc:	bf06b03a 	or	r3,r23,fp
    a200:	003f2806 	br	9ea4 <__alt_data_end+0xfffe9ea4>
    a204:	2021883a 	mov	r16,r4
    a208:	003f5306 	br	9f58 <__alt_data_end+0xfffe9f58>
    a20c:	1821883a 	mov	r16,r3
    a210:	003ef406 	br	9de4 <__alt_data_end+0xfffe9de4>
    a214:	1806943a 	slli	r3,r3,16
    a218:	9de6983a 	sll	r19,r19,r23
    a21c:	e73fffcc 	andi	fp,fp,65535
    a220:	1f07883a 	add	r3,r3,fp
    a224:	98ffbd2e 	bgeu	r19,r3,a11c <__alt_data_end+0xfffea11c>
    a228:	90bfffc4 	addi	r2,r18,-1
    a22c:	0007883a 	mov	r3,zero
    a230:	003f4e06 	br	9f6c <__alt_data_end+0xfffe9f6c>
    a234:	00800604 	movi	r2,24
    a238:	003ef506 	br	9e10 <__alt_data_end+0xfffe9e10>
    a23c:	00800604 	movi	r2,24
    a240:	003f0b06 	br	9e70 <__alt_data_end+0xfffe9e70>
    a244:	00800604 	movi	r2,24
    a248:	003ead06 	br	9d00 <__alt_data_end+0xfffe9d00>
    a24c:	0007883a 	mov	r3,zero
    a250:	00800044 	movi	r2,1
    a254:	003f4506 	br	9f6c <__alt_data_end+0xfffe9f6c>
    a258:	80bf8e2e 	bgeu	r16,r2,a094 <__alt_data_end+0xfffea094>
    a25c:	8c7fff84 	addi	r17,r17,-2
    a260:	8721883a 	add	r16,r16,fp
    a264:	003f8c06 	br	a098 <__alt_data_end+0xfffea098>
    a268:	18bf762e 	bgeu	r3,r2,a044 <__alt_data_end+0xfffea044>
    a26c:	ad7fff84 	addi	r21,r21,-2
    a270:	1f07883a 	add	r3,r3,fp
    a274:	003f7406 	br	a048 <__alt_data_end+0xfffea048>
    a278:	1839883a 	mov	fp,r3
    a27c:	003fdd06 	br	a1f4 <__alt_data_end+0xfffea1f4>
    a280:	182f883a 	mov	r23,r3
    a284:	003fc506 	br	a19c <__alt_data_end+0xfffea19c>
    a288:	b5bfff84 	addi	r22,r22,-2
    a28c:	3c4f883a 	add	r7,r7,r17
    a290:	003f1a06 	br	9efc <__alt_data_end+0xfffe9efc>
    a294:	b5bfff84 	addi	r22,r22,-2
    a298:	1c47883a 	add	r3,r3,r17
    a29c:	003ebc06 	br	9d90 <__alt_data_end+0xfffe9d90>

0000a2a0 <__umoddi3>:
    a2a0:	defff304 	addi	sp,sp,-52
    a2a4:	df000b15 	stw	fp,44(sp)
    a2a8:	dc400415 	stw	r17,16(sp)
    a2ac:	dc000315 	stw	r16,12(sp)
    a2b0:	dfc00c15 	stw	ra,48(sp)
    a2b4:	ddc00a15 	stw	r23,40(sp)
    a2b8:	dd800915 	stw	r22,36(sp)
    a2bc:	dd400815 	stw	r21,32(sp)
    a2c0:	dd000715 	stw	r20,28(sp)
    a2c4:	dcc00615 	stw	r19,24(sp)
    a2c8:	dc800515 	stw	r18,20(sp)
    a2cc:	2021883a 	mov	r16,r4
    a2d0:	2823883a 	mov	r17,r5
    a2d4:	2839883a 	mov	fp,r5
    a2d8:	3800401e 	bne	r7,zero,a3dc <__umoddi3+0x13c>
    a2dc:	3027883a 	mov	r19,r6
    a2e0:	2029883a 	mov	r20,r4
    a2e4:	2980552e 	bgeu	r5,r6,a43c <__umoddi3+0x19c>
    a2e8:	00bfffd4 	movui	r2,65535
    a2ec:	1180a236 	bltu	r2,r6,a578 <__umoddi3+0x2d8>
    a2f0:	01003fc4 	movi	r4,255
    a2f4:	2189803a 	cmpltu	r4,r4,r6
    a2f8:	200890fa 	slli	r4,r4,3
    a2fc:	3104d83a 	srl	r2,r6,r4
    a300:	00c00074 	movhi	r3,1
    a304:	18ff1404 	addi	r3,r3,-944
    a308:	1885883a 	add	r2,r3,r2
    a30c:	10c00003 	ldbu	r3,0(r2)
    a310:	00800804 	movi	r2,32
    a314:	1909883a 	add	r4,r3,r4
    a318:	1125c83a 	sub	r18,r2,r4
    a31c:	90000526 	beq	r18,zero,a334 <__umoddi3+0x94>
    a320:	8ca2983a 	sll	r17,r17,r18
    a324:	8108d83a 	srl	r4,r16,r4
    a328:	34a6983a 	sll	r19,r6,r18
    a32c:	84a8983a 	sll	r20,r16,r18
    a330:	2478b03a 	or	fp,r4,r17
    a334:	982cd43a 	srli	r22,r19,16
    a338:	e009883a 	mov	r4,fp
    a33c:	9dffffcc 	andi	r23,r19,65535
    a340:	b00b883a 	mov	r5,r22
    a344:	000a9c00 	call	a9c0 <__umodsi3>
    a348:	b00b883a 	mov	r5,r22
    a34c:	e009883a 	mov	r4,fp
    a350:	102b883a 	mov	r21,r2
    a354:	000a95c0 	call	a95c <__udivsi3>
    a358:	100b883a 	mov	r5,r2
    a35c:	b809883a 	mov	r4,r23
    a360:	000aa180 	call	aa18 <__mulsi3>
    a364:	a82a943a 	slli	r21,r21,16
    a368:	a006d43a 	srli	r3,r20,16
    a36c:	1d46b03a 	or	r3,r3,r21
    a370:	1880032e 	bgeu	r3,r2,a380 <__umoddi3+0xe0>
    a374:	1cc7883a 	add	r3,r3,r19
    a378:	1cc00136 	bltu	r3,r19,a380 <__umoddi3+0xe0>
    a37c:	18813136 	bltu	r3,r2,a844 <__umoddi3+0x5a4>
    a380:	18a1c83a 	sub	r16,r3,r2
    a384:	b00b883a 	mov	r5,r22
    a388:	8009883a 	mov	r4,r16
    a38c:	000a9c00 	call	a9c0 <__umodsi3>
    a390:	b00b883a 	mov	r5,r22
    a394:	8009883a 	mov	r4,r16
    a398:	1023883a 	mov	r17,r2
    a39c:	000a95c0 	call	a95c <__udivsi3>
    a3a0:	100b883a 	mov	r5,r2
    a3a4:	b809883a 	mov	r4,r23
    a3a8:	8822943a 	slli	r17,r17,16
    a3ac:	000aa180 	call	aa18 <__mulsi3>
    a3b0:	a0ffffcc 	andi	r3,r20,65535
    a3b4:	1c46b03a 	or	r3,r3,r17
    a3b8:	1880042e 	bgeu	r3,r2,a3cc <__umoddi3+0x12c>
    a3bc:	1cc7883a 	add	r3,r3,r19
    a3c0:	1cc00236 	bltu	r3,r19,a3cc <__umoddi3+0x12c>
    a3c4:	1880012e 	bgeu	r3,r2,a3cc <__umoddi3+0x12c>
    a3c8:	1cc7883a 	add	r3,r3,r19
    a3cc:	1885c83a 	sub	r2,r3,r2
    a3d0:	1484d83a 	srl	r2,r2,r18
    a3d4:	0007883a 	mov	r3,zero
    a3d8:	00005306 	br	a528 <__umoddi3+0x288>
    a3dc:	29c05036 	bltu	r5,r7,a520 <__umoddi3+0x280>
    a3e0:	00bfffd4 	movui	r2,65535
    a3e4:	11c05c2e 	bgeu	r2,r7,a558 <__umoddi3+0x2b8>
    a3e8:	00804034 	movhi	r2,256
    a3ec:	10bfffc4 	addi	r2,r2,-1
    a3f0:	11c10636 	bltu	r2,r7,a80c <__umoddi3+0x56c>
    a3f4:	01000404 	movi	r4,16
    a3f8:	3904d83a 	srl	r2,r7,r4
    a3fc:	00c00074 	movhi	r3,1
    a400:	18ff1404 	addi	r3,r3,-944
    a404:	1885883a 	add	r2,r3,r2
    a408:	14c00003 	ldbu	r19,0(r2)
    a40c:	00c00804 	movi	r3,32
    a410:	9927883a 	add	r19,r19,r4
    a414:	1ce9c83a 	sub	r20,r3,r19
    a418:	a0005c1e 	bne	r20,zero,a58c <__umoddi3+0x2ec>
    a41c:	3c400136 	bltu	r7,r17,a424 <__umoddi3+0x184>
    a420:	81810a36 	bltu	r16,r6,a84c <__umoddi3+0x5ac>
    a424:	8185c83a 	sub	r2,r16,r6
    a428:	89e3c83a 	sub	r17,r17,r7
    a42c:	8089803a 	cmpltu	r4,r16,r2
    a430:	8939c83a 	sub	fp,r17,r4
    a434:	e007883a 	mov	r3,fp
    a438:	00003b06 	br	a528 <__umoddi3+0x288>
    a43c:	3000041e 	bne	r6,zero,a450 <__umoddi3+0x1b0>
    a440:	000b883a 	mov	r5,zero
    a444:	01000044 	movi	r4,1
    a448:	000a95c0 	call	a95c <__udivsi3>
    a44c:	1027883a 	mov	r19,r2
    a450:	00bfffd4 	movui	r2,65535
    a454:	14c0442e 	bgeu	r2,r19,a568 <__umoddi3+0x2c8>
    a458:	00804034 	movhi	r2,256
    a45c:	10bfffc4 	addi	r2,r2,-1
    a460:	14c0ec36 	bltu	r2,r19,a814 <__umoddi3+0x574>
    a464:	00800404 	movi	r2,16
    a468:	9886d83a 	srl	r3,r19,r2
    a46c:	01000074 	movhi	r4,1
    a470:	213f1404 	addi	r4,r4,-944
    a474:	20c7883a 	add	r3,r4,r3
    a478:	18c00003 	ldbu	r3,0(r3)
    a47c:	1887883a 	add	r3,r3,r2
    a480:	00800804 	movi	r2,32
    a484:	10e5c83a 	sub	r18,r2,r3
    a488:	9000ab1e 	bne	r18,zero,a738 <__umoddi3+0x498>
    a48c:	982cd43a 	srli	r22,r19,16
    a490:	8ce3c83a 	sub	r17,r17,r19
    a494:	9dffffcc 	andi	r23,r19,65535
    a498:	b00b883a 	mov	r5,r22
    a49c:	8809883a 	mov	r4,r17
    a4a0:	000a9c00 	call	a9c0 <__umodsi3>
    a4a4:	b00b883a 	mov	r5,r22
    a4a8:	8809883a 	mov	r4,r17
    a4ac:	102b883a 	mov	r21,r2
    a4b0:	000a95c0 	call	a95c <__udivsi3>
    a4b4:	b80b883a 	mov	r5,r23
    a4b8:	1009883a 	mov	r4,r2
    a4bc:	000aa180 	call	aa18 <__mulsi3>
    a4c0:	a82a943a 	slli	r21,r21,16
    a4c4:	a006d43a 	srli	r3,r20,16
    a4c8:	1d46b03a 	or	r3,r3,r21
    a4cc:	1880042e 	bgeu	r3,r2,a4e0 <__umoddi3+0x240>
    a4d0:	1cc7883a 	add	r3,r3,r19
    a4d4:	1cc00236 	bltu	r3,r19,a4e0 <__umoddi3+0x240>
    a4d8:	1880012e 	bgeu	r3,r2,a4e0 <__umoddi3+0x240>
    a4dc:	1cc7883a 	add	r3,r3,r19
    a4e0:	18a1c83a 	sub	r16,r3,r2
    a4e4:	b00b883a 	mov	r5,r22
    a4e8:	8009883a 	mov	r4,r16
    a4ec:	000a9c00 	call	a9c0 <__umodsi3>
    a4f0:	1023883a 	mov	r17,r2
    a4f4:	b00b883a 	mov	r5,r22
    a4f8:	8009883a 	mov	r4,r16
    a4fc:	000a95c0 	call	a95c <__udivsi3>
    a500:	8822943a 	slli	r17,r17,16
    a504:	b80b883a 	mov	r5,r23
    a508:	1009883a 	mov	r4,r2
    a50c:	000aa180 	call	aa18 <__mulsi3>
    a510:	a53fffcc 	andi	r20,r20,65535
    a514:	a446b03a 	or	r3,r20,r17
    a518:	18bfac2e 	bgeu	r3,r2,a3cc <__alt_data_end+0xfffea3cc>
    a51c:	003fa706 	br	a3bc <__alt_data_end+0xfffea3bc>
    a520:	2005883a 	mov	r2,r4
    a524:	2807883a 	mov	r3,r5
    a528:	dfc00c17 	ldw	ra,48(sp)
    a52c:	df000b17 	ldw	fp,44(sp)
    a530:	ddc00a17 	ldw	r23,40(sp)
    a534:	dd800917 	ldw	r22,36(sp)
    a538:	dd400817 	ldw	r21,32(sp)
    a53c:	dd000717 	ldw	r20,28(sp)
    a540:	dcc00617 	ldw	r19,24(sp)
    a544:	dc800517 	ldw	r18,20(sp)
    a548:	dc400417 	ldw	r17,16(sp)
    a54c:	dc000317 	ldw	r16,12(sp)
    a550:	dec00d04 	addi	sp,sp,52
    a554:	f800283a 	ret
    a558:	04c03fc4 	movi	r19,255
    a55c:	99c9803a 	cmpltu	r4,r19,r7
    a560:	200890fa 	slli	r4,r4,3
    a564:	003fa406 	br	a3f8 <__alt_data_end+0xfffea3f8>
    a568:	00803fc4 	movi	r2,255
    a56c:	14c5803a 	cmpltu	r2,r2,r19
    a570:	100490fa 	slli	r2,r2,3
    a574:	003fbc06 	br	a468 <__alt_data_end+0xfffea468>
    a578:	00804034 	movhi	r2,256
    a57c:	10bfffc4 	addi	r2,r2,-1
    a580:	1180a636 	bltu	r2,r6,a81c <__umoddi3+0x57c>
    a584:	01000404 	movi	r4,16
    a588:	003f5c06 	br	a2fc <__alt_data_end+0xfffea2fc>
    a58c:	3d0e983a 	sll	r7,r7,r20
    a590:	34ead83a 	srl	r21,r6,r19
    a594:	8cc6d83a 	srl	r3,r17,r19
    a598:	8d10983a 	sll	r8,r17,r20
    a59c:	3d6ab03a 	or	r21,r7,r21
    a5a0:	a82cd43a 	srli	r22,r21,16
    a5a4:	84e2d83a 	srl	r17,r16,r19
    a5a8:	1809883a 	mov	r4,r3
    a5ac:	b00b883a 	mov	r5,r22
    a5b0:	8a22b03a 	or	r17,r17,r8
    a5b4:	3524983a 	sll	r18,r6,r20
    a5b8:	dc400015 	stw	r17,0(sp)
    a5bc:	d8c00115 	stw	r3,4(sp)
    a5c0:	000a9c00 	call	a9c0 <__umodsi3>
    a5c4:	d8c00117 	ldw	r3,4(sp)
    a5c8:	b00b883a 	mov	r5,r22
    a5cc:	1039883a 	mov	fp,r2
    a5d0:	1809883a 	mov	r4,r3
    a5d4:	000a95c0 	call	a95c <__udivsi3>
    a5d8:	adffffcc 	andi	r23,r21,65535
    a5dc:	100b883a 	mov	r5,r2
    a5e0:	b809883a 	mov	r4,r23
    a5e4:	1023883a 	mov	r17,r2
    a5e8:	000aa180 	call	aa18 <__mulsi3>
    a5ec:	d9400017 	ldw	r5,0(sp)
    a5f0:	e008943a 	slli	r4,fp,16
    a5f4:	8520983a 	sll	r16,r16,r20
    a5f8:	2806d43a 	srli	r3,r5,16
    a5fc:	1906b03a 	or	r3,r3,r4
    a600:	1880042e 	bgeu	r3,r2,a614 <__umoddi3+0x374>
    a604:	1d47883a 	add	r3,r3,r21
    a608:	893fffc4 	addi	r4,r17,-1
    a60c:	1d40892e 	bgeu	r3,r21,a834 <__umoddi3+0x594>
    a610:	2023883a 	mov	r17,r4
    a614:	18b9c83a 	sub	fp,r3,r2
    a618:	b00b883a 	mov	r5,r22
    a61c:	e009883a 	mov	r4,fp
    a620:	000a9c00 	call	a9c0 <__umodsi3>
    a624:	b00b883a 	mov	r5,r22
    a628:	e009883a 	mov	r4,fp
    a62c:	d8800215 	stw	r2,8(sp)
    a630:	000a95c0 	call	a95c <__udivsi3>
    a634:	100b883a 	mov	r5,r2
    a638:	b809883a 	mov	r4,r23
    a63c:	102d883a 	mov	r22,r2
    a640:	000aa180 	call	aa18 <__mulsi3>
    a644:	d9800217 	ldw	r6,8(sp)
    a648:	d8c00017 	ldw	r3,0(sp)
    a64c:	300c943a 	slli	r6,r6,16
    a650:	1a3fffcc 	andi	r8,r3,65535
    a654:	4190b03a 	or	r8,r8,r6
    a658:	4080042e 	bgeu	r8,r2,a66c <__umoddi3+0x3cc>
    a65c:	4551883a 	add	r8,r8,r21
    a660:	b0ffffc4 	addi	r3,r22,-1
    a664:	45406f2e 	bgeu	r8,r21,a824 <__umoddi3+0x584>
    a668:	182d883a 	mov	r22,r3
    a66c:	880e943a 	slli	r7,r17,16
    a670:	9006d43a 	srli	r3,r18,16
    a674:	91bfffcc 	andi	r6,r18,65535
    a678:	3dacb03a 	or	r22,r7,r22
    a67c:	b02ed43a 	srli	r23,r22,16
    a680:	b5bfffcc 	andi	r22,r22,65535
    a684:	300b883a 	mov	r5,r6
    a688:	b009883a 	mov	r4,r22
    a68c:	40a3c83a 	sub	r17,r8,r2
    a690:	d8c00115 	stw	r3,4(sp)
    a694:	d9800215 	stw	r6,8(sp)
    a698:	000aa180 	call	aa18 <__mulsi3>
    a69c:	d9800217 	ldw	r6,8(sp)
    a6a0:	b809883a 	mov	r4,r23
    a6a4:	1039883a 	mov	fp,r2
    a6a8:	300b883a 	mov	r5,r6
    a6ac:	000aa180 	call	aa18 <__mulsi3>
    a6b0:	d8c00117 	ldw	r3,4(sp)
    a6b4:	b809883a 	mov	r4,r23
    a6b8:	d8800215 	stw	r2,8(sp)
    a6bc:	180b883a 	mov	r5,r3
    a6c0:	000aa180 	call	aa18 <__mulsi3>
    a6c4:	d8c00117 	ldw	r3,4(sp)
    a6c8:	b009883a 	mov	r4,r22
    a6cc:	102f883a 	mov	r23,r2
    a6d0:	180b883a 	mov	r5,r3
    a6d4:	000aa180 	call	aa18 <__mulsi3>
    a6d8:	d9800217 	ldw	r6,8(sp)
    a6dc:	e006d43a 	srli	r3,fp,16
    a6e0:	1185883a 	add	r2,r2,r6
    a6e4:	1885883a 	add	r2,r3,r2
    a6e8:	1180022e 	bgeu	r2,r6,a6f4 <__umoddi3+0x454>
    a6ec:	00c00074 	movhi	r3,1
    a6f0:	b8ef883a 	add	r23,r23,r3
    a6f4:	1006d43a 	srli	r3,r2,16
    a6f8:	1004943a 	slli	r2,r2,16
    a6fc:	e73fffcc 	andi	fp,fp,65535
    a700:	1dc7883a 	add	r3,r3,r23
    a704:	1739883a 	add	fp,r2,fp
    a708:	88c03a36 	bltu	r17,r3,a7f4 <__umoddi3+0x554>
    a70c:	88c05126 	beq	r17,r3,a854 <__umoddi3+0x5b4>
    a710:	88c9c83a 	sub	r4,r17,r3
    a714:	e00f883a 	mov	r7,fp
    a718:	81cfc83a 	sub	r7,r16,r7
    a71c:	81c7803a 	cmpltu	r3,r16,r7
    a720:	20c7c83a 	sub	r3,r4,r3
    a724:	1cc4983a 	sll	r2,r3,r19
    a728:	3d0ed83a 	srl	r7,r7,r20
    a72c:	1d06d83a 	srl	r3,r3,r20
    a730:	11c4b03a 	or	r2,r2,r7
    a734:	003f7c06 	br	a528 <__alt_data_end+0xfffea528>
    a738:	9ca6983a 	sll	r19,r19,r18
    a73c:	88f8d83a 	srl	fp,r17,r3
    a740:	80c4d83a 	srl	r2,r16,r3
    a744:	982cd43a 	srli	r22,r19,16
    a748:	8ca2983a 	sll	r17,r17,r18
    a74c:	e009883a 	mov	r4,fp
    a750:	b00b883a 	mov	r5,r22
    a754:	146ab03a 	or	r21,r2,r17
    a758:	000a9c00 	call	a9c0 <__umodsi3>
    a75c:	b00b883a 	mov	r5,r22
    a760:	e009883a 	mov	r4,fp
    a764:	1029883a 	mov	r20,r2
    a768:	9dffffcc 	andi	r23,r19,65535
    a76c:	000a95c0 	call	a95c <__udivsi3>
    a770:	b809883a 	mov	r4,r23
    a774:	100b883a 	mov	r5,r2
    a778:	000aa180 	call	aa18 <__mulsi3>
    a77c:	a008943a 	slli	r4,r20,16
    a780:	a806d43a 	srli	r3,r21,16
    a784:	84a8983a 	sll	r20,r16,r18
    a788:	1906b03a 	or	r3,r3,r4
    a78c:	1880042e 	bgeu	r3,r2,a7a0 <__umoddi3+0x500>
    a790:	1cc7883a 	add	r3,r3,r19
    a794:	1cc00236 	bltu	r3,r19,a7a0 <__umoddi3+0x500>
    a798:	1880012e 	bgeu	r3,r2,a7a0 <__umoddi3+0x500>
    a79c:	1cc7883a 	add	r3,r3,r19
    a7a0:	18a3c83a 	sub	r17,r3,r2
    a7a4:	b00b883a 	mov	r5,r22
    a7a8:	8809883a 	mov	r4,r17
    a7ac:	000a9c00 	call	a9c0 <__umodsi3>
    a7b0:	b00b883a 	mov	r5,r22
    a7b4:	8809883a 	mov	r4,r17
    a7b8:	1021883a 	mov	r16,r2
    a7bc:	000a95c0 	call	a95c <__udivsi3>
    a7c0:	100b883a 	mov	r5,r2
    a7c4:	b809883a 	mov	r4,r23
    a7c8:	8020943a 	slli	r16,r16,16
    a7cc:	000aa180 	call	aa18 <__mulsi3>
    a7d0:	a8ffffcc 	andi	r3,r21,65535
    a7d4:	1c06b03a 	or	r3,r3,r16
    a7d8:	1880042e 	bgeu	r3,r2,a7ec <__umoddi3+0x54c>
    a7dc:	1cc7883a 	add	r3,r3,r19
    a7e0:	1cc00236 	bltu	r3,r19,a7ec <__umoddi3+0x54c>
    a7e4:	1880012e 	bgeu	r3,r2,a7ec <__umoddi3+0x54c>
    a7e8:	1cc7883a 	add	r3,r3,r19
    a7ec:	18a3c83a 	sub	r17,r3,r2
    a7f0:	003f2906 	br	a498 <__alt_data_end+0xfffea498>
    a7f4:	e48fc83a 	sub	r7,fp,r18
    a7f8:	1d49c83a 	sub	r4,r3,r21
    a7fc:	e1f9803a 	cmpltu	fp,fp,r7
    a800:	2739c83a 	sub	fp,r4,fp
    a804:	8f09c83a 	sub	r4,r17,fp
    a808:	003fc306 	br	a718 <__alt_data_end+0xfffea718>
    a80c:	01000604 	movi	r4,24
    a810:	003ef906 	br	a3f8 <__alt_data_end+0xfffea3f8>
    a814:	00800604 	movi	r2,24
    a818:	003f1306 	br	a468 <__alt_data_end+0xfffea468>
    a81c:	01000604 	movi	r4,24
    a820:	003eb606 	br	a2fc <__alt_data_end+0xfffea2fc>
    a824:	40bf902e 	bgeu	r8,r2,a668 <__alt_data_end+0xfffea668>
    a828:	b5bfff84 	addi	r22,r22,-2
    a82c:	4551883a 	add	r8,r8,r21
    a830:	003f8e06 	br	a66c <__alt_data_end+0xfffea66c>
    a834:	18bf762e 	bgeu	r3,r2,a610 <__alt_data_end+0xfffea610>
    a838:	8c7fff84 	addi	r17,r17,-2
    a83c:	1d47883a 	add	r3,r3,r21
    a840:	003f7406 	br	a614 <__alt_data_end+0xfffea614>
    a844:	1cc7883a 	add	r3,r3,r19
    a848:	003ecd06 	br	a380 <__alt_data_end+0xfffea380>
    a84c:	8005883a 	mov	r2,r16
    a850:	003ef806 	br	a434 <__alt_data_end+0xfffea434>
    a854:	873fe736 	bltu	r16,fp,a7f4 <__alt_data_end+0xfffea7f4>
    a858:	e00f883a 	mov	r7,fp
    a85c:	0009883a 	mov	r4,zero
    a860:	003fad06 	br	a718 <__alt_data_end+0xfffea718>

0000a864 <__divsi3>:
    a864:	20001b16 	blt	r4,zero,a8d4 <__divsi3+0x70>
    a868:	000f883a 	mov	r7,zero
    a86c:	28001616 	blt	r5,zero,a8c8 <__divsi3+0x64>
    a870:	200d883a 	mov	r6,r4
    a874:	29001a2e 	bgeu	r5,r4,a8e0 <__divsi3+0x7c>
    a878:	00800804 	movi	r2,32
    a87c:	00c00044 	movi	r3,1
    a880:	00000106 	br	a888 <__divsi3+0x24>
    a884:	10000d26 	beq	r2,zero,a8bc <__divsi3+0x58>
    a888:	294b883a 	add	r5,r5,r5
    a88c:	10bfffc4 	addi	r2,r2,-1
    a890:	18c7883a 	add	r3,r3,r3
    a894:	293ffb36 	bltu	r5,r4,a884 <__alt_data_end+0xfffea884>
    a898:	0005883a 	mov	r2,zero
    a89c:	18000726 	beq	r3,zero,a8bc <__divsi3+0x58>
    a8a0:	0005883a 	mov	r2,zero
    a8a4:	31400236 	bltu	r6,r5,a8b0 <__divsi3+0x4c>
    a8a8:	314dc83a 	sub	r6,r6,r5
    a8ac:	10c4b03a 	or	r2,r2,r3
    a8b0:	1806d07a 	srli	r3,r3,1
    a8b4:	280ad07a 	srli	r5,r5,1
    a8b8:	183ffa1e 	bne	r3,zero,a8a4 <__alt_data_end+0xfffea8a4>
    a8bc:	38000126 	beq	r7,zero,a8c4 <__divsi3+0x60>
    a8c0:	0085c83a 	sub	r2,zero,r2
    a8c4:	f800283a 	ret
    a8c8:	014bc83a 	sub	r5,zero,r5
    a8cc:	39c0005c 	xori	r7,r7,1
    a8d0:	003fe706 	br	a870 <__alt_data_end+0xfffea870>
    a8d4:	0109c83a 	sub	r4,zero,r4
    a8d8:	01c00044 	movi	r7,1
    a8dc:	003fe306 	br	a86c <__alt_data_end+0xfffea86c>
    a8e0:	00c00044 	movi	r3,1
    a8e4:	003fee06 	br	a8a0 <__alt_data_end+0xfffea8a0>

0000a8e8 <__modsi3>:
    a8e8:	20001716 	blt	r4,zero,a948 <__modsi3+0x60>
    a8ec:	000f883a 	mov	r7,zero
    a8f0:	2005883a 	mov	r2,r4
    a8f4:	28001216 	blt	r5,zero,a940 <__modsi3+0x58>
    a8f8:	2900162e 	bgeu	r5,r4,a954 <__modsi3+0x6c>
    a8fc:	01800804 	movi	r6,32
    a900:	00c00044 	movi	r3,1
    a904:	00000106 	br	a90c <__modsi3+0x24>
    a908:	30000a26 	beq	r6,zero,a934 <__modsi3+0x4c>
    a90c:	294b883a 	add	r5,r5,r5
    a910:	31bfffc4 	addi	r6,r6,-1
    a914:	18c7883a 	add	r3,r3,r3
    a918:	293ffb36 	bltu	r5,r4,a908 <__alt_data_end+0xfffea908>
    a91c:	18000526 	beq	r3,zero,a934 <__modsi3+0x4c>
    a920:	1806d07a 	srli	r3,r3,1
    a924:	11400136 	bltu	r2,r5,a92c <__modsi3+0x44>
    a928:	1145c83a 	sub	r2,r2,r5
    a92c:	280ad07a 	srli	r5,r5,1
    a930:	183ffb1e 	bne	r3,zero,a920 <__alt_data_end+0xfffea920>
    a934:	38000126 	beq	r7,zero,a93c <__modsi3+0x54>
    a938:	0085c83a 	sub	r2,zero,r2
    a93c:	f800283a 	ret
    a940:	014bc83a 	sub	r5,zero,r5
    a944:	003fec06 	br	a8f8 <__alt_data_end+0xfffea8f8>
    a948:	0109c83a 	sub	r4,zero,r4
    a94c:	01c00044 	movi	r7,1
    a950:	003fe706 	br	a8f0 <__alt_data_end+0xfffea8f0>
    a954:	00c00044 	movi	r3,1
    a958:	003ff106 	br	a920 <__alt_data_end+0xfffea920>

0000a95c <__udivsi3>:
    a95c:	200d883a 	mov	r6,r4
    a960:	2900152e 	bgeu	r5,r4,a9b8 <__udivsi3+0x5c>
    a964:	28001416 	blt	r5,zero,a9b8 <__udivsi3+0x5c>
    a968:	00800804 	movi	r2,32
    a96c:	00c00044 	movi	r3,1
    a970:	00000206 	br	a97c <__udivsi3+0x20>
    a974:	10000e26 	beq	r2,zero,a9b0 <__udivsi3+0x54>
    a978:	28000516 	blt	r5,zero,a990 <__udivsi3+0x34>
    a97c:	294b883a 	add	r5,r5,r5
    a980:	10bfffc4 	addi	r2,r2,-1
    a984:	18c7883a 	add	r3,r3,r3
    a988:	293ffa36 	bltu	r5,r4,a974 <__alt_data_end+0xfffea974>
    a98c:	18000826 	beq	r3,zero,a9b0 <__udivsi3+0x54>
    a990:	0005883a 	mov	r2,zero
    a994:	31400236 	bltu	r6,r5,a9a0 <__udivsi3+0x44>
    a998:	314dc83a 	sub	r6,r6,r5
    a99c:	10c4b03a 	or	r2,r2,r3
    a9a0:	1806d07a 	srli	r3,r3,1
    a9a4:	280ad07a 	srli	r5,r5,1
    a9a8:	183ffa1e 	bne	r3,zero,a994 <__alt_data_end+0xfffea994>
    a9ac:	f800283a 	ret
    a9b0:	0005883a 	mov	r2,zero
    a9b4:	f800283a 	ret
    a9b8:	00c00044 	movi	r3,1
    a9bc:	003ff406 	br	a990 <__alt_data_end+0xfffea990>

0000a9c0 <__umodsi3>:
    a9c0:	2005883a 	mov	r2,r4
    a9c4:	2900122e 	bgeu	r5,r4,aa10 <__umodsi3+0x50>
    a9c8:	28001116 	blt	r5,zero,aa10 <__umodsi3+0x50>
    a9cc:	01800804 	movi	r6,32
    a9d0:	00c00044 	movi	r3,1
    a9d4:	00000206 	br	a9e0 <__umodsi3+0x20>
    a9d8:	30000c26 	beq	r6,zero,aa0c <__umodsi3+0x4c>
    a9dc:	28000516 	blt	r5,zero,a9f4 <__umodsi3+0x34>
    a9e0:	294b883a 	add	r5,r5,r5
    a9e4:	31bfffc4 	addi	r6,r6,-1
    a9e8:	18c7883a 	add	r3,r3,r3
    a9ec:	293ffa36 	bltu	r5,r4,a9d8 <__alt_data_end+0xfffea9d8>
    a9f0:	18000626 	beq	r3,zero,aa0c <__umodsi3+0x4c>
    a9f4:	1806d07a 	srli	r3,r3,1
    a9f8:	11400136 	bltu	r2,r5,aa00 <__umodsi3+0x40>
    a9fc:	1145c83a 	sub	r2,r2,r5
    aa00:	280ad07a 	srli	r5,r5,1
    aa04:	183ffb1e 	bne	r3,zero,a9f4 <__alt_data_end+0xfffea9f4>
    aa08:	f800283a 	ret
    aa0c:	f800283a 	ret
    aa10:	00c00044 	movi	r3,1
    aa14:	003ff706 	br	a9f4 <__alt_data_end+0xfffea9f4>

0000aa18 <__mulsi3>:
    aa18:	0005883a 	mov	r2,zero
    aa1c:	20000726 	beq	r4,zero,aa3c <__mulsi3+0x24>
    aa20:	20c0004c 	andi	r3,r4,1
    aa24:	2008d07a 	srli	r4,r4,1
    aa28:	18000126 	beq	r3,zero,aa30 <__mulsi3+0x18>
    aa2c:	1145883a 	add	r2,r2,r5
    aa30:	294b883a 	add	r5,r5,r5
    aa34:	203ffa1e 	bne	r4,zero,aa20 <__alt_data_end+0xfffeaa20>
    aa38:	f800283a 	ret
    aa3c:	f800283a 	ret

0000aa40 <__adddf3>:
    aa40:	02c00434 	movhi	r11,16
    aa44:	5affffc4 	addi	r11,r11,-1
    aa48:	2806d7fa 	srli	r3,r5,31
    aa4c:	2ad4703a 	and	r10,r5,r11
    aa50:	3ad2703a 	and	r9,r7,r11
    aa54:	3804d53a 	srli	r2,r7,20
    aa58:	3018d77a 	srli	r12,r6,29
    aa5c:	280ad53a 	srli	r5,r5,20
    aa60:	501490fa 	slli	r10,r10,3
    aa64:	2010d77a 	srli	r8,r4,29
    aa68:	481290fa 	slli	r9,r9,3
    aa6c:	380ed7fa 	srli	r7,r7,31
    aa70:	defffb04 	addi	sp,sp,-20
    aa74:	dc800215 	stw	r18,8(sp)
    aa78:	dc400115 	stw	r17,4(sp)
    aa7c:	dc000015 	stw	r16,0(sp)
    aa80:	dfc00415 	stw	ra,16(sp)
    aa84:	dcc00315 	stw	r19,12(sp)
    aa88:	1c803fcc 	andi	r18,r3,255
    aa8c:	2c01ffcc 	andi	r16,r5,2047
    aa90:	5210b03a 	or	r8,r10,r8
    aa94:	202290fa 	slli	r17,r4,3
    aa98:	1081ffcc 	andi	r2,r2,2047
    aa9c:	4b12b03a 	or	r9,r9,r12
    aaa0:	300c90fa 	slli	r6,r6,3
    aaa4:	91c07526 	beq	r18,r7,ac7c <__adddf3+0x23c>
    aaa8:	8087c83a 	sub	r3,r16,r2
    aaac:	00c0ab0e 	bge	zero,r3,ad5c <__adddf3+0x31c>
    aab0:	10002a1e 	bne	r2,zero,ab5c <__adddf3+0x11c>
    aab4:	4984b03a 	or	r2,r9,r6
    aab8:	1000961e 	bne	r2,zero,ad14 <__adddf3+0x2d4>
    aabc:	888001cc 	andi	r2,r17,7
    aac0:	10000726 	beq	r2,zero,aae0 <__adddf3+0xa0>
    aac4:	888003cc 	andi	r2,r17,15
    aac8:	00c00104 	movi	r3,4
    aacc:	10c00426 	beq	r2,r3,aae0 <__adddf3+0xa0>
    aad0:	88c7883a 	add	r3,r17,r3
    aad4:	1c63803a 	cmpltu	r17,r3,r17
    aad8:	4451883a 	add	r8,r8,r17
    aadc:	1823883a 	mov	r17,r3
    aae0:	4080202c 	andhi	r2,r8,128
    aae4:	10005926 	beq	r2,zero,ac4c <__adddf3+0x20c>
    aae8:	84000044 	addi	r16,r16,1
    aaec:	0081ffc4 	movi	r2,2047
    aaf0:	8080ba26 	beq	r16,r2,addc <__adddf3+0x39c>
    aaf4:	00bfe034 	movhi	r2,65408
    aaf8:	10bfffc4 	addi	r2,r2,-1
    aafc:	4090703a 	and	r8,r8,r2
    ab00:	4004977a 	slli	r2,r8,29
    ab04:	4010927a 	slli	r8,r8,9
    ab08:	8822d0fa 	srli	r17,r17,3
    ab0c:	8401ffcc 	andi	r16,r16,2047
    ab10:	4010d33a 	srli	r8,r8,12
    ab14:	9007883a 	mov	r3,r18
    ab18:	1444b03a 	or	r2,r2,r17
    ab1c:	8401ffcc 	andi	r16,r16,2047
    ab20:	8020953a 	slli	r16,r16,20
    ab24:	18c03fcc 	andi	r3,r3,255
    ab28:	01000434 	movhi	r4,16
    ab2c:	213fffc4 	addi	r4,r4,-1
    ab30:	180697fa 	slli	r3,r3,31
    ab34:	4110703a 	and	r8,r8,r4
    ab38:	4410b03a 	or	r8,r8,r16
    ab3c:	40c6b03a 	or	r3,r8,r3
    ab40:	dfc00417 	ldw	ra,16(sp)
    ab44:	dcc00317 	ldw	r19,12(sp)
    ab48:	dc800217 	ldw	r18,8(sp)
    ab4c:	dc400117 	ldw	r17,4(sp)
    ab50:	dc000017 	ldw	r16,0(sp)
    ab54:	dec00504 	addi	sp,sp,20
    ab58:	f800283a 	ret
    ab5c:	0081ffc4 	movi	r2,2047
    ab60:	80bfd626 	beq	r16,r2,aabc <__alt_data_end+0xfffeaabc>
    ab64:	4a402034 	orhi	r9,r9,128
    ab68:	00800e04 	movi	r2,56
    ab6c:	10c09f16 	blt	r2,r3,adec <__adddf3+0x3ac>
    ab70:	008007c4 	movi	r2,31
    ab74:	10c0c216 	blt	r2,r3,ae80 <__adddf3+0x440>
    ab78:	00800804 	movi	r2,32
    ab7c:	10c5c83a 	sub	r2,r2,r3
    ab80:	488a983a 	sll	r5,r9,r2
    ab84:	30c8d83a 	srl	r4,r6,r3
    ab88:	3084983a 	sll	r2,r6,r2
    ab8c:	48c6d83a 	srl	r3,r9,r3
    ab90:	290cb03a 	or	r6,r5,r4
    ab94:	1004c03a 	cmpne	r2,r2,zero
    ab98:	308cb03a 	or	r6,r6,r2
    ab9c:	898dc83a 	sub	r6,r17,r6
    aba0:	89a3803a 	cmpltu	r17,r17,r6
    aba4:	40d1c83a 	sub	r8,r8,r3
    aba8:	4451c83a 	sub	r8,r8,r17
    abac:	3023883a 	mov	r17,r6
    abb0:	4080202c 	andhi	r2,r8,128
    abb4:	10002326 	beq	r2,zero,ac44 <__adddf3+0x204>
    abb8:	04c02034 	movhi	r19,128
    abbc:	9cffffc4 	addi	r19,r19,-1
    abc0:	44e6703a 	and	r19,r8,r19
    abc4:	98007626 	beq	r19,zero,ada0 <__adddf3+0x360>
    abc8:	9809883a 	mov	r4,r19
    abcc:	000d2800 	call	d280 <__clzsi2>
    abd0:	10fffe04 	addi	r3,r2,-8
    abd4:	010007c4 	movi	r4,31
    abd8:	20c07716 	blt	r4,r3,adb8 <__adddf3+0x378>
    abdc:	00800804 	movi	r2,32
    abe0:	10c5c83a 	sub	r2,r2,r3
    abe4:	8884d83a 	srl	r2,r17,r2
    abe8:	98d0983a 	sll	r8,r19,r3
    abec:	88e2983a 	sll	r17,r17,r3
    abf0:	1204b03a 	or	r2,r2,r8
    abf4:	1c007416 	blt	r3,r16,adc8 <__adddf3+0x388>
    abf8:	1c21c83a 	sub	r16,r3,r16
    abfc:	82000044 	addi	r8,r16,1
    ac00:	00c007c4 	movi	r3,31
    ac04:	1a009116 	blt	r3,r8,ae4c <__adddf3+0x40c>
    ac08:	00c00804 	movi	r3,32
    ac0c:	1a07c83a 	sub	r3,r3,r8
    ac10:	8a08d83a 	srl	r4,r17,r8
    ac14:	88e2983a 	sll	r17,r17,r3
    ac18:	10c6983a 	sll	r3,r2,r3
    ac1c:	1210d83a 	srl	r8,r2,r8
    ac20:	8804c03a 	cmpne	r2,r17,zero
    ac24:	1906b03a 	or	r3,r3,r4
    ac28:	18a2b03a 	or	r17,r3,r2
    ac2c:	0021883a 	mov	r16,zero
    ac30:	003fa206 	br	aabc <__alt_data_end+0xfffeaabc>
    ac34:	1890b03a 	or	r8,r3,r2
    ac38:	40017d26 	beq	r8,zero,b230 <__adddf3+0x7f0>
    ac3c:	1011883a 	mov	r8,r2
    ac40:	1823883a 	mov	r17,r3
    ac44:	888001cc 	andi	r2,r17,7
    ac48:	103f9e1e 	bne	r2,zero,aac4 <__alt_data_end+0xfffeaac4>
    ac4c:	4004977a 	slli	r2,r8,29
    ac50:	8822d0fa 	srli	r17,r17,3
    ac54:	4010d0fa 	srli	r8,r8,3
    ac58:	9007883a 	mov	r3,r18
    ac5c:	1444b03a 	or	r2,r2,r17
    ac60:	0101ffc4 	movi	r4,2047
    ac64:	81002426 	beq	r16,r4,acf8 <__adddf3+0x2b8>
    ac68:	8120703a 	and	r16,r16,r4
    ac6c:	01000434 	movhi	r4,16
    ac70:	213fffc4 	addi	r4,r4,-1
    ac74:	4110703a 	and	r8,r8,r4
    ac78:	003fa806 	br	ab1c <__alt_data_end+0xfffeab1c>
    ac7c:	8089c83a 	sub	r4,r16,r2
    ac80:	01005e0e 	bge	zero,r4,adfc <__adddf3+0x3bc>
    ac84:	10002b26 	beq	r2,zero,ad34 <__adddf3+0x2f4>
    ac88:	0081ffc4 	movi	r2,2047
    ac8c:	80bf8b26 	beq	r16,r2,aabc <__alt_data_end+0xfffeaabc>
    ac90:	4a402034 	orhi	r9,r9,128
    ac94:	00800e04 	movi	r2,56
    ac98:	1100a40e 	bge	r2,r4,af2c <__adddf3+0x4ec>
    ac9c:	498cb03a 	or	r6,r9,r6
    aca0:	300ac03a 	cmpne	r5,r6,zero
    aca4:	0013883a 	mov	r9,zero
    aca8:	2c4b883a 	add	r5,r5,r17
    acac:	2c63803a 	cmpltu	r17,r5,r17
    acb0:	4a11883a 	add	r8,r9,r8
    acb4:	8a11883a 	add	r8,r17,r8
    acb8:	2823883a 	mov	r17,r5
    acbc:	4080202c 	andhi	r2,r8,128
    acc0:	103fe026 	beq	r2,zero,ac44 <__alt_data_end+0xfffeac44>
    acc4:	84000044 	addi	r16,r16,1
    acc8:	0081ffc4 	movi	r2,2047
    accc:	8080d226 	beq	r16,r2,b018 <__adddf3+0x5d8>
    acd0:	00bfe034 	movhi	r2,65408
    acd4:	10bfffc4 	addi	r2,r2,-1
    acd8:	4090703a 	and	r8,r8,r2
    acdc:	880ad07a 	srli	r5,r17,1
    ace0:	400897fa 	slli	r4,r8,31
    ace4:	88c0004c 	andi	r3,r17,1
    ace8:	28e2b03a 	or	r17,r5,r3
    acec:	4010d07a 	srli	r8,r8,1
    acf0:	2462b03a 	or	r17,r4,r17
    acf4:	003f7106 	br	aabc <__alt_data_end+0xfffeaabc>
    acf8:	4088b03a 	or	r4,r8,r2
    acfc:	20014526 	beq	r4,zero,b214 <__adddf3+0x7d4>
    ad00:	01000434 	movhi	r4,16
    ad04:	42000234 	orhi	r8,r8,8
    ad08:	213fffc4 	addi	r4,r4,-1
    ad0c:	4110703a 	and	r8,r8,r4
    ad10:	003f8206 	br	ab1c <__alt_data_end+0xfffeab1c>
    ad14:	18ffffc4 	addi	r3,r3,-1
    ad18:	1800491e 	bne	r3,zero,ae40 <__adddf3+0x400>
    ad1c:	898bc83a 	sub	r5,r17,r6
    ad20:	8963803a 	cmpltu	r17,r17,r5
    ad24:	4251c83a 	sub	r8,r8,r9
    ad28:	4451c83a 	sub	r8,r8,r17
    ad2c:	2823883a 	mov	r17,r5
    ad30:	003f9f06 	br	abb0 <__alt_data_end+0xfffeabb0>
    ad34:	4984b03a 	or	r2,r9,r6
    ad38:	103f6026 	beq	r2,zero,aabc <__alt_data_end+0xfffeaabc>
    ad3c:	213fffc4 	addi	r4,r4,-1
    ad40:	2000931e 	bne	r4,zero,af90 <__adddf3+0x550>
    ad44:	898d883a 	add	r6,r17,r6
    ad48:	3463803a 	cmpltu	r17,r6,r17
    ad4c:	4251883a 	add	r8,r8,r9
    ad50:	8a11883a 	add	r8,r17,r8
    ad54:	3023883a 	mov	r17,r6
    ad58:	003fd806 	br	acbc <__alt_data_end+0xfffeacbc>
    ad5c:	1800541e 	bne	r3,zero,aeb0 <__adddf3+0x470>
    ad60:	80800044 	addi	r2,r16,1
    ad64:	1081ffcc 	andi	r2,r2,2047
    ad68:	00c00044 	movi	r3,1
    ad6c:	1880a00e 	bge	r3,r2,aff0 <__adddf3+0x5b0>
    ad70:	8989c83a 	sub	r4,r17,r6
    ad74:	8905803a 	cmpltu	r2,r17,r4
    ad78:	4267c83a 	sub	r19,r8,r9
    ad7c:	98a7c83a 	sub	r19,r19,r2
    ad80:	9880202c 	andhi	r2,r19,128
    ad84:	10006326 	beq	r2,zero,af14 <__adddf3+0x4d4>
    ad88:	3463c83a 	sub	r17,r6,r17
    ad8c:	4a07c83a 	sub	r3,r9,r8
    ad90:	344d803a 	cmpltu	r6,r6,r17
    ad94:	19a7c83a 	sub	r19,r3,r6
    ad98:	3825883a 	mov	r18,r7
    ad9c:	983f8a1e 	bne	r19,zero,abc8 <__alt_data_end+0xfffeabc8>
    ada0:	8809883a 	mov	r4,r17
    ada4:	000d2800 	call	d280 <__clzsi2>
    ada8:	10800804 	addi	r2,r2,32
    adac:	10fffe04 	addi	r3,r2,-8
    adb0:	010007c4 	movi	r4,31
    adb4:	20ff890e 	bge	r4,r3,abdc <__alt_data_end+0xfffeabdc>
    adb8:	10bff604 	addi	r2,r2,-40
    adbc:	8884983a 	sll	r2,r17,r2
    adc0:	0023883a 	mov	r17,zero
    adc4:	1c3f8c0e 	bge	r3,r16,abf8 <__alt_data_end+0xfffeabf8>
    adc8:	023fe034 	movhi	r8,65408
    adcc:	423fffc4 	addi	r8,r8,-1
    add0:	80e1c83a 	sub	r16,r16,r3
    add4:	1210703a 	and	r8,r2,r8
    add8:	003f3806 	br	aabc <__alt_data_end+0xfffeaabc>
    addc:	9007883a 	mov	r3,r18
    ade0:	0011883a 	mov	r8,zero
    ade4:	0005883a 	mov	r2,zero
    ade8:	003f4c06 	br	ab1c <__alt_data_end+0xfffeab1c>
    adec:	498cb03a 	or	r6,r9,r6
    adf0:	300cc03a 	cmpne	r6,r6,zero
    adf4:	0007883a 	mov	r3,zero
    adf8:	003f6806 	br	ab9c <__alt_data_end+0xfffeab9c>
    adfc:	20009c1e 	bne	r4,zero,b070 <__adddf3+0x630>
    ae00:	80800044 	addi	r2,r16,1
    ae04:	1141ffcc 	andi	r5,r2,2047
    ae08:	01000044 	movi	r4,1
    ae0c:	2140670e 	bge	r4,r5,afac <__adddf3+0x56c>
    ae10:	0101ffc4 	movi	r4,2047
    ae14:	11007f26 	beq	r2,r4,b014 <__adddf3+0x5d4>
    ae18:	898d883a 	add	r6,r17,r6
    ae1c:	4247883a 	add	r3,r8,r9
    ae20:	3451803a 	cmpltu	r8,r6,r17
    ae24:	40d1883a 	add	r8,r8,r3
    ae28:	402297fa 	slli	r17,r8,31
    ae2c:	300cd07a 	srli	r6,r6,1
    ae30:	4010d07a 	srli	r8,r8,1
    ae34:	1021883a 	mov	r16,r2
    ae38:	89a2b03a 	or	r17,r17,r6
    ae3c:	003f1f06 	br	aabc <__alt_data_end+0xfffeaabc>
    ae40:	0081ffc4 	movi	r2,2047
    ae44:	80bf481e 	bne	r16,r2,ab68 <__alt_data_end+0xfffeab68>
    ae48:	003f1c06 	br	aabc <__alt_data_end+0xfffeaabc>
    ae4c:	843ff844 	addi	r16,r16,-31
    ae50:	01000804 	movi	r4,32
    ae54:	1406d83a 	srl	r3,r2,r16
    ae58:	41005026 	beq	r8,r4,af9c <__adddf3+0x55c>
    ae5c:	01001004 	movi	r4,64
    ae60:	2211c83a 	sub	r8,r4,r8
    ae64:	1204983a 	sll	r2,r2,r8
    ae68:	88a2b03a 	or	r17,r17,r2
    ae6c:	8822c03a 	cmpne	r17,r17,zero
    ae70:	1c62b03a 	or	r17,r3,r17
    ae74:	0011883a 	mov	r8,zero
    ae78:	0021883a 	mov	r16,zero
    ae7c:	003f7106 	br	ac44 <__alt_data_end+0xfffeac44>
    ae80:	193ff804 	addi	r4,r3,-32
    ae84:	00800804 	movi	r2,32
    ae88:	4908d83a 	srl	r4,r9,r4
    ae8c:	18804526 	beq	r3,r2,afa4 <__adddf3+0x564>
    ae90:	00801004 	movi	r2,64
    ae94:	10c5c83a 	sub	r2,r2,r3
    ae98:	4886983a 	sll	r3,r9,r2
    ae9c:	198cb03a 	or	r6,r3,r6
    aea0:	300cc03a 	cmpne	r6,r6,zero
    aea4:	218cb03a 	or	r6,r4,r6
    aea8:	0007883a 	mov	r3,zero
    aeac:	003f3b06 	br	ab9c <__alt_data_end+0xfffeab9c>
    aeb0:	80002a26 	beq	r16,zero,af5c <__adddf3+0x51c>
    aeb4:	0101ffc4 	movi	r4,2047
    aeb8:	11006826 	beq	r2,r4,b05c <__adddf3+0x61c>
    aebc:	00c7c83a 	sub	r3,zero,r3
    aec0:	42002034 	orhi	r8,r8,128
    aec4:	01000e04 	movi	r4,56
    aec8:	20c07c16 	blt	r4,r3,b0bc <__adddf3+0x67c>
    aecc:	010007c4 	movi	r4,31
    aed0:	20c0da16 	blt	r4,r3,b23c <__adddf3+0x7fc>
    aed4:	01000804 	movi	r4,32
    aed8:	20c9c83a 	sub	r4,r4,r3
    aedc:	4114983a 	sll	r10,r8,r4
    aee0:	88cad83a 	srl	r5,r17,r3
    aee4:	8908983a 	sll	r4,r17,r4
    aee8:	40c6d83a 	srl	r3,r8,r3
    aeec:	5162b03a 	or	r17,r10,r5
    aef0:	2008c03a 	cmpne	r4,r4,zero
    aef4:	8922b03a 	or	r17,r17,r4
    aef8:	3463c83a 	sub	r17,r6,r17
    aefc:	48c7c83a 	sub	r3,r9,r3
    af00:	344d803a 	cmpltu	r6,r6,r17
    af04:	1991c83a 	sub	r8,r3,r6
    af08:	1021883a 	mov	r16,r2
    af0c:	3825883a 	mov	r18,r7
    af10:	003f2706 	br	abb0 <__alt_data_end+0xfffeabb0>
    af14:	24d0b03a 	or	r8,r4,r19
    af18:	40001b1e 	bne	r8,zero,af88 <__adddf3+0x548>
    af1c:	0005883a 	mov	r2,zero
    af20:	0007883a 	mov	r3,zero
    af24:	0021883a 	mov	r16,zero
    af28:	003f4d06 	br	ac60 <__alt_data_end+0xfffeac60>
    af2c:	008007c4 	movi	r2,31
    af30:	11003c16 	blt	r2,r4,b024 <__adddf3+0x5e4>
    af34:	00800804 	movi	r2,32
    af38:	1105c83a 	sub	r2,r2,r4
    af3c:	488e983a 	sll	r7,r9,r2
    af40:	310ad83a 	srl	r5,r6,r4
    af44:	3084983a 	sll	r2,r6,r2
    af48:	4912d83a 	srl	r9,r9,r4
    af4c:	394ab03a 	or	r5,r7,r5
    af50:	1004c03a 	cmpne	r2,r2,zero
    af54:	288ab03a 	or	r5,r5,r2
    af58:	003f5306 	br	aca8 <__alt_data_end+0xfffeaca8>
    af5c:	4448b03a 	or	r4,r8,r17
    af60:	20003e26 	beq	r4,zero,b05c <__adddf3+0x61c>
    af64:	00c6303a 	nor	r3,zero,r3
    af68:	18003a1e 	bne	r3,zero,b054 <__adddf3+0x614>
    af6c:	3463c83a 	sub	r17,r6,r17
    af70:	4a07c83a 	sub	r3,r9,r8
    af74:	344d803a 	cmpltu	r6,r6,r17
    af78:	1991c83a 	sub	r8,r3,r6
    af7c:	1021883a 	mov	r16,r2
    af80:	3825883a 	mov	r18,r7
    af84:	003f0a06 	br	abb0 <__alt_data_end+0xfffeabb0>
    af88:	2023883a 	mov	r17,r4
    af8c:	003f0d06 	br	abc4 <__alt_data_end+0xfffeabc4>
    af90:	0081ffc4 	movi	r2,2047
    af94:	80bf3f1e 	bne	r16,r2,ac94 <__alt_data_end+0xfffeac94>
    af98:	003ec806 	br	aabc <__alt_data_end+0xfffeaabc>
    af9c:	0005883a 	mov	r2,zero
    afa0:	003fb106 	br	ae68 <__alt_data_end+0xfffeae68>
    afa4:	0007883a 	mov	r3,zero
    afa8:	003fbc06 	br	ae9c <__alt_data_end+0xfffeae9c>
    afac:	4444b03a 	or	r2,r8,r17
    afb0:	8000871e 	bne	r16,zero,b1d0 <__adddf3+0x790>
    afb4:	1000ba26 	beq	r2,zero,b2a0 <__adddf3+0x860>
    afb8:	4984b03a 	or	r2,r9,r6
    afbc:	103ebf26 	beq	r2,zero,aabc <__alt_data_end+0xfffeaabc>
    afc0:	8985883a 	add	r2,r17,r6
    afc4:	4247883a 	add	r3,r8,r9
    afc8:	1451803a 	cmpltu	r8,r2,r17
    afcc:	40d1883a 	add	r8,r8,r3
    afd0:	40c0202c 	andhi	r3,r8,128
    afd4:	1023883a 	mov	r17,r2
    afd8:	183f1a26 	beq	r3,zero,ac44 <__alt_data_end+0xfffeac44>
    afdc:	00bfe034 	movhi	r2,65408
    afe0:	10bfffc4 	addi	r2,r2,-1
    afe4:	2021883a 	mov	r16,r4
    afe8:	4090703a 	and	r8,r8,r2
    afec:	003eb306 	br	aabc <__alt_data_end+0xfffeaabc>
    aff0:	4444b03a 	or	r2,r8,r17
    aff4:	8000291e 	bne	r16,zero,b09c <__adddf3+0x65c>
    aff8:	10004b1e 	bne	r2,zero,b128 <__adddf3+0x6e8>
    affc:	4990b03a 	or	r8,r9,r6
    b000:	40008b26 	beq	r8,zero,b230 <__adddf3+0x7f0>
    b004:	4811883a 	mov	r8,r9
    b008:	3023883a 	mov	r17,r6
    b00c:	3825883a 	mov	r18,r7
    b010:	003eaa06 	br	aabc <__alt_data_end+0xfffeaabc>
    b014:	1021883a 	mov	r16,r2
    b018:	0011883a 	mov	r8,zero
    b01c:	0005883a 	mov	r2,zero
    b020:	003f0f06 	br	ac60 <__alt_data_end+0xfffeac60>
    b024:	217ff804 	addi	r5,r4,-32
    b028:	00800804 	movi	r2,32
    b02c:	494ad83a 	srl	r5,r9,r5
    b030:	20807d26 	beq	r4,r2,b228 <__adddf3+0x7e8>
    b034:	00801004 	movi	r2,64
    b038:	1109c83a 	sub	r4,r2,r4
    b03c:	4912983a 	sll	r9,r9,r4
    b040:	498cb03a 	or	r6,r9,r6
    b044:	300cc03a 	cmpne	r6,r6,zero
    b048:	298ab03a 	or	r5,r5,r6
    b04c:	0013883a 	mov	r9,zero
    b050:	003f1506 	br	aca8 <__alt_data_end+0xfffeaca8>
    b054:	0101ffc4 	movi	r4,2047
    b058:	113f9a1e 	bne	r2,r4,aec4 <__alt_data_end+0xfffeaec4>
    b05c:	4811883a 	mov	r8,r9
    b060:	3023883a 	mov	r17,r6
    b064:	1021883a 	mov	r16,r2
    b068:	3825883a 	mov	r18,r7
    b06c:	003e9306 	br	aabc <__alt_data_end+0xfffeaabc>
    b070:	8000161e 	bne	r16,zero,b0cc <__adddf3+0x68c>
    b074:	444ab03a 	or	r5,r8,r17
    b078:	28005126 	beq	r5,zero,b1c0 <__adddf3+0x780>
    b07c:	0108303a 	nor	r4,zero,r4
    b080:	20004d1e 	bne	r4,zero,b1b8 <__adddf3+0x778>
    b084:	89a3883a 	add	r17,r17,r6
    b088:	4253883a 	add	r9,r8,r9
    b08c:	898d803a 	cmpltu	r6,r17,r6
    b090:	3251883a 	add	r8,r6,r9
    b094:	1021883a 	mov	r16,r2
    b098:	003f0806 	br	acbc <__alt_data_end+0xfffeacbc>
    b09c:	1000301e 	bne	r2,zero,b160 <__adddf3+0x720>
    b0a0:	4984b03a 	or	r2,r9,r6
    b0a4:	10007126 	beq	r2,zero,b26c <__adddf3+0x82c>
    b0a8:	4811883a 	mov	r8,r9
    b0ac:	3023883a 	mov	r17,r6
    b0b0:	3825883a 	mov	r18,r7
    b0b4:	0401ffc4 	movi	r16,2047
    b0b8:	003e8006 	br	aabc <__alt_data_end+0xfffeaabc>
    b0bc:	4462b03a 	or	r17,r8,r17
    b0c0:	8822c03a 	cmpne	r17,r17,zero
    b0c4:	0007883a 	mov	r3,zero
    b0c8:	003f8b06 	br	aef8 <__alt_data_end+0xfffeaef8>
    b0cc:	0141ffc4 	movi	r5,2047
    b0d0:	11403b26 	beq	r2,r5,b1c0 <__adddf3+0x780>
    b0d4:	0109c83a 	sub	r4,zero,r4
    b0d8:	42002034 	orhi	r8,r8,128
    b0dc:	01400e04 	movi	r5,56
    b0e0:	29006716 	blt	r5,r4,b280 <__adddf3+0x840>
    b0e4:	014007c4 	movi	r5,31
    b0e8:	29007016 	blt	r5,r4,b2ac <__adddf3+0x86c>
    b0ec:	01400804 	movi	r5,32
    b0f0:	290bc83a 	sub	r5,r5,r4
    b0f4:	4154983a 	sll	r10,r8,r5
    b0f8:	890ed83a 	srl	r7,r17,r4
    b0fc:	894a983a 	sll	r5,r17,r5
    b100:	4108d83a 	srl	r4,r8,r4
    b104:	51e2b03a 	or	r17,r10,r7
    b108:	280ac03a 	cmpne	r5,r5,zero
    b10c:	8962b03a 	or	r17,r17,r5
    b110:	89a3883a 	add	r17,r17,r6
    b114:	2253883a 	add	r9,r4,r9
    b118:	898d803a 	cmpltu	r6,r17,r6
    b11c:	3251883a 	add	r8,r6,r9
    b120:	1021883a 	mov	r16,r2
    b124:	003ee506 	br	acbc <__alt_data_end+0xfffeacbc>
    b128:	4984b03a 	or	r2,r9,r6
    b12c:	103e6326 	beq	r2,zero,aabc <__alt_data_end+0xfffeaabc>
    b130:	8987c83a 	sub	r3,r17,r6
    b134:	88c9803a 	cmpltu	r4,r17,r3
    b138:	4245c83a 	sub	r2,r8,r9
    b13c:	1105c83a 	sub	r2,r2,r4
    b140:	1100202c 	andhi	r4,r2,128
    b144:	203ebb26 	beq	r4,zero,ac34 <__alt_data_end+0xfffeac34>
    b148:	3463c83a 	sub	r17,r6,r17
    b14c:	4a07c83a 	sub	r3,r9,r8
    b150:	344d803a 	cmpltu	r6,r6,r17
    b154:	1991c83a 	sub	r8,r3,r6
    b158:	3825883a 	mov	r18,r7
    b15c:	003e5706 	br	aabc <__alt_data_end+0xfffeaabc>
    b160:	4984b03a 	or	r2,r9,r6
    b164:	10002e26 	beq	r2,zero,b220 <__adddf3+0x7e0>
    b168:	4004d0fa 	srli	r2,r8,3
    b16c:	8822d0fa 	srli	r17,r17,3
    b170:	4010977a 	slli	r8,r8,29
    b174:	10c0022c 	andhi	r3,r2,8
    b178:	4462b03a 	or	r17,r8,r17
    b17c:	18000826 	beq	r3,zero,b1a0 <__adddf3+0x760>
    b180:	4808d0fa 	srli	r4,r9,3
    b184:	20c0022c 	andhi	r3,r4,8
    b188:	1800051e 	bne	r3,zero,b1a0 <__adddf3+0x760>
    b18c:	300cd0fa 	srli	r6,r6,3
    b190:	4806977a 	slli	r3,r9,29
    b194:	2005883a 	mov	r2,r4
    b198:	3825883a 	mov	r18,r7
    b19c:	19a2b03a 	or	r17,r3,r6
    b1a0:	8810d77a 	srli	r8,r17,29
    b1a4:	100490fa 	slli	r2,r2,3
    b1a8:	882290fa 	slli	r17,r17,3
    b1ac:	0401ffc4 	movi	r16,2047
    b1b0:	4090b03a 	or	r8,r8,r2
    b1b4:	003e4106 	br	aabc <__alt_data_end+0xfffeaabc>
    b1b8:	0141ffc4 	movi	r5,2047
    b1bc:	117fc71e 	bne	r2,r5,b0dc <__alt_data_end+0xfffeb0dc>
    b1c0:	4811883a 	mov	r8,r9
    b1c4:	3023883a 	mov	r17,r6
    b1c8:	1021883a 	mov	r16,r2
    b1cc:	003e3b06 	br	aabc <__alt_data_end+0xfffeaabc>
    b1d0:	10002f26 	beq	r2,zero,b290 <__adddf3+0x850>
    b1d4:	4984b03a 	or	r2,r9,r6
    b1d8:	10001126 	beq	r2,zero,b220 <__adddf3+0x7e0>
    b1dc:	4004d0fa 	srli	r2,r8,3
    b1e0:	8822d0fa 	srli	r17,r17,3
    b1e4:	4010977a 	slli	r8,r8,29
    b1e8:	10c0022c 	andhi	r3,r2,8
    b1ec:	4462b03a 	or	r17,r8,r17
    b1f0:	183feb26 	beq	r3,zero,b1a0 <__alt_data_end+0xfffeb1a0>
    b1f4:	4808d0fa 	srli	r4,r9,3
    b1f8:	20c0022c 	andhi	r3,r4,8
    b1fc:	183fe81e 	bne	r3,zero,b1a0 <__alt_data_end+0xfffeb1a0>
    b200:	300cd0fa 	srli	r6,r6,3
    b204:	4806977a 	slli	r3,r9,29
    b208:	2005883a 	mov	r2,r4
    b20c:	19a2b03a 	or	r17,r3,r6
    b210:	003fe306 	br	b1a0 <__alt_data_end+0xfffeb1a0>
    b214:	0011883a 	mov	r8,zero
    b218:	0005883a 	mov	r2,zero
    b21c:	003e3f06 	br	ab1c <__alt_data_end+0xfffeab1c>
    b220:	0401ffc4 	movi	r16,2047
    b224:	003e2506 	br	aabc <__alt_data_end+0xfffeaabc>
    b228:	0013883a 	mov	r9,zero
    b22c:	003f8406 	br	b040 <__alt_data_end+0xfffeb040>
    b230:	0005883a 	mov	r2,zero
    b234:	0007883a 	mov	r3,zero
    b238:	003e8906 	br	ac60 <__alt_data_end+0xfffeac60>
    b23c:	197ff804 	addi	r5,r3,-32
    b240:	01000804 	movi	r4,32
    b244:	414ad83a 	srl	r5,r8,r5
    b248:	19002426 	beq	r3,r4,b2dc <__adddf3+0x89c>
    b24c:	01001004 	movi	r4,64
    b250:	20c7c83a 	sub	r3,r4,r3
    b254:	40c6983a 	sll	r3,r8,r3
    b258:	1c46b03a 	or	r3,r3,r17
    b25c:	1806c03a 	cmpne	r3,r3,zero
    b260:	28e2b03a 	or	r17,r5,r3
    b264:	0007883a 	mov	r3,zero
    b268:	003f2306 	br	aef8 <__alt_data_end+0xfffeaef8>
    b26c:	0007883a 	mov	r3,zero
    b270:	5811883a 	mov	r8,r11
    b274:	00bfffc4 	movi	r2,-1
    b278:	0401ffc4 	movi	r16,2047
    b27c:	003e7806 	br	ac60 <__alt_data_end+0xfffeac60>
    b280:	4462b03a 	or	r17,r8,r17
    b284:	8822c03a 	cmpne	r17,r17,zero
    b288:	0009883a 	mov	r4,zero
    b28c:	003fa006 	br	b110 <__alt_data_end+0xfffeb110>
    b290:	4811883a 	mov	r8,r9
    b294:	3023883a 	mov	r17,r6
    b298:	0401ffc4 	movi	r16,2047
    b29c:	003e0706 	br	aabc <__alt_data_end+0xfffeaabc>
    b2a0:	4811883a 	mov	r8,r9
    b2a4:	3023883a 	mov	r17,r6
    b2a8:	003e0406 	br	aabc <__alt_data_end+0xfffeaabc>
    b2ac:	21fff804 	addi	r7,r4,-32
    b2b0:	01400804 	movi	r5,32
    b2b4:	41ced83a 	srl	r7,r8,r7
    b2b8:	21400a26 	beq	r4,r5,b2e4 <__adddf3+0x8a4>
    b2bc:	01401004 	movi	r5,64
    b2c0:	2909c83a 	sub	r4,r5,r4
    b2c4:	4108983a 	sll	r4,r8,r4
    b2c8:	2448b03a 	or	r4,r4,r17
    b2cc:	2008c03a 	cmpne	r4,r4,zero
    b2d0:	3922b03a 	or	r17,r7,r4
    b2d4:	0009883a 	mov	r4,zero
    b2d8:	003f8d06 	br	b110 <__alt_data_end+0xfffeb110>
    b2dc:	0007883a 	mov	r3,zero
    b2e0:	003fdd06 	br	b258 <__alt_data_end+0xfffeb258>
    b2e4:	0009883a 	mov	r4,zero
    b2e8:	003ff706 	br	b2c8 <__alt_data_end+0xfffeb2c8>

0000b2ec <__divdf3>:
    b2ec:	defff004 	addi	sp,sp,-64
    b2f0:	dc800815 	stw	r18,32(sp)
    b2f4:	2824d53a 	srli	r18,r5,20
    b2f8:	dd800c15 	stw	r22,48(sp)
    b2fc:	282cd7fa 	srli	r22,r5,31
    b300:	dc000615 	stw	r16,24(sp)
    b304:	04000434 	movhi	r16,16
    b308:	843fffc4 	addi	r16,r16,-1
    b30c:	dfc00f15 	stw	ra,60(sp)
    b310:	df000e15 	stw	fp,56(sp)
    b314:	ddc00d15 	stw	r23,52(sp)
    b318:	dd400b15 	stw	r21,44(sp)
    b31c:	dd000a15 	stw	r20,40(sp)
    b320:	dcc00915 	stw	r19,36(sp)
    b324:	dc400715 	stw	r17,28(sp)
    b328:	9481ffcc 	andi	r18,r18,2047
    b32c:	2c20703a 	and	r16,r5,r16
    b330:	b2003fcc 	andi	r8,r22,255
    b334:	90006126 	beq	r18,zero,b4bc <__divdf3+0x1d0>
    b338:	0081ffc4 	movi	r2,2047
    b33c:	202b883a 	mov	r21,r4
    b340:	90803726 	beq	r18,r2,b420 <__divdf3+0x134>
    b344:	80800434 	orhi	r2,r16,16
    b348:	100490fa 	slli	r2,r2,3
    b34c:	2020d77a 	srli	r16,r4,29
    b350:	202a90fa 	slli	r21,r4,3
    b354:	94bf0044 	addi	r18,r18,-1023
    b358:	80a0b03a 	or	r16,r16,r2
    b35c:	0013883a 	mov	r9,zero
    b360:	000b883a 	mov	r5,zero
    b364:	3806d53a 	srli	r3,r7,20
    b368:	382ed7fa 	srli	r23,r7,31
    b36c:	04400434 	movhi	r17,16
    b370:	8c7fffc4 	addi	r17,r17,-1
    b374:	18c1ffcc 	andi	r3,r3,2047
    b378:	3029883a 	mov	r20,r6
    b37c:	3c62703a 	and	r17,r7,r17
    b380:	bf003fcc 	andi	fp,r23,255
    b384:	18006e26 	beq	r3,zero,b540 <__divdf3+0x254>
    b388:	0081ffc4 	movi	r2,2047
    b38c:	18806626 	beq	r3,r2,b528 <__divdf3+0x23c>
    b390:	88800434 	orhi	r2,r17,16
    b394:	100490fa 	slli	r2,r2,3
    b398:	3022d77a 	srli	r17,r6,29
    b39c:	302890fa 	slli	r20,r6,3
    b3a0:	18ff0044 	addi	r3,r3,-1023
    b3a4:	88a2b03a 	or	r17,r17,r2
    b3a8:	000f883a 	mov	r7,zero
    b3ac:	b5e6f03a 	xor	r19,r22,r23
    b3b0:	3a4cb03a 	or	r6,r7,r9
    b3b4:	008003c4 	movi	r2,15
    b3b8:	9809883a 	mov	r4,r19
    b3bc:	90c7c83a 	sub	r3,r18,r3
    b3c0:	9cc03fcc 	andi	r19,r19,255
    b3c4:	11809636 	bltu	r2,r6,b620 <__divdf3+0x334>
    b3c8:	300c90ba 	slli	r6,r6,2
    b3cc:	00800074 	movhi	r2,1
    b3d0:	10acf804 	addi	r2,r2,-19488
    b3d4:	308d883a 	add	r6,r6,r2
    b3d8:	30800017 	ldw	r2,0(r6)
    b3dc:	1000683a 	jmp	r2
    b3e0:	0000b620 	cmpeqi	zero,zero,728
    b3e4:	0000b458 	cmpnei	zero,zero,721
    b3e8:	0000b610 	cmplti	zero,zero,728
    b3ec:	0000b44c 	andi	zero,zero,721
    b3f0:	0000b610 	cmplti	zero,zero,728
    b3f4:	0000b5e4 	muli	zero,zero,727
    b3f8:	0000b610 	cmplti	zero,zero,728
    b3fc:	0000b44c 	andi	zero,zero,721
    b400:	0000b458 	cmpnei	zero,zero,721
    b404:	0000b458 	cmpnei	zero,zero,721
    b408:	0000b5e4 	muli	zero,zero,727
    b40c:	0000b44c 	andi	zero,zero,721
    b410:	0000b43c 	xorhi	zero,zero,720
    b414:	0000b43c 	xorhi	zero,zero,720
    b418:	0000b43c 	xorhi	zero,zero,720
    b41c:	0000b9a8 	cmpgeui	zero,zero,742
    b420:	2404b03a 	or	r2,r4,r16
    b424:	10006c1e 	bne	r2,zero,b5d8 <__divdf3+0x2ec>
    b428:	02400204 	movi	r9,8
    b42c:	0021883a 	mov	r16,zero
    b430:	002b883a 	mov	r21,zero
    b434:	01400084 	movi	r5,2
    b438:	003fca06 	br	b364 <__alt_data_end+0xfffeb364>
    b43c:	8023883a 	mov	r17,r16
    b440:	a829883a 	mov	r20,r21
    b444:	4039883a 	mov	fp,r8
    b448:	280f883a 	mov	r7,r5
    b44c:	00800084 	movi	r2,2
    b450:	3881601e 	bne	r7,r2,b9d4 <__divdf3+0x6e8>
    b454:	e027883a 	mov	r19,fp
    b458:	9900004c 	andi	r4,r19,1
    b45c:	0081ffc4 	movi	r2,2047
    b460:	0021883a 	mov	r16,zero
    b464:	002b883a 	mov	r21,zero
    b468:	1004953a 	slli	r2,r2,20
    b46c:	20c03fcc 	andi	r3,r4,255
    b470:	01400434 	movhi	r5,16
    b474:	297fffc4 	addi	r5,r5,-1
    b478:	180697fa 	slli	r3,r3,31
    b47c:	8160703a 	and	r16,r16,r5
    b480:	80a0b03a 	or	r16,r16,r2
    b484:	80c6b03a 	or	r3,r16,r3
    b488:	a805883a 	mov	r2,r21
    b48c:	dfc00f17 	ldw	ra,60(sp)
    b490:	df000e17 	ldw	fp,56(sp)
    b494:	ddc00d17 	ldw	r23,52(sp)
    b498:	dd800c17 	ldw	r22,48(sp)
    b49c:	dd400b17 	ldw	r21,44(sp)
    b4a0:	dd000a17 	ldw	r20,40(sp)
    b4a4:	dcc00917 	ldw	r19,36(sp)
    b4a8:	dc800817 	ldw	r18,32(sp)
    b4ac:	dc400717 	ldw	r17,28(sp)
    b4b0:	dc000617 	ldw	r16,24(sp)
    b4b4:	dec01004 	addi	sp,sp,64
    b4b8:	f800283a 	ret
    b4bc:	2404b03a 	or	r2,r4,r16
    b4c0:	2023883a 	mov	r17,r4
    b4c4:	10003f26 	beq	r2,zero,b5c4 <__divdf3+0x2d8>
    b4c8:	80015e26 	beq	r16,zero,ba44 <__divdf3+0x758>
    b4cc:	8009883a 	mov	r4,r16
    b4d0:	d9800215 	stw	r6,8(sp)
    b4d4:	d9c00515 	stw	r7,20(sp)
    b4d8:	da000415 	stw	r8,16(sp)
    b4dc:	000d2800 	call	d280 <__clzsi2>
    b4e0:	d9800217 	ldw	r6,8(sp)
    b4e4:	d9c00517 	ldw	r7,20(sp)
    b4e8:	da000417 	ldw	r8,16(sp)
    b4ec:	113ffd44 	addi	r4,r2,-11
    b4f0:	00c00704 	movi	r3,28
    b4f4:	19014f16 	blt	r3,r4,ba34 <__divdf3+0x748>
    b4f8:	00c00744 	movi	r3,29
    b4fc:	157ffe04 	addi	r21,r2,-8
    b500:	1907c83a 	sub	r3,r3,r4
    b504:	8560983a 	sll	r16,r16,r21
    b508:	88c6d83a 	srl	r3,r17,r3
    b50c:	8d6a983a 	sll	r21,r17,r21
    b510:	1c20b03a 	or	r16,r3,r16
    b514:	1080fcc4 	addi	r2,r2,1011
    b518:	00a5c83a 	sub	r18,zero,r2
    b51c:	0013883a 	mov	r9,zero
    b520:	000b883a 	mov	r5,zero
    b524:	003f8f06 	br	b364 <__alt_data_end+0xfffeb364>
    b528:	3444b03a 	or	r2,r6,r17
    b52c:	1000231e 	bne	r2,zero,b5bc <__divdf3+0x2d0>
    b530:	0023883a 	mov	r17,zero
    b534:	0029883a 	mov	r20,zero
    b538:	01c00084 	movi	r7,2
    b53c:	003f9b06 	br	b3ac <__alt_data_end+0xfffeb3ac>
    b540:	3444b03a 	or	r2,r6,r17
    b544:	10001926 	beq	r2,zero,b5ac <__divdf3+0x2c0>
    b548:	88014b26 	beq	r17,zero,ba78 <__divdf3+0x78c>
    b54c:	8809883a 	mov	r4,r17
    b550:	d9400115 	stw	r5,4(sp)
    b554:	d9800215 	stw	r6,8(sp)
    b558:	da000415 	stw	r8,16(sp)
    b55c:	da400315 	stw	r9,12(sp)
    b560:	000d2800 	call	d280 <__clzsi2>
    b564:	d9400117 	ldw	r5,4(sp)
    b568:	d9800217 	ldw	r6,8(sp)
    b56c:	da000417 	ldw	r8,16(sp)
    b570:	da400317 	ldw	r9,12(sp)
    b574:	113ffd44 	addi	r4,r2,-11
    b578:	00c00704 	movi	r3,28
    b57c:	19013a16 	blt	r3,r4,ba68 <__divdf3+0x77c>
    b580:	00c00744 	movi	r3,29
    b584:	153ffe04 	addi	r20,r2,-8
    b588:	1907c83a 	sub	r3,r3,r4
    b58c:	8d22983a 	sll	r17,r17,r20
    b590:	30c6d83a 	srl	r3,r6,r3
    b594:	3528983a 	sll	r20,r6,r20
    b598:	1c62b03a 	or	r17,r3,r17
    b59c:	1080fcc4 	addi	r2,r2,1011
    b5a0:	0087c83a 	sub	r3,zero,r2
    b5a4:	000f883a 	mov	r7,zero
    b5a8:	003f8006 	br	b3ac <__alt_data_end+0xfffeb3ac>
    b5ac:	0023883a 	mov	r17,zero
    b5b0:	0029883a 	mov	r20,zero
    b5b4:	01c00044 	movi	r7,1
    b5b8:	003f7c06 	br	b3ac <__alt_data_end+0xfffeb3ac>
    b5bc:	01c000c4 	movi	r7,3
    b5c0:	003f7a06 	br	b3ac <__alt_data_end+0xfffeb3ac>
    b5c4:	02400104 	movi	r9,4
    b5c8:	0021883a 	mov	r16,zero
    b5cc:	002b883a 	mov	r21,zero
    b5d0:	01400044 	movi	r5,1
    b5d4:	003f6306 	br	b364 <__alt_data_end+0xfffeb364>
    b5d8:	02400304 	movi	r9,12
    b5dc:	014000c4 	movi	r5,3
    b5e0:	003f6006 	br	b364 <__alt_data_end+0xfffeb364>
    b5e4:	04000434 	movhi	r16,16
    b5e8:	0009883a 	mov	r4,zero
    b5ec:	843fffc4 	addi	r16,r16,-1
    b5f0:	057fffc4 	movi	r21,-1
    b5f4:	0081ffc4 	movi	r2,2047
    b5f8:	003f9b06 	br	b468 <__alt_data_end+0xfffeb468>
    b5fc:	00c00044 	movi	r3,1
    b600:	1887c83a 	sub	r3,r3,r2
    b604:	01000e04 	movi	r4,56
    b608:	20c1530e 	bge	r4,r3,bb58 <__divdf3+0x86c>
    b60c:	9900004c 	andi	r4,r19,1
    b610:	0005883a 	mov	r2,zero
    b614:	0021883a 	mov	r16,zero
    b618:	002b883a 	mov	r21,zero
    b61c:	003f9206 	br	b468 <__alt_data_end+0xfffeb468>
    b620:	8c012e36 	bltu	r17,r16,badc <__divdf3+0x7f0>
    b624:	84412c26 	beq	r16,r17,bad8 <__divdf3+0x7ec>
    b628:	a82f883a 	mov	r23,r21
    b62c:	18ffffc4 	addi	r3,r3,-1
    b630:	002b883a 	mov	r21,zero
    b634:	a004d63a 	srli	r2,r20,24
    b638:	8822923a 	slli	r17,r17,8
    b63c:	a028923a 	slli	r20,r20,8
    b640:	8009883a 	mov	r4,r16
    b644:	88acb03a 	or	r22,r17,r2
    b648:	dd000015 	stw	r20,0(sp)
    b64c:	b028d43a 	srli	r20,r22,16
    b650:	d8c00215 	stw	r3,8(sp)
    b654:	b4bfffcc 	andi	r18,r22,65535
    b658:	a00b883a 	mov	r5,r20
    b65c:	000a95c0 	call	a95c <__udivsi3>
    b660:	100b883a 	mov	r5,r2
    b664:	9009883a 	mov	r4,r18
    b668:	1023883a 	mov	r17,r2
    b66c:	000aa180 	call	aa18 <__mulsi3>
    b670:	8009883a 	mov	r4,r16
    b674:	a00b883a 	mov	r5,r20
    b678:	1039883a 	mov	fp,r2
    b67c:	000a9c00 	call	a9c0 <__umodsi3>
    b680:	1004943a 	slli	r2,r2,16
    b684:	b808d43a 	srli	r4,r23,16
    b688:	d8c00217 	ldw	r3,8(sp)
    b68c:	2084b03a 	or	r2,r4,r2
    b690:	1700062e 	bgeu	r2,fp,b6ac <__divdf3+0x3c0>
    b694:	1585883a 	add	r2,r2,r22
    b698:	893fffc4 	addi	r4,r17,-1
    b69c:	15811d36 	bltu	r2,r22,bb14 <__divdf3+0x828>
    b6a0:	17011c2e 	bgeu	r2,fp,bb14 <__divdf3+0x828>
    b6a4:	8c7fff84 	addi	r17,r17,-2
    b6a8:	1585883a 	add	r2,r2,r22
    b6ac:	1739c83a 	sub	fp,r2,fp
    b6b0:	a00b883a 	mov	r5,r20
    b6b4:	e009883a 	mov	r4,fp
    b6b8:	d8c00215 	stw	r3,8(sp)
    b6bc:	000a95c0 	call	a95c <__udivsi3>
    b6c0:	100b883a 	mov	r5,r2
    b6c4:	9009883a 	mov	r4,r18
    b6c8:	1021883a 	mov	r16,r2
    b6cc:	000aa180 	call	aa18 <__mulsi3>
    b6d0:	a00b883a 	mov	r5,r20
    b6d4:	e009883a 	mov	r4,fp
    b6d8:	d8800415 	stw	r2,16(sp)
    b6dc:	000a9c00 	call	a9c0 <__umodsi3>
    b6e0:	1004943a 	slli	r2,r2,16
    b6e4:	da000417 	ldw	r8,16(sp)
    b6e8:	bdffffcc 	andi	r23,r23,65535
    b6ec:	b884b03a 	or	r2,r23,r2
    b6f0:	d8c00217 	ldw	r3,8(sp)
    b6f4:	1200062e 	bgeu	r2,r8,b710 <__divdf3+0x424>
    b6f8:	1585883a 	add	r2,r2,r22
    b6fc:	813fffc4 	addi	r4,r16,-1
    b700:	15810236 	bltu	r2,r22,bb0c <__divdf3+0x820>
    b704:	1201012e 	bgeu	r2,r8,bb0c <__divdf3+0x820>
    b708:	843fff84 	addi	r16,r16,-2
    b70c:	1585883a 	add	r2,r2,r22
    b710:	8822943a 	slli	r17,r17,16
    b714:	d9800017 	ldw	r6,0(sp)
    b718:	1211c83a 	sub	r8,r2,r8
    b71c:	8c22b03a 	or	r17,r17,r16
    b720:	373fffcc 	andi	fp,r6,65535
    b724:	8abfffcc 	andi	r10,r17,65535
    b728:	8820d43a 	srli	r16,r17,16
    b72c:	5009883a 	mov	r4,r10
    b730:	e00b883a 	mov	r5,fp
    b734:	302ed43a 	srli	r23,r6,16
    b738:	d8c00215 	stw	r3,8(sp)
    b73c:	da000415 	stw	r8,16(sp)
    b740:	da800115 	stw	r10,4(sp)
    b744:	000aa180 	call	aa18 <__mulsi3>
    b748:	800b883a 	mov	r5,r16
    b74c:	e009883a 	mov	r4,fp
    b750:	d8800515 	stw	r2,20(sp)
    b754:	000aa180 	call	aa18 <__mulsi3>
    b758:	8009883a 	mov	r4,r16
    b75c:	b80b883a 	mov	r5,r23
    b760:	d8800315 	stw	r2,12(sp)
    b764:	000aa180 	call	aa18 <__mulsi3>
    b768:	da800117 	ldw	r10,4(sp)
    b76c:	b80b883a 	mov	r5,r23
    b770:	1021883a 	mov	r16,r2
    b774:	5009883a 	mov	r4,r10
    b778:	000aa180 	call	aa18 <__mulsi3>
    b77c:	d9c00517 	ldw	r7,20(sp)
    b780:	da400317 	ldw	r9,12(sp)
    b784:	d8c00217 	ldw	r3,8(sp)
    b788:	3808d43a 	srli	r4,r7,16
    b78c:	1245883a 	add	r2,r2,r9
    b790:	da000417 	ldw	r8,16(sp)
    b794:	2085883a 	add	r2,r4,r2
    b798:	1240022e 	bgeu	r2,r9,b7a4 <__divdf3+0x4b8>
    b79c:	01000074 	movhi	r4,1
    b7a0:	8121883a 	add	r16,r16,r4
    b7a4:	1008d43a 	srli	r4,r2,16
    b7a8:	1004943a 	slli	r2,r2,16
    b7ac:	39ffffcc 	andi	r7,r7,65535
    b7b0:	2409883a 	add	r4,r4,r16
    b7b4:	11c5883a 	add	r2,r2,r7
    b7b8:	4100bb36 	bltu	r8,r4,baa8 <__divdf3+0x7bc>
    b7bc:	4100d726 	beq	r8,r4,bb1c <__divdf3+0x830>
    b7c0:	4109c83a 	sub	r4,r8,r4
    b7c4:	a8a1c83a 	sub	r16,r21,r2
    b7c8:	ac2b803a 	cmpltu	r21,r21,r16
    b7cc:	256bc83a 	sub	r21,r4,r21
    b7d0:	b540d926 	beq	r22,r21,bb38 <__divdf3+0x84c>
    b7d4:	a00b883a 	mov	r5,r20
    b7d8:	a809883a 	mov	r4,r21
    b7dc:	d8c00215 	stw	r3,8(sp)
    b7e0:	000a95c0 	call	a95c <__udivsi3>
    b7e4:	100b883a 	mov	r5,r2
    b7e8:	9009883a 	mov	r4,r18
    b7ec:	d8800515 	stw	r2,20(sp)
    b7f0:	000aa180 	call	aa18 <__mulsi3>
    b7f4:	a809883a 	mov	r4,r21
    b7f8:	a00b883a 	mov	r5,r20
    b7fc:	d8800415 	stw	r2,16(sp)
    b800:	000a9c00 	call	a9c0 <__umodsi3>
    b804:	1004943a 	slli	r2,r2,16
    b808:	8008d43a 	srli	r4,r16,16
    b80c:	da000417 	ldw	r8,16(sp)
    b810:	d8c00217 	ldw	r3,8(sp)
    b814:	2084b03a 	or	r2,r4,r2
    b818:	d9c00517 	ldw	r7,20(sp)
    b81c:	1200062e 	bgeu	r2,r8,b838 <__divdf3+0x54c>
    b820:	1585883a 	add	r2,r2,r22
    b824:	393fffc4 	addi	r4,r7,-1
    b828:	1580c536 	bltu	r2,r22,bb40 <__divdf3+0x854>
    b82c:	1200c42e 	bgeu	r2,r8,bb40 <__divdf3+0x854>
    b830:	39ffff84 	addi	r7,r7,-2
    b834:	1585883a 	add	r2,r2,r22
    b838:	122bc83a 	sub	r21,r2,r8
    b83c:	a00b883a 	mov	r5,r20
    b840:	a809883a 	mov	r4,r21
    b844:	d8c00215 	stw	r3,8(sp)
    b848:	d9c00515 	stw	r7,20(sp)
    b84c:	000a95c0 	call	a95c <__udivsi3>
    b850:	9009883a 	mov	r4,r18
    b854:	100b883a 	mov	r5,r2
    b858:	d8800415 	stw	r2,16(sp)
    b85c:	000aa180 	call	aa18 <__mulsi3>
    b860:	a809883a 	mov	r4,r21
    b864:	a00b883a 	mov	r5,r20
    b868:	1025883a 	mov	r18,r2
    b86c:	000a9c00 	call	a9c0 <__umodsi3>
    b870:	1004943a 	slli	r2,r2,16
    b874:	813fffcc 	andi	r4,r16,65535
    b878:	d8c00217 	ldw	r3,8(sp)
    b87c:	20a0b03a 	or	r16,r4,r2
    b880:	d9c00517 	ldw	r7,20(sp)
    b884:	da000417 	ldw	r8,16(sp)
    b888:	8480062e 	bgeu	r16,r18,b8a4 <__divdf3+0x5b8>
    b88c:	85a1883a 	add	r16,r16,r22
    b890:	40bfffc4 	addi	r2,r8,-1
    b894:	8580ac36 	bltu	r16,r22,bb48 <__divdf3+0x85c>
    b898:	8480ab2e 	bgeu	r16,r18,bb48 <__divdf3+0x85c>
    b89c:	423fff84 	addi	r8,r8,-2
    b8a0:	85a1883a 	add	r16,r16,r22
    b8a4:	3804943a 	slli	r2,r7,16
    b8a8:	84a1c83a 	sub	r16,r16,r18
    b8ac:	e009883a 	mov	r4,fp
    b8b0:	1228b03a 	or	r20,r2,r8
    b8b4:	a1ffffcc 	andi	r7,r20,65535
    b8b8:	a024d43a 	srli	r18,r20,16
    b8bc:	380b883a 	mov	r5,r7
    b8c0:	d8c00215 	stw	r3,8(sp)
    b8c4:	d9c00515 	stw	r7,20(sp)
    b8c8:	000aa180 	call	aa18 <__mulsi3>
    b8cc:	900b883a 	mov	r5,r18
    b8d0:	e009883a 	mov	r4,fp
    b8d4:	102b883a 	mov	r21,r2
    b8d8:	000aa180 	call	aa18 <__mulsi3>
    b8dc:	900b883a 	mov	r5,r18
    b8e0:	b809883a 	mov	r4,r23
    b8e4:	1039883a 	mov	fp,r2
    b8e8:	000aa180 	call	aa18 <__mulsi3>
    b8ec:	d9c00517 	ldw	r7,20(sp)
    b8f0:	b80b883a 	mov	r5,r23
    b8f4:	1025883a 	mov	r18,r2
    b8f8:	3809883a 	mov	r4,r7
    b8fc:	000aa180 	call	aa18 <__mulsi3>
    b900:	a808d43a 	srli	r4,r21,16
    b904:	1705883a 	add	r2,r2,fp
    b908:	d8c00217 	ldw	r3,8(sp)
    b90c:	2085883a 	add	r2,r4,r2
    b910:	1700022e 	bgeu	r2,fp,b91c <__divdf3+0x630>
    b914:	01000074 	movhi	r4,1
    b918:	9125883a 	add	r18,r18,r4
    b91c:	1008d43a 	srli	r4,r2,16
    b920:	1004943a 	slli	r2,r2,16
    b924:	ad7fffcc 	andi	r21,r21,65535
    b928:	2489883a 	add	r4,r4,r18
    b92c:	1545883a 	add	r2,r2,r21
    b930:	81003836 	bltu	r16,r4,ba14 <__divdf3+0x728>
    b934:	81003626 	beq	r16,r4,ba10 <__divdf3+0x724>
    b938:	a5000054 	ori	r20,r20,1
    b93c:	1880ffc4 	addi	r2,r3,1023
    b940:	00bf2e0e 	bge	zero,r2,b5fc <__alt_data_end+0xfffeb5fc>
    b944:	a10001cc 	andi	r4,r20,7
    b948:	20000726 	beq	r4,zero,b968 <__divdf3+0x67c>
    b94c:	a10003cc 	andi	r4,r20,15
    b950:	01400104 	movi	r5,4
    b954:	21400426 	beq	r4,r5,b968 <__divdf3+0x67c>
    b958:	a149883a 	add	r4,r20,r5
    b95c:	2529803a 	cmpltu	r20,r4,r20
    b960:	8d23883a 	add	r17,r17,r20
    b964:	2029883a 	mov	r20,r4
    b968:	8900402c 	andhi	r4,r17,256
    b96c:	20000426 	beq	r4,zero,b980 <__divdf3+0x694>
    b970:	18810004 	addi	r2,r3,1024
    b974:	00ffc034 	movhi	r3,65280
    b978:	18ffffc4 	addi	r3,r3,-1
    b97c:	88e2703a 	and	r17,r17,r3
    b980:	00c1ff84 	movi	r3,2046
    b984:	18beb416 	blt	r3,r2,b458 <__alt_data_end+0xfffeb458>
    b988:	a028d0fa 	srli	r20,r20,3
    b98c:	882a977a 	slli	r21,r17,29
    b990:	8820927a 	slli	r16,r17,9
    b994:	1081ffcc 	andi	r2,r2,2047
    b998:	ad2ab03a 	or	r21,r21,r20
    b99c:	8020d33a 	srli	r16,r16,12
    b9a0:	9900004c 	andi	r4,r19,1
    b9a4:	003eb006 	br	b468 <__alt_data_end+0xfffeb468>
    b9a8:	8080022c 	andhi	r2,r16,8
    b9ac:	10001226 	beq	r2,zero,b9f8 <__divdf3+0x70c>
    b9b0:	8880022c 	andhi	r2,r17,8
    b9b4:	1000101e 	bne	r2,zero,b9f8 <__divdf3+0x70c>
    b9b8:	00800434 	movhi	r2,16
    b9bc:	8c000234 	orhi	r16,r17,8
    b9c0:	10bfffc4 	addi	r2,r2,-1
    b9c4:	b809883a 	mov	r4,r23
    b9c8:	80a0703a 	and	r16,r16,r2
    b9cc:	a02b883a 	mov	r21,r20
    b9d0:	003f0806 	br	b5f4 <__alt_data_end+0xfffeb5f4>
    b9d4:	008000c4 	movi	r2,3
    b9d8:	3880b126 	beq	r7,r2,bca0 <__divdf3+0x9b4>
    b9dc:	00800044 	movi	r2,1
    b9e0:	38805b1e 	bne	r7,r2,bb50 <__divdf3+0x864>
    b9e4:	e009883a 	mov	r4,fp
    b9e8:	0005883a 	mov	r2,zero
    b9ec:	0021883a 	mov	r16,zero
    b9f0:	002b883a 	mov	r21,zero
    b9f4:	003e9c06 	br	b468 <__alt_data_end+0xfffeb468>
    b9f8:	00800434 	movhi	r2,16
    b9fc:	84000234 	orhi	r16,r16,8
    ba00:	10bfffc4 	addi	r2,r2,-1
    ba04:	b009883a 	mov	r4,r22
    ba08:	80a0703a 	and	r16,r16,r2
    ba0c:	003ef906 	br	b5f4 <__alt_data_end+0xfffeb5f4>
    ba10:	103fca26 	beq	r2,zero,b93c <__alt_data_end+0xfffeb93c>
    ba14:	b421883a 	add	r16,r22,r16
    ba18:	a17fffc4 	addi	r5,r20,-1
    ba1c:	8580422e 	bgeu	r16,r22,bb28 <__divdf3+0x83c>
    ba20:	2829883a 	mov	r20,r5
    ba24:	813fc41e 	bne	r16,r4,b938 <__alt_data_end+0xfffeb938>
    ba28:	d9800017 	ldw	r6,0(sp)
    ba2c:	30bfc21e 	bne	r6,r2,b938 <__alt_data_end+0xfffeb938>
    ba30:	003fc206 	br	b93c <__alt_data_end+0xfffeb93c>
    ba34:	143ff604 	addi	r16,r2,-40
    ba38:	8c20983a 	sll	r16,r17,r16
    ba3c:	002b883a 	mov	r21,zero
    ba40:	003eb406 	br	b514 <__alt_data_end+0xfffeb514>
    ba44:	d9800215 	stw	r6,8(sp)
    ba48:	d9c00515 	stw	r7,20(sp)
    ba4c:	da000415 	stw	r8,16(sp)
    ba50:	000d2800 	call	d280 <__clzsi2>
    ba54:	10800804 	addi	r2,r2,32
    ba58:	da000417 	ldw	r8,16(sp)
    ba5c:	d9c00517 	ldw	r7,20(sp)
    ba60:	d9800217 	ldw	r6,8(sp)
    ba64:	003ea106 	br	b4ec <__alt_data_end+0xfffeb4ec>
    ba68:	147ff604 	addi	r17,r2,-40
    ba6c:	3462983a 	sll	r17,r6,r17
    ba70:	0029883a 	mov	r20,zero
    ba74:	003ec906 	br	b59c <__alt_data_end+0xfffeb59c>
    ba78:	3009883a 	mov	r4,r6
    ba7c:	d9400115 	stw	r5,4(sp)
    ba80:	d9800215 	stw	r6,8(sp)
    ba84:	da000415 	stw	r8,16(sp)
    ba88:	da400315 	stw	r9,12(sp)
    ba8c:	000d2800 	call	d280 <__clzsi2>
    ba90:	10800804 	addi	r2,r2,32
    ba94:	da400317 	ldw	r9,12(sp)
    ba98:	da000417 	ldw	r8,16(sp)
    ba9c:	d9800217 	ldw	r6,8(sp)
    baa0:	d9400117 	ldw	r5,4(sp)
    baa4:	003eb306 	br	b574 <__alt_data_end+0xfffeb574>
    baa8:	d9800017 	ldw	r6,0(sp)
    baac:	a9ab883a 	add	r21,r21,r6
    bab0:	a98b803a 	cmpltu	r5,r21,r6
    bab4:	2d8b883a 	add	r5,r5,r22
    bab8:	2a11883a 	add	r8,r5,r8
    babc:	897fffc4 	addi	r5,r17,-1
    bac0:	b2000c2e 	bgeu	r22,r8,baf4 <__divdf3+0x808>
    bac4:	41003f36 	bltu	r8,r4,bbc4 <__divdf3+0x8d8>
    bac8:	22006c26 	beq	r4,r8,bc7c <__divdf3+0x990>
    bacc:	4109c83a 	sub	r4,r8,r4
    bad0:	2823883a 	mov	r17,r5
    bad4:	003f3b06 	br	b7c4 <__alt_data_end+0xfffeb7c4>
    bad8:	ad3ed336 	bltu	r21,r20,b628 <__alt_data_end+0xfffeb628>
    badc:	a804d07a 	srli	r2,r21,1
    bae0:	802e97fa 	slli	r23,r16,31
    bae4:	a82a97fa 	slli	r21,r21,31
    bae8:	8020d07a 	srli	r16,r16,1
    baec:	b8aeb03a 	or	r23,r23,r2
    baf0:	003ed006 	br	b634 <__alt_data_end+0xfffeb634>
    baf4:	b23ff51e 	bne	r22,r8,bacc <__alt_data_end+0xfffebacc>
    baf8:	d9800017 	ldw	r6,0(sp)
    bafc:	a9bff12e 	bgeu	r21,r6,bac4 <__alt_data_end+0xfffebac4>
    bb00:	b109c83a 	sub	r4,r22,r4
    bb04:	2823883a 	mov	r17,r5
    bb08:	003f2e06 	br	b7c4 <__alt_data_end+0xfffeb7c4>
    bb0c:	2021883a 	mov	r16,r4
    bb10:	003eff06 	br	b710 <__alt_data_end+0xfffeb710>
    bb14:	2023883a 	mov	r17,r4
    bb18:	003ee406 	br	b6ac <__alt_data_end+0xfffeb6ac>
    bb1c:	a8bfe236 	bltu	r21,r2,baa8 <__alt_data_end+0xfffebaa8>
    bb20:	0009883a 	mov	r4,zero
    bb24:	003f2706 	br	b7c4 <__alt_data_end+0xfffeb7c4>
    bb28:	81002d36 	bltu	r16,r4,bbe0 <__divdf3+0x8f4>
    bb2c:	24005626 	beq	r4,r16,bc88 <__divdf3+0x99c>
    bb30:	2829883a 	mov	r20,r5
    bb34:	003f8006 	br	b938 <__alt_data_end+0xfffeb938>
    bb38:	053fffc4 	movi	r20,-1
    bb3c:	003f7f06 	br	b93c <__alt_data_end+0xfffeb93c>
    bb40:	200f883a 	mov	r7,r4
    bb44:	003f3c06 	br	b838 <__alt_data_end+0xfffeb838>
    bb48:	1011883a 	mov	r8,r2
    bb4c:	003f5506 	br	b8a4 <__alt_data_end+0xfffeb8a4>
    bb50:	e027883a 	mov	r19,fp
    bb54:	003f7906 	br	b93c <__alt_data_end+0xfffeb93c>
    bb58:	010007c4 	movi	r4,31
    bb5c:	20c02816 	blt	r4,r3,bc00 <__divdf3+0x914>
    bb60:	00800804 	movi	r2,32
    bb64:	10c5c83a 	sub	r2,r2,r3
    bb68:	888a983a 	sll	r5,r17,r2
    bb6c:	a0c8d83a 	srl	r4,r20,r3
    bb70:	a084983a 	sll	r2,r20,r2
    bb74:	88e2d83a 	srl	r17,r17,r3
    bb78:	2906b03a 	or	r3,r5,r4
    bb7c:	1004c03a 	cmpne	r2,r2,zero
    bb80:	1886b03a 	or	r3,r3,r2
    bb84:	188001cc 	andi	r2,r3,7
    bb88:	10000726 	beq	r2,zero,bba8 <__divdf3+0x8bc>
    bb8c:	188003cc 	andi	r2,r3,15
    bb90:	01000104 	movi	r4,4
    bb94:	11000426 	beq	r2,r4,bba8 <__divdf3+0x8bc>
    bb98:	1805883a 	mov	r2,r3
    bb9c:	10c00104 	addi	r3,r2,4
    bba0:	1885803a 	cmpltu	r2,r3,r2
    bba4:	88a3883a 	add	r17,r17,r2
    bba8:	8880202c 	andhi	r2,r17,128
    bbac:	10002926 	beq	r2,zero,bc54 <__divdf3+0x968>
    bbb0:	9900004c 	andi	r4,r19,1
    bbb4:	00800044 	movi	r2,1
    bbb8:	0021883a 	mov	r16,zero
    bbbc:	002b883a 	mov	r21,zero
    bbc0:	003e2906 	br	b468 <__alt_data_end+0xfffeb468>
    bbc4:	d9800017 	ldw	r6,0(sp)
    bbc8:	8c7fff84 	addi	r17,r17,-2
    bbcc:	a9ab883a 	add	r21,r21,r6
    bbd0:	a98b803a 	cmpltu	r5,r21,r6
    bbd4:	2d8b883a 	add	r5,r5,r22
    bbd8:	2a11883a 	add	r8,r5,r8
    bbdc:	003ef806 	br	b7c0 <__alt_data_end+0xfffeb7c0>
    bbe0:	d9800017 	ldw	r6,0(sp)
    bbe4:	318f883a 	add	r7,r6,r6
    bbe8:	398b803a 	cmpltu	r5,r7,r6
    bbec:	2d8d883a 	add	r6,r5,r22
    bbf0:	81a1883a 	add	r16,r16,r6
    bbf4:	a17fff84 	addi	r5,r20,-2
    bbf8:	d9c00015 	stw	r7,0(sp)
    bbfc:	003f8806 	br	ba20 <__alt_data_end+0xfffeba20>
    bc00:	013ff844 	movi	r4,-31
    bc04:	2085c83a 	sub	r2,r4,r2
    bc08:	8888d83a 	srl	r4,r17,r2
    bc0c:	00800804 	movi	r2,32
    bc10:	18802126 	beq	r3,r2,bc98 <__divdf3+0x9ac>
    bc14:	04001004 	movi	r16,64
    bc18:	80c7c83a 	sub	r3,r16,r3
    bc1c:	88e0983a 	sll	r16,r17,r3
    bc20:	8504b03a 	or	r2,r16,r20
    bc24:	1004c03a 	cmpne	r2,r2,zero
    bc28:	2084b03a 	or	r2,r4,r2
    bc2c:	144001cc 	andi	r17,r2,7
    bc30:	88000d1e 	bne	r17,zero,bc68 <__divdf3+0x97c>
    bc34:	0021883a 	mov	r16,zero
    bc38:	102ad0fa 	srli	r21,r2,3
    bc3c:	9900004c 	andi	r4,r19,1
    bc40:	0005883a 	mov	r2,zero
    bc44:	ac6ab03a 	or	r21,r21,r17
    bc48:	003e0706 	br	b468 <__alt_data_end+0xfffeb468>
    bc4c:	1007883a 	mov	r3,r2
    bc50:	0023883a 	mov	r17,zero
    bc54:	8820927a 	slli	r16,r17,9
    bc58:	1805883a 	mov	r2,r3
    bc5c:	8822977a 	slli	r17,r17,29
    bc60:	8020d33a 	srli	r16,r16,12
    bc64:	003ff406 	br	bc38 <__alt_data_end+0xfffebc38>
    bc68:	10c003cc 	andi	r3,r2,15
    bc6c:	01000104 	movi	r4,4
    bc70:	193ff626 	beq	r3,r4,bc4c <__alt_data_end+0xfffebc4c>
    bc74:	0023883a 	mov	r17,zero
    bc78:	003fc806 	br	bb9c <__alt_data_end+0xfffebb9c>
    bc7c:	a8bfd136 	bltu	r21,r2,bbc4 <__alt_data_end+0xfffebbc4>
    bc80:	2823883a 	mov	r17,r5
    bc84:	003fa606 	br	bb20 <__alt_data_end+0xfffebb20>
    bc88:	d9800017 	ldw	r6,0(sp)
    bc8c:	30bfd436 	bltu	r6,r2,bbe0 <__alt_data_end+0xfffebbe0>
    bc90:	2829883a 	mov	r20,r5
    bc94:	003f6406 	br	ba28 <__alt_data_end+0xfffeba28>
    bc98:	0021883a 	mov	r16,zero
    bc9c:	003fe006 	br	bc20 <__alt_data_end+0xfffebc20>
    bca0:	00800434 	movhi	r2,16
    bca4:	8c000234 	orhi	r16,r17,8
    bca8:	10bfffc4 	addi	r2,r2,-1
    bcac:	e009883a 	mov	r4,fp
    bcb0:	80a0703a 	and	r16,r16,r2
    bcb4:	a02b883a 	mov	r21,r20
    bcb8:	003e4e06 	br	b5f4 <__alt_data_end+0xfffeb5f4>

0000bcbc <__eqdf2>:
    bcbc:	2804d53a 	srli	r2,r5,20
    bcc0:	3806d53a 	srli	r3,r7,20
    bcc4:	02000434 	movhi	r8,16
    bcc8:	423fffc4 	addi	r8,r8,-1
    bccc:	1081ffcc 	andi	r2,r2,2047
    bcd0:	0281ffc4 	movi	r10,2047
    bcd4:	2a12703a 	and	r9,r5,r8
    bcd8:	18c1ffcc 	andi	r3,r3,2047
    bcdc:	3a10703a 	and	r8,r7,r8
    bce0:	280ad7fa 	srli	r5,r5,31
    bce4:	380ed7fa 	srli	r7,r7,31
    bce8:	12801026 	beq	r2,r10,bd2c <__eqdf2+0x70>
    bcec:	0281ffc4 	movi	r10,2047
    bcf0:	1a800a26 	beq	r3,r10,bd1c <__eqdf2+0x60>
    bcf4:	10c00226 	beq	r2,r3,bd00 <__eqdf2+0x44>
    bcf8:	00800044 	movi	r2,1
    bcfc:	f800283a 	ret
    bd00:	4a3ffd1e 	bne	r9,r8,bcf8 <__alt_data_end+0xfffebcf8>
    bd04:	21bffc1e 	bne	r4,r6,bcf8 <__alt_data_end+0xfffebcf8>
    bd08:	29c00c26 	beq	r5,r7,bd3c <__eqdf2+0x80>
    bd0c:	103ffa1e 	bne	r2,zero,bcf8 <__alt_data_end+0xfffebcf8>
    bd10:	2244b03a 	or	r2,r4,r9
    bd14:	1004c03a 	cmpne	r2,r2,zero
    bd18:	f800283a 	ret
    bd1c:	3214b03a 	or	r10,r6,r8
    bd20:	503ff426 	beq	r10,zero,bcf4 <__alt_data_end+0xfffebcf4>
    bd24:	00800044 	movi	r2,1
    bd28:	f800283a 	ret
    bd2c:	2254b03a 	or	r10,r4,r9
    bd30:	503fee26 	beq	r10,zero,bcec <__alt_data_end+0xfffebcec>
    bd34:	00800044 	movi	r2,1
    bd38:	f800283a 	ret
    bd3c:	0005883a 	mov	r2,zero
    bd40:	f800283a 	ret

0000bd44 <__gedf2>:
    bd44:	2804d53a 	srli	r2,r5,20
    bd48:	3806d53a 	srli	r3,r7,20
    bd4c:	02000434 	movhi	r8,16
    bd50:	423fffc4 	addi	r8,r8,-1
    bd54:	1081ffcc 	andi	r2,r2,2047
    bd58:	0241ffc4 	movi	r9,2047
    bd5c:	2a14703a 	and	r10,r5,r8
    bd60:	18c1ffcc 	andi	r3,r3,2047
    bd64:	3a10703a 	and	r8,r7,r8
    bd68:	280ad7fa 	srli	r5,r5,31
    bd6c:	380ed7fa 	srli	r7,r7,31
    bd70:	12401d26 	beq	r2,r9,bde8 <__gedf2+0xa4>
    bd74:	0241ffc4 	movi	r9,2047
    bd78:	1a401226 	beq	r3,r9,bdc4 <__gedf2+0x80>
    bd7c:	1000081e 	bne	r2,zero,bda0 <__gedf2+0x5c>
    bd80:	2296b03a 	or	r11,r4,r10
    bd84:	5813003a 	cmpeq	r9,r11,zero
    bd88:	1800091e 	bne	r3,zero,bdb0 <__gedf2+0x6c>
    bd8c:	3218b03a 	or	r12,r6,r8
    bd90:	6000071e 	bne	r12,zero,bdb0 <__gedf2+0x6c>
    bd94:	0005883a 	mov	r2,zero
    bd98:	5800101e 	bne	r11,zero,bddc <__gedf2+0x98>
    bd9c:	f800283a 	ret
    bda0:	18000c1e 	bne	r3,zero,bdd4 <__gedf2+0x90>
    bda4:	3212b03a 	or	r9,r6,r8
    bda8:	48000c26 	beq	r9,zero,bddc <__gedf2+0x98>
    bdac:	0013883a 	mov	r9,zero
    bdb0:	39c03fcc 	andi	r7,r7,255
    bdb4:	48000826 	beq	r9,zero,bdd8 <__gedf2+0x94>
    bdb8:	38000926 	beq	r7,zero,bde0 <__gedf2+0x9c>
    bdbc:	00800044 	movi	r2,1
    bdc0:	f800283a 	ret
    bdc4:	3212b03a 	or	r9,r6,r8
    bdc8:	483fec26 	beq	r9,zero,bd7c <__alt_data_end+0xfffebd7c>
    bdcc:	00bfff84 	movi	r2,-2
    bdd0:	f800283a 	ret
    bdd4:	39c03fcc 	andi	r7,r7,255
    bdd8:	29c00626 	beq	r5,r7,bdf4 <__gedf2+0xb0>
    bddc:	283ff726 	beq	r5,zero,bdbc <__alt_data_end+0xfffebdbc>
    bde0:	00bfffc4 	movi	r2,-1
    bde4:	f800283a 	ret
    bde8:	2292b03a 	or	r9,r4,r10
    bdec:	483fe126 	beq	r9,zero,bd74 <__alt_data_end+0xfffebd74>
    bdf0:	003ff606 	br	bdcc <__alt_data_end+0xfffebdcc>
    bdf4:	18bff916 	blt	r3,r2,bddc <__alt_data_end+0xfffebddc>
    bdf8:	10c00316 	blt	r2,r3,be08 <__gedf2+0xc4>
    bdfc:	42bff736 	bltu	r8,r10,bddc <__alt_data_end+0xfffebddc>
    be00:	52000326 	beq	r10,r8,be10 <__gedf2+0xcc>
    be04:	5200042e 	bgeu	r10,r8,be18 <__gedf2+0xd4>
    be08:	283fec1e 	bne	r5,zero,bdbc <__alt_data_end+0xfffebdbc>
    be0c:	003ff406 	br	bde0 <__alt_data_end+0xfffebde0>
    be10:	313ff236 	bltu	r6,r4,bddc <__alt_data_end+0xfffebddc>
    be14:	21bffc36 	bltu	r4,r6,be08 <__alt_data_end+0xfffebe08>
    be18:	0005883a 	mov	r2,zero
    be1c:	f800283a 	ret

0000be20 <__ledf2>:
    be20:	2804d53a 	srli	r2,r5,20
    be24:	3810d53a 	srli	r8,r7,20
    be28:	00c00434 	movhi	r3,16
    be2c:	18ffffc4 	addi	r3,r3,-1
    be30:	1081ffcc 	andi	r2,r2,2047
    be34:	0241ffc4 	movi	r9,2047
    be38:	28d4703a 	and	r10,r5,r3
    be3c:	4201ffcc 	andi	r8,r8,2047
    be40:	38c6703a 	and	r3,r7,r3
    be44:	280ad7fa 	srli	r5,r5,31
    be48:	380ed7fa 	srli	r7,r7,31
    be4c:	12401f26 	beq	r2,r9,becc <__ledf2+0xac>
    be50:	0241ffc4 	movi	r9,2047
    be54:	42401426 	beq	r8,r9,bea8 <__ledf2+0x88>
    be58:	1000091e 	bne	r2,zero,be80 <__ledf2+0x60>
    be5c:	2296b03a 	or	r11,r4,r10
    be60:	5813003a 	cmpeq	r9,r11,zero
    be64:	29403fcc 	andi	r5,r5,255
    be68:	40000a1e 	bne	r8,zero,be94 <__ledf2+0x74>
    be6c:	30d8b03a 	or	r12,r6,r3
    be70:	6000081e 	bne	r12,zero,be94 <__ledf2+0x74>
    be74:	0005883a 	mov	r2,zero
    be78:	5800111e 	bne	r11,zero,bec0 <__ledf2+0xa0>
    be7c:	f800283a 	ret
    be80:	29403fcc 	andi	r5,r5,255
    be84:	40000c1e 	bne	r8,zero,beb8 <__ledf2+0x98>
    be88:	30d2b03a 	or	r9,r6,r3
    be8c:	48000c26 	beq	r9,zero,bec0 <__ledf2+0xa0>
    be90:	0013883a 	mov	r9,zero
    be94:	39c03fcc 	andi	r7,r7,255
    be98:	48000826 	beq	r9,zero,bebc <__ledf2+0x9c>
    be9c:	38001126 	beq	r7,zero,bee4 <__ledf2+0xc4>
    bea0:	00800044 	movi	r2,1
    bea4:	f800283a 	ret
    bea8:	30d2b03a 	or	r9,r6,r3
    beac:	483fea26 	beq	r9,zero,be58 <__alt_data_end+0xfffebe58>
    beb0:	00800084 	movi	r2,2
    beb4:	f800283a 	ret
    beb8:	39c03fcc 	andi	r7,r7,255
    bebc:	39400726 	beq	r7,r5,bedc <__ledf2+0xbc>
    bec0:	2800081e 	bne	r5,zero,bee4 <__ledf2+0xc4>
    bec4:	00800044 	movi	r2,1
    bec8:	f800283a 	ret
    becc:	2292b03a 	or	r9,r4,r10
    bed0:	483fdf26 	beq	r9,zero,be50 <__alt_data_end+0xfffebe50>
    bed4:	00800084 	movi	r2,2
    bed8:	f800283a 	ret
    bedc:	4080030e 	bge	r8,r2,beec <__ledf2+0xcc>
    bee0:	383fef26 	beq	r7,zero,bea0 <__alt_data_end+0xfffebea0>
    bee4:	00bfffc4 	movi	r2,-1
    bee8:	f800283a 	ret
    beec:	123feb16 	blt	r2,r8,be9c <__alt_data_end+0xfffebe9c>
    bef0:	1abff336 	bltu	r3,r10,bec0 <__alt_data_end+0xfffebec0>
    bef4:	50c00326 	beq	r10,r3,bf04 <__ledf2+0xe4>
    bef8:	50c0042e 	bgeu	r10,r3,bf0c <__ledf2+0xec>
    befc:	283fe81e 	bne	r5,zero,bea0 <__alt_data_end+0xfffebea0>
    bf00:	003ff806 	br	bee4 <__alt_data_end+0xfffebee4>
    bf04:	313fee36 	bltu	r6,r4,bec0 <__alt_data_end+0xfffebec0>
    bf08:	21bffc36 	bltu	r4,r6,befc <__alt_data_end+0xfffebefc>
    bf0c:	0005883a 	mov	r2,zero
    bf10:	f800283a 	ret

0000bf14 <__muldf3>:
    bf14:	deffee04 	addi	sp,sp,-72
    bf18:	dd000c15 	stw	r20,48(sp)
    bf1c:	2828d53a 	srli	r20,r5,20
    bf20:	ddc00f15 	stw	r23,60(sp)
    bf24:	282ed7fa 	srli	r23,r5,31
    bf28:	dc000815 	stw	r16,32(sp)
    bf2c:	04000434 	movhi	r16,16
    bf30:	dcc00b15 	stw	r19,44(sp)
    bf34:	843fffc4 	addi	r16,r16,-1
    bf38:	dfc01115 	stw	ra,68(sp)
    bf3c:	df001015 	stw	fp,64(sp)
    bf40:	dd800e15 	stw	r22,56(sp)
    bf44:	dd400d15 	stw	r21,52(sp)
    bf48:	dc800a15 	stw	r18,40(sp)
    bf4c:	dc400915 	stw	r17,36(sp)
    bf50:	a501ffcc 	andi	r20,r20,2047
    bf54:	2c20703a 	and	r16,r5,r16
    bf58:	b827883a 	mov	r19,r23
    bf5c:	ba403fcc 	andi	r9,r23,255
    bf60:	a0006026 	beq	r20,zero,c0e4 <__muldf3+0x1d0>
    bf64:	0081ffc4 	movi	r2,2047
    bf68:	202d883a 	mov	r22,r4
    bf6c:	a0803626 	beq	r20,r2,c048 <__muldf3+0x134>
    bf70:	84000434 	orhi	r16,r16,16
    bf74:	200ad77a 	srli	r5,r4,29
    bf78:	800490fa 	slli	r2,r16,3
    bf7c:	202c90fa 	slli	r22,r4,3
    bf80:	a53f0044 	addi	r20,r20,-1023
    bf84:	28a0b03a 	or	r16,r5,r2
    bf88:	002b883a 	mov	r21,zero
    bf8c:	000b883a 	mov	r5,zero
    bf90:	3804d53a 	srli	r2,r7,20
    bf94:	3838d7fa 	srli	fp,r7,31
    bf98:	04400434 	movhi	r17,16
    bf9c:	8c7fffc4 	addi	r17,r17,-1
    bfa0:	1081ffcc 	andi	r2,r2,2047
    bfa4:	3025883a 	mov	r18,r6
    bfa8:	3c62703a 	and	r17,r7,r17
    bfac:	e2803fcc 	andi	r10,fp,255
    bfb0:	10006d26 	beq	r2,zero,c168 <__muldf3+0x254>
    bfb4:	00c1ffc4 	movi	r3,2047
    bfb8:	10c06526 	beq	r2,r3,c150 <__muldf3+0x23c>
    bfbc:	8c400434 	orhi	r17,r17,16
    bfc0:	300ed77a 	srli	r7,r6,29
    bfc4:	880690fa 	slli	r3,r17,3
    bfc8:	302490fa 	slli	r18,r6,3
    bfcc:	10bf0044 	addi	r2,r2,-1023
    bfd0:	38e2b03a 	or	r17,r7,r3
    bfd4:	000f883a 	mov	r7,zero
    bfd8:	a087883a 	add	r3,r20,r2
    bfdc:	010003c4 	movi	r4,15
    bfe0:	3d44b03a 	or	r2,r7,r21
    bfe4:	e5ccf03a 	xor	r6,fp,r23
    bfe8:	1a000044 	addi	r8,r3,1
    bfec:	20809b36 	bltu	r4,r2,c25c <__muldf3+0x348>
    bff0:	100490ba 	slli	r2,r2,2
    bff4:	01000074 	movhi	r4,1
    bff8:	21300204 	addi	r4,r4,-16376
    bffc:	1105883a 	add	r2,r2,r4
    c000:	10800017 	ldw	r2,0(r2)
    c004:	1000683a 	jmp	r2
    c008:	0000c25c 	xori	zero,zero,777
    c00c:	0000c068 	cmpgeui	zero,zero,769
    c010:	0000c068 	cmpgeui	zero,zero,769
    c014:	0000c064 	muli	zero,zero,769
    c018:	0000c238 	rdprs	zero,zero,776
    c01c:	0000c238 	rdprs	zero,zero,776
    c020:	0000c220 	cmpeqi	zero,zero,776
    c024:	0000c064 	muli	zero,zero,769
    c028:	0000c238 	rdprs	zero,zero,776
    c02c:	0000c220 	cmpeqi	zero,zero,776
    c030:	0000c238 	rdprs	zero,zero,776
    c034:	0000c064 	muli	zero,zero,769
    c038:	0000c248 	cmpgei	zero,zero,777
    c03c:	0000c248 	cmpgei	zero,zero,777
    c040:	0000c248 	cmpgei	zero,zero,777
    c044:	0000c5a8 	cmpgeui	zero,zero,790
    c048:	2404b03a 	or	r2,r4,r16
    c04c:	1000711e 	bne	r2,zero,c214 <__muldf3+0x300>
    c050:	05400204 	movi	r21,8
    c054:	0021883a 	mov	r16,zero
    c058:	002d883a 	mov	r22,zero
    c05c:	01400084 	movi	r5,2
    c060:	003fcb06 	br	bf90 <__alt_data_end+0xfffebf90>
    c064:	500d883a 	mov	r6,r10
    c068:	00800084 	movi	r2,2
    c06c:	38805926 	beq	r7,r2,c1d4 <__muldf3+0x2c0>
    c070:	008000c4 	movi	r2,3
    c074:	3881bb26 	beq	r7,r2,c764 <__muldf3+0x850>
    c078:	00800044 	movi	r2,1
    c07c:	3881961e 	bne	r7,r2,c6d8 <__muldf3+0x7c4>
    c080:	3027883a 	mov	r19,r6
    c084:	0005883a 	mov	r2,zero
    c088:	0021883a 	mov	r16,zero
    c08c:	002d883a 	mov	r22,zero
    c090:	1004953a 	slli	r2,r2,20
    c094:	98c03fcc 	andi	r3,r19,255
    c098:	04400434 	movhi	r17,16
    c09c:	8c7fffc4 	addi	r17,r17,-1
    c0a0:	180697fa 	slli	r3,r3,31
    c0a4:	8460703a 	and	r16,r16,r17
    c0a8:	80a0b03a 	or	r16,r16,r2
    c0ac:	80c6b03a 	or	r3,r16,r3
    c0b0:	b005883a 	mov	r2,r22
    c0b4:	dfc01117 	ldw	ra,68(sp)
    c0b8:	df001017 	ldw	fp,64(sp)
    c0bc:	ddc00f17 	ldw	r23,60(sp)
    c0c0:	dd800e17 	ldw	r22,56(sp)
    c0c4:	dd400d17 	ldw	r21,52(sp)
    c0c8:	dd000c17 	ldw	r20,48(sp)
    c0cc:	dcc00b17 	ldw	r19,44(sp)
    c0d0:	dc800a17 	ldw	r18,40(sp)
    c0d4:	dc400917 	ldw	r17,36(sp)
    c0d8:	dc000817 	ldw	r16,32(sp)
    c0dc:	dec01204 	addi	sp,sp,72
    c0e0:	f800283a 	ret
    c0e4:	2404b03a 	or	r2,r4,r16
    c0e8:	202b883a 	mov	r21,r4
    c0ec:	10004426 	beq	r2,zero,c200 <__muldf3+0x2ec>
    c0f0:	80015126 	beq	r16,zero,c638 <__muldf3+0x724>
    c0f4:	8009883a 	mov	r4,r16
    c0f8:	d9800715 	stw	r6,28(sp)
    c0fc:	d9c00215 	stw	r7,8(sp)
    c100:	da400415 	stw	r9,16(sp)
    c104:	000d2800 	call	d280 <__clzsi2>
    c108:	d9800717 	ldw	r6,28(sp)
    c10c:	d9c00217 	ldw	r7,8(sp)
    c110:	da400417 	ldw	r9,16(sp)
    c114:	113ffd44 	addi	r4,r2,-11
    c118:	00c00704 	movi	r3,28
    c11c:	19014216 	blt	r3,r4,c628 <__muldf3+0x714>
    c120:	00c00744 	movi	r3,29
    c124:	15bffe04 	addi	r22,r2,-8
    c128:	1907c83a 	sub	r3,r3,r4
    c12c:	85a0983a 	sll	r16,r16,r22
    c130:	a8c6d83a 	srl	r3,r21,r3
    c134:	adac983a 	sll	r22,r21,r22
    c138:	1c20b03a 	or	r16,r3,r16
    c13c:	1080fcc4 	addi	r2,r2,1011
    c140:	00a9c83a 	sub	r20,zero,r2
    c144:	002b883a 	mov	r21,zero
    c148:	000b883a 	mov	r5,zero
    c14c:	003f9006 	br	bf90 <__alt_data_end+0xfffebf90>
    c150:	3446b03a 	or	r3,r6,r17
    c154:	1800281e 	bne	r3,zero,c1f8 <__muldf3+0x2e4>
    c158:	0023883a 	mov	r17,zero
    c15c:	0025883a 	mov	r18,zero
    c160:	01c00084 	movi	r7,2
    c164:	003f9c06 	br	bfd8 <__alt_data_end+0xfffebfd8>
    c168:	3446b03a 	or	r3,r6,r17
    c16c:	18001e26 	beq	r3,zero,c1e8 <__muldf3+0x2d4>
    c170:	88012126 	beq	r17,zero,c5f8 <__muldf3+0x6e4>
    c174:	8809883a 	mov	r4,r17
    c178:	d9400215 	stw	r5,8(sp)
    c17c:	d9800715 	stw	r6,28(sp)
    c180:	da400415 	stw	r9,16(sp)
    c184:	da800315 	stw	r10,12(sp)
    c188:	000d2800 	call	d280 <__clzsi2>
    c18c:	d9400217 	ldw	r5,8(sp)
    c190:	d9800717 	ldw	r6,28(sp)
    c194:	da400417 	ldw	r9,16(sp)
    c198:	da800317 	ldw	r10,12(sp)
    c19c:	113ffd44 	addi	r4,r2,-11
    c1a0:	00c00704 	movi	r3,28
    c1a4:	19011016 	blt	r3,r4,c5e8 <__muldf3+0x6d4>
    c1a8:	00c00744 	movi	r3,29
    c1ac:	14bffe04 	addi	r18,r2,-8
    c1b0:	1907c83a 	sub	r3,r3,r4
    c1b4:	8ca2983a 	sll	r17,r17,r18
    c1b8:	30c6d83a 	srl	r3,r6,r3
    c1bc:	34a4983a 	sll	r18,r6,r18
    c1c0:	1c62b03a 	or	r17,r3,r17
    c1c4:	1080fcc4 	addi	r2,r2,1011
    c1c8:	0085c83a 	sub	r2,zero,r2
    c1cc:	000f883a 	mov	r7,zero
    c1d0:	003f8106 	br	bfd8 <__alt_data_end+0xfffebfd8>
    c1d4:	3027883a 	mov	r19,r6
    c1d8:	0081ffc4 	movi	r2,2047
    c1dc:	0021883a 	mov	r16,zero
    c1e0:	002d883a 	mov	r22,zero
    c1e4:	003faa06 	br	c090 <__alt_data_end+0xfffec090>
    c1e8:	0023883a 	mov	r17,zero
    c1ec:	0025883a 	mov	r18,zero
    c1f0:	01c00044 	movi	r7,1
    c1f4:	003f7806 	br	bfd8 <__alt_data_end+0xfffebfd8>
    c1f8:	01c000c4 	movi	r7,3
    c1fc:	003f7606 	br	bfd8 <__alt_data_end+0xfffebfd8>
    c200:	05400104 	movi	r21,4
    c204:	0021883a 	mov	r16,zero
    c208:	002d883a 	mov	r22,zero
    c20c:	01400044 	movi	r5,1
    c210:	003f5f06 	br	bf90 <__alt_data_end+0xfffebf90>
    c214:	05400304 	movi	r21,12
    c218:	014000c4 	movi	r5,3
    c21c:	003f5c06 	br	bf90 <__alt_data_end+0xfffebf90>
    c220:	04000434 	movhi	r16,16
    c224:	0027883a 	mov	r19,zero
    c228:	843fffc4 	addi	r16,r16,-1
    c22c:	05bfffc4 	movi	r22,-1
    c230:	0081ffc4 	movi	r2,2047
    c234:	003f9606 	br	c090 <__alt_data_end+0xfffec090>
    c238:	8023883a 	mov	r17,r16
    c23c:	b025883a 	mov	r18,r22
    c240:	280f883a 	mov	r7,r5
    c244:	003f8806 	br	c068 <__alt_data_end+0xfffec068>
    c248:	8023883a 	mov	r17,r16
    c24c:	b025883a 	mov	r18,r22
    c250:	480d883a 	mov	r6,r9
    c254:	280f883a 	mov	r7,r5
    c258:	003f8306 	br	c068 <__alt_data_end+0xfffec068>
    c25c:	b026d43a 	srli	r19,r22,16
    c260:	902ed43a 	srli	r23,r18,16
    c264:	b5bfffcc 	andi	r22,r22,65535
    c268:	94bfffcc 	andi	r18,r18,65535
    c26c:	b00b883a 	mov	r5,r22
    c270:	9009883a 	mov	r4,r18
    c274:	d8c00515 	stw	r3,20(sp)
    c278:	d9800715 	stw	r6,28(sp)
    c27c:	da000615 	stw	r8,24(sp)
    c280:	000aa180 	call	aa18 <__mulsi3>
    c284:	980b883a 	mov	r5,r19
    c288:	9009883a 	mov	r4,r18
    c28c:	1029883a 	mov	r20,r2
    c290:	000aa180 	call	aa18 <__mulsi3>
    c294:	b80b883a 	mov	r5,r23
    c298:	9809883a 	mov	r4,r19
    c29c:	102b883a 	mov	r21,r2
    c2a0:	000aa180 	call	aa18 <__mulsi3>
    c2a4:	b809883a 	mov	r4,r23
    c2a8:	b00b883a 	mov	r5,r22
    c2ac:	1039883a 	mov	fp,r2
    c2b0:	000aa180 	call	aa18 <__mulsi3>
    c2b4:	a008d43a 	srli	r4,r20,16
    c2b8:	1545883a 	add	r2,r2,r21
    c2bc:	d8c00517 	ldw	r3,20(sp)
    c2c0:	2085883a 	add	r2,r4,r2
    c2c4:	d9800717 	ldw	r6,28(sp)
    c2c8:	da000617 	ldw	r8,24(sp)
    c2cc:	1540022e 	bgeu	r2,r21,c2d8 <__muldf3+0x3c4>
    c2d0:	01000074 	movhi	r4,1
    c2d4:	e139883a 	add	fp,fp,r4
    c2d8:	100e943a 	slli	r7,r2,16
    c2dc:	1004d43a 	srli	r2,r2,16
    c2e0:	882ad43a 	srli	r21,r17,16
    c2e4:	a53fffcc 	andi	r20,r20,65535
    c2e8:	8c7fffcc 	andi	r17,r17,65535
    c2ec:	3d29883a 	add	r20,r7,r20
    c2f0:	b00b883a 	mov	r5,r22
    c2f4:	8809883a 	mov	r4,r17
    c2f8:	d8c00515 	stw	r3,20(sp)
    c2fc:	d9800715 	stw	r6,28(sp)
    c300:	da000615 	stw	r8,24(sp)
    c304:	dd000115 	stw	r20,4(sp)
    c308:	d8800015 	stw	r2,0(sp)
    c30c:	000aa180 	call	aa18 <__mulsi3>
    c310:	980b883a 	mov	r5,r19
    c314:	8809883a 	mov	r4,r17
    c318:	d8800215 	stw	r2,8(sp)
    c31c:	000aa180 	call	aa18 <__mulsi3>
    c320:	9809883a 	mov	r4,r19
    c324:	a80b883a 	mov	r5,r21
    c328:	1029883a 	mov	r20,r2
    c32c:	000aa180 	call	aa18 <__mulsi3>
    c330:	b00b883a 	mov	r5,r22
    c334:	a809883a 	mov	r4,r21
    c338:	d8800415 	stw	r2,16(sp)
    c33c:	000aa180 	call	aa18 <__mulsi3>
    c340:	d9c00217 	ldw	r7,8(sp)
    c344:	1505883a 	add	r2,r2,r20
    c348:	d8c00517 	ldw	r3,20(sp)
    c34c:	3826d43a 	srli	r19,r7,16
    c350:	d9800717 	ldw	r6,28(sp)
    c354:	da000617 	ldw	r8,24(sp)
    c358:	9885883a 	add	r2,r19,r2
    c35c:	da400417 	ldw	r9,16(sp)
    c360:	1500022e 	bgeu	r2,r20,c36c <__muldf3+0x458>
    c364:	01000074 	movhi	r4,1
    c368:	4913883a 	add	r9,r9,r4
    c36c:	1028d43a 	srli	r20,r2,16
    c370:	1004943a 	slli	r2,r2,16
    c374:	802cd43a 	srli	r22,r16,16
    c378:	843fffcc 	andi	r16,r16,65535
    c37c:	3cffffcc 	andi	r19,r7,65535
    c380:	9009883a 	mov	r4,r18
    c384:	800b883a 	mov	r5,r16
    c388:	a269883a 	add	r20,r20,r9
    c38c:	d8c00515 	stw	r3,20(sp)
    c390:	d9800715 	stw	r6,28(sp)
    c394:	da000615 	stw	r8,24(sp)
    c398:	14e7883a 	add	r19,r2,r19
    c39c:	000aa180 	call	aa18 <__mulsi3>
    c3a0:	9009883a 	mov	r4,r18
    c3a4:	b00b883a 	mov	r5,r22
    c3a8:	d8800315 	stw	r2,12(sp)
    c3ac:	000aa180 	call	aa18 <__mulsi3>
    c3b0:	b809883a 	mov	r4,r23
    c3b4:	b00b883a 	mov	r5,r22
    c3b8:	d8800215 	stw	r2,8(sp)
    c3bc:	000aa180 	call	aa18 <__mulsi3>
    c3c0:	b80b883a 	mov	r5,r23
    c3c4:	8009883a 	mov	r4,r16
    c3c8:	d8800415 	stw	r2,16(sp)
    c3cc:	000aa180 	call	aa18 <__mulsi3>
    c3d0:	da800317 	ldw	r10,12(sp)
    c3d4:	d9c00217 	ldw	r7,8(sp)
    c3d8:	d9000017 	ldw	r4,0(sp)
    c3dc:	502ed43a 	srli	r23,r10,16
    c3e0:	11c5883a 	add	r2,r2,r7
    c3e4:	24e5883a 	add	r18,r4,r19
    c3e8:	b885883a 	add	r2,r23,r2
    c3ec:	d8c00517 	ldw	r3,20(sp)
    c3f0:	d9800717 	ldw	r6,28(sp)
    c3f4:	da000617 	ldw	r8,24(sp)
    c3f8:	da400417 	ldw	r9,16(sp)
    c3fc:	11c0022e 	bgeu	r2,r7,c408 <__muldf3+0x4f4>
    c400:	01000074 	movhi	r4,1
    c404:	4913883a 	add	r9,r9,r4
    c408:	100ed43a 	srli	r7,r2,16
    c40c:	1004943a 	slli	r2,r2,16
    c410:	55ffffcc 	andi	r23,r10,65535
    c414:	3a53883a 	add	r9,r7,r9
    c418:	8809883a 	mov	r4,r17
    c41c:	800b883a 	mov	r5,r16
    c420:	d8c00515 	stw	r3,20(sp)
    c424:	d9800715 	stw	r6,28(sp)
    c428:	da000615 	stw	r8,24(sp)
    c42c:	da400415 	stw	r9,16(sp)
    c430:	15ef883a 	add	r23,r2,r23
    c434:	000aa180 	call	aa18 <__mulsi3>
    c438:	8809883a 	mov	r4,r17
    c43c:	b00b883a 	mov	r5,r22
    c440:	d8800215 	stw	r2,8(sp)
    c444:	000aa180 	call	aa18 <__mulsi3>
    c448:	b00b883a 	mov	r5,r22
    c44c:	a809883a 	mov	r4,r21
    c450:	d8800315 	stw	r2,12(sp)
    c454:	000aa180 	call	aa18 <__mulsi3>
    c458:	8009883a 	mov	r4,r16
    c45c:	a80b883a 	mov	r5,r21
    c460:	1023883a 	mov	r17,r2
    c464:	000aa180 	call	aa18 <__mulsi3>
    c468:	d9c00217 	ldw	r7,8(sp)
    c46c:	da800317 	ldw	r10,12(sp)
    c470:	d8c00517 	ldw	r3,20(sp)
    c474:	3808d43a 	srli	r4,r7,16
    c478:	1285883a 	add	r2,r2,r10
    c47c:	d9800717 	ldw	r6,28(sp)
    c480:	2085883a 	add	r2,r4,r2
    c484:	da000617 	ldw	r8,24(sp)
    c488:	da400417 	ldw	r9,16(sp)
    c48c:	1280022e 	bgeu	r2,r10,c498 <__muldf3+0x584>
    c490:	01000074 	movhi	r4,1
    c494:	8923883a 	add	r17,r17,r4
    c498:	1008943a 	slli	r4,r2,16
    c49c:	39ffffcc 	andi	r7,r7,65535
    c4a0:	e4b9883a 	add	fp,fp,r18
    c4a4:	21cf883a 	add	r7,r4,r7
    c4a8:	e4e7803a 	cmpltu	r19,fp,r19
    c4ac:	3d0f883a 	add	r7,r7,r20
    c4b0:	bf39883a 	add	fp,r23,fp
    c4b4:	99c9883a 	add	r4,r19,r7
    c4b8:	e5ef803a 	cmpltu	r23,fp,r23
    c4bc:	490b883a 	add	r5,r9,r4
    c4c0:	1004d43a 	srli	r2,r2,16
    c4c4:	b965883a 	add	r18,r23,r5
    c4c8:	24c9803a 	cmpltu	r4,r4,r19
    c4cc:	3d29803a 	cmpltu	r20,r7,r20
    c4d0:	a128b03a 	or	r20,r20,r4
    c4d4:	95ef803a 	cmpltu	r23,r18,r23
    c4d8:	2a53803a 	cmpltu	r9,r5,r9
    c4dc:	a0a9883a 	add	r20,r20,r2
    c4e0:	4deeb03a 	or	r23,r9,r23
    c4e4:	a5ef883a 	add	r23,r20,r23
    c4e8:	bc63883a 	add	r17,r23,r17
    c4ec:	e004927a 	slli	r2,fp,9
    c4f0:	d9000117 	ldw	r4,4(sp)
    c4f4:	882e927a 	slli	r23,r17,9
    c4f8:	9022d5fa 	srli	r17,r18,23
    c4fc:	e038d5fa 	srli	fp,fp,23
    c500:	1104b03a 	or	r2,r2,r4
    c504:	9024927a 	slli	r18,r18,9
    c508:	1004c03a 	cmpne	r2,r2,zero
    c50c:	bc62b03a 	or	r17,r23,r17
    c510:	1738b03a 	or	fp,r2,fp
    c514:	8880402c 	andhi	r2,r17,256
    c518:	e4a4b03a 	or	r18,fp,r18
    c51c:	10000726 	beq	r2,zero,c53c <__muldf3+0x628>
    c520:	9006d07a 	srli	r3,r18,1
    c524:	880497fa 	slli	r2,r17,31
    c528:	9480004c 	andi	r18,r18,1
    c52c:	8822d07a 	srli	r17,r17,1
    c530:	1ca4b03a 	or	r18,r3,r18
    c534:	14a4b03a 	or	r18,r2,r18
    c538:	4007883a 	mov	r3,r8
    c53c:	1880ffc4 	addi	r2,r3,1023
    c540:	0080460e 	bge	zero,r2,c65c <__muldf3+0x748>
    c544:	910001cc 	andi	r4,r18,7
    c548:	20000726 	beq	r4,zero,c568 <__muldf3+0x654>
    c54c:	910003cc 	andi	r4,r18,15
    c550:	01400104 	movi	r5,4
    c554:	21400426 	beq	r4,r5,c568 <__muldf3+0x654>
    c558:	9149883a 	add	r4,r18,r5
    c55c:	24a5803a 	cmpltu	r18,r4,r18
    c560:	8ca3883a 	add	r17,r17,r18
    c564:	2025883a 	mov	r18,r4
    c568:	8900402c 	andhi	r4,r17,256
    c56c:	20000426 	beq	r4,zero,c580 <__muldf3+0x66c>
    c570:	18810004 	addi	r2,r3,1024
    c574:	00ffc034 	movhi	r3,65280
    c578:	18ffffc4 	addi	r3,r3,-1
    c57c:	88e2703a 	and	r17,r17,r3
    c580:	00c1ff84 	movi	r3,2046
    c584:	18bf1316 	blt	r3,r2,c1d4 <__alt_data_end+0xfffec1d4>
    c588:	882c977a 	slli	r22,r17,29
    c58c:	9024d0fa 	srli	r18,r18,3
    c590:	8822927a 	slli	r17,r17,9
    c594:	1081ffcc 	andi	r2,r2,2047
    c598:	b4acb03a 	or	r22,r22,r18
    c59c:	8820d33a 	srli	r16,r17,12
    c5a0:	3027883a 	mov	r19,r6
    c5a4:	003eba06 	br	c090 <__alt_data_end+0xfffec090>
    c5a8:	8080022c 	andhi	r2,r16,8
    c5ac:	10000926 	beq	r2,zero,c5d4 <__muldf3+0x6c0>
    c5b0:	8880022c 	andhi	r2,r17,8
    c5b4:	1000071e 	bne	r2,zero,c5d4 <__muldf3+0x6c0>
    c5b8:	00800434 	movhi	r2,16
    c5bc:	8c000234 	orhi	r16,r17,8
    c5c0:	10bfffc4 	addi	r2,r2,-1
    c5c4:	e027883a 	mov	r19,fp
    c5c8:	80a0703a 	and	r16,r16,r2
    c5cc:	902d883a 	mov	r22,r18
    c5d0:	003f1706 	br	c230 <__alt_data_end+0xfffec230>
    c5d4:	00800434 	movhi	r2,16
    c5d8:	84000234 	orhi	r16,r16,8
    c5dc:	10bfffc4 	addi	r2,r2,-1
    c5e0:	80a0703a 	and	r16,r16,r2
    c5e4:	003f1206 	br	c230 <__alt_data_end+0xfffec230>
    c5e8:	147ff604 	addi	r17,r2,-40
    c5ec:	3462983a 	sll	r17,r6,r17
    c5f0:	0025883a 	mov	r18,zero
    c5f4:	003ef306 	br	c1c4 <__alt_data_end+0xfffec1c4>
    c5f8:	3009883a 	mov	r4,r6
    c5fc:	d9400215 	stw	r5,8(sp)
    c600:	d9800715 	stw	r6,28(sp)
    c604:	da400415 	stw	r9,16(sp)
    c608:	da800315 	stw	r10,12(sp)
    c60c:	000d2800 	call	d280 <__clzsi2>
    c610:	10800804 	addi	r2,r2,32
    c614:	da800317 	ldw	r10,12(sp)
    c618:	da400417 	ldw	r9,16(sp)
    c61c:	d9800717 	ldw	r6,28(sp)
    c620:	d9400217 	ldw	r5,8(sp)
    c624:	003edd06 	br	c19c <__alt_data_end+0xfffec19c>
    c628:	143ff604 	addi	r16,r2,-40
    c62c:	ac20983a 	sll	r16,r21,r16
    c630:	002d883a 	mov	r22,zero
    c634:	003ec106 	br	c13c <__alt_data_end+0xfffec13c>
    c638:	d9800715 	stw	r6,28(sp)
    c63c:	d9c00215 	stw	r7,8(sp)
    c640:	da400415 	stw	r9,16(sp)
    c644:	000d2800 	call	d280 <__clzsi2>
    c648:	10800804 	addi	r2,r2,32
    c64c:	da400417 	ldw	r9,16(sp)
    c650:	d9c00217 	ldw	r7,8(sp)
    c654:	d9800717 	ldw	r6,28(sp)
    c658:	003eae06 	br	c114 <__alt_data_end+0xfffec114>
    c65c:	00c00044 	movi	r3,1
    c660:	1887c83a 	sub	r3,r3,r2
    c664:	01000e04 	movi	r4,56
    c668:	20fe8516 	blt	r4,r3,c080 <__alt_data_end+0xfffec080>
    c66c:	010007c4 	movi	r4,31
    c670:	20c01b16 	blt	r4,r3,c6e0 <__muldf3+0x7cc>
    c674:	00800804 	movi	r2,32
    c678:	10c5c83a 	sub	r2,r2,r3
    c67c:	888a983a 	sll	r5,r17,r2
    c680:	90c8d83a 	srl	r4,r18,r3
    c684:	9084983a 	sll	r2,r18,r2
    c688:	88e2d83a 	srl	r17,r17,r3
    c68c:	2906b03a 	or	r3,r5,r4
    c690:	1004c03a 	cmpne	r2,r2,zero
    c694:	1886b03a 	or	r3,r3,r2
    c698:	188001cc 	andi	r2,r3,7
    c69c:	10000726 	beq	r2,zero,c6bc <__muldf3+0x7a8>
    c6a0:	188003cc 	andi	r2,r3,15
    c6a4:	01000104 	movi	r4,4
    c6a8:	11000426 	beq	r2,r4,c6bc <__muldf3+0x7a8>
    c6ac:	1805883a 	mov	r2,r3
    c6b0:	10c00104 	addi	r3,r2,4
    c6b4:	1885803a 	cmpltu	r2,r3,r2
    c6b8:	88a3883a 	add	r17,r17,r2
    c6bc:	8880202c 	andhi	r2,r17,128
    c6c0:	10001c26 	beq	r2,zero,c734 <__muldf3+0x820>
    c6c4:	3027883a 	mov	r19,r6
    c6c8:	00800044 	movi	r2,1
    c6cc:	0021883a 	mov	r16,zero
    c6d0:	002d883a 	mov	r22,zero
    c6d4:	003e6e06 	br	c090 <__alt_data_end+0xfffec090>
    c6d8:	4007883a 	mov	r3,r8
    c6dc:	003f9706 	br	c53c <__alt_data_end+0xfffec53c>
    c6e0:	017ff844 	movi	r5,-31
    c6e4:	2885c83a 	sub	r2,r5,r2
    c6e8:	888ad83a 	srl	r5,r17,r2
    c6ec:	00800804 	movi	r2,32
    c6f0:	18801a26 	beq	r3,r2,c75c <__muldf3+0x848>
    c6f4:	01001004 	movi	r4,64
    c6f8:	20c7c83a 	sub	r3,r4,r3
    c6fc:	88e2983a 	sll	r17,r17,r3
    c700:	8ca4b03a 	or	r18,r17,r18
    c704:	9004c03a 	cmpne	r2,r18,zero
    c708:	2884b03a 	or	r2,r5,r2
    c70c:	144001cc 	andi	r17,r2,7
    c710:	88000d1e 	bne	r17,zero,c748 <__muldf3+0x834>
    c714:	0021883a 	mov	r16,zero
    c718:	102cd0fa 	srli	r22,r2,3
    c71c:	3027883a 	mov	r19,r6
    c720:	0005883a 	mov	r2,zero
    c724:	b46cb03a 	or	r22,r22,r17
    c728:	003e5906 	br	c090 <__alt_data_end+0xfffec090>
    c72c:	1007883a 	mov	r3,r2
    c730:	0023883a 	mov	r17,zero
    c734:	8820927a 	slli	r16,r17,9
    c738:	1805883a 	mov	r2,r3
    c73c:	8822977a 	slli	r17,r17,29
    c740:	8020d33a 	srli	r16,r16,12
    c744:	003ff406 	br	c718 <__alt_data_end+0xfffec718>
    c748:	10c003cc 	andi	r3,r2,15
    c74c:	01000104 	movi	r4,4
    c750:	193ff626 	beq	r3,r4,c72c <__alt_data_end+0xfffec72c>
    c754:	0023883a 	mov	r17,zero
    c758:	003fd506 	br	c6b0 <__alt_data_end+0xfffec6b0>
    c75c:	0023883a 	mov	r17,zero
    c760:	003fe706 	br	c700 <__alt_data_end+0xfffec700>
    c764:	00800434 	movhi	r2,16
    c768:	8c000234 	orhi	r16,r17,8
    c76c:	10bfffc4 	addi	r2,r2,-1
    c770:	3027883a 	mov	r19,r6
    c774:	80a0703a 	and	r16,r16,r2
    c778:	902d883a 	mov	r22,r18
    c77c:	003eac06 	br	c230 <__alt_data_end+0xfffec230>

0000c780 <__subdf3>:
    c780:	02000434 	movhi	r8,16
    c784:	423fffc4 	addi	r8,r8,-1
    c788:	defffb04 	addi	sp,sp,-20
    c78c:	2a14703a 	and	r10,r5,r8
    c790:	3812d53a 	srli	r9,r7,20
    c794:	3a10703a 	and	r8,r7,r8
    c798:	2006d77a 	srli	r3,r4,29
    c79c:	3004d77a 	srli	r2,r6,29
    c7a0:	dc000015 	stw	r16,0(sp)
    c7a4:	501490fa 	slli	r10,r10,3
    c7a8:	2820d53a 	srli	r16,r5,20
    c7ac:	401090fa 	slli	r8,r8,3
    c7b0:	dc800215 	stw	r18,8(sp)
    c7b4:	dc400115 	stw	r17,4(sp)
    c7b8:	dfc00415 	stw	ra,16(sp)
    c7bc:	202290fa 	slli	r17,r4,3
    c7c0:	dcc00315 	stw	r19,12(sp)
    c7c4:	4a41ffcc 	andi	r9,r9,2047
    c7c8:	0101ffc4 	movi	r4,2047
    c7cc:	2824d7fa 	srli	r18,r5,31
    c7d0:	8401ffcc 	andi	r16,r16,2047
    c7d4:	50c6b03a 	or	r3,r10,r3
    c7d8:	380ed7fa 	srli	r7,r7,31
    c7dc:	408ab03a 	or	r5,r8,r2
    c7e0:	300c90fa 	slli	r6,r6,3
    c7e4:	49009626 	beq	r9,r4,ca40 <__subdf3+0x2c0>
    c7e8:	39c0005c 	xori	r7,r7,1
    c7ec:	8245c83a 	sub	r2,r16,r9
    c7f0:	3c807426 	beq	r7,r18,c9c4 <__subdf3+0x244>
    c7f4:	0080af0e 	bge	zero,r2,cab4 <__subdf3+0x334>
    c7f8:	48002a1e 	bne	r9,zero,c8a4 <__subdf3+0x124>
    c7fc:	2988b03a 	or	r4,r5,r6
    c800:	20009a1e 	bne	r4,zero,ca6c <__subdf3+0x2ec>
    c804:	888001cc 	andi	r2,r17,7
    c808:	10000726 	beq	r2,zero,c828 <__subdf3+0xa8>
    c80c:	888003cc 	andi	r2,r17,15
    c810:	01000104 	movi	r4,4
    c814:	11000426 	beq	r2,r4,c828 <__subdf3+0xa8>
    c818:	890b883a 	add	r5,r17,r4
    c81c:	2c63803a 	cmpltu	r17,r5,r17
    c820:	1c47883a 	add	r3,r3,r17
    c824:	2823883a 	mov	r17,r5
    c828:	1880202c 	andhi	r2,r3,128
    c82c:	10005926 	beq	r2,zero,c994 <__subdf3+0x214>
    c830:	84000044 	addi	r16,r16,1
    c834:	0081ffc4 	movi	r2,2047
    c838:	8080be26 	beq	r16,r2,cb34 <__subdf3+0x3b4>
    c83c:	017fe034 	movhi	r5,65408
    c840:	297fffc4 	addi	r5,r5,-1
    c844:	1946703a 	and	r3,r3,r5
    c848:	1804977a 	slli	r2,r3,29
    c84c:	1806927a 	slli	r3,r3,9
    c850:	8822d0fa 	srli	r17,r17,3
    c854:	8401ffcc 	andi	r16,r16,2047
    c858:	180ad33a 	srli	r5,r3,12
    c85c:	9100004c 	andi	r4,r18,1
    c860:	1444b03a 	or	r2,r2,r17
    c864:	80c1ffcc 	andi	r3,r16,2047
    c868:	1820953a 	slli	r16,r3,20
    c86c:	20c03fcc 	andi	r3,r4,255
    c870:	180897fa 	slli	r4,r3,31
    c874:	00c00434 	movhi	r3,16
    c878:	18ffffc4 	addi	r3,r3,-1
    c87c:	28c6703a 	and	r3,r5,r3
    c880:	1c06b03a 	or	r3,r3,r16
    c884:	1906b03a 	or	r3,r3,r4
    c888:	dfc00417 	ldw	ra,16(sp)
    c88c:	dcc00317 	ldw	r19,12(sp)
    c890:	dc800217 	ldw	r18,8(sp)
    c894:	dc400117 	ldw	r17,4(sp)
    c898:	dc000017 	ldw	r16,0(sp)
    c89c:	dec00504 	addi	sp,sp,20
    c8a0:	f800283a 	ret
    c8a4:	0101ffc4 	movi	r4,2047
    c8a8:	813fd626 	beq	r16,r4,c804 <__alt_data_end+0xfffec804>
    c8ac:	29402034 	orhi	r5,r5,128
    c8b0:	01000e04 	movi	r4,56
    c8b4:	2080a316 	blt	r4,r2,cb44 <__subdf3+0x3c4>
    c8b8:	010007c4 	movi	r4,31
    c8bc:	2080c616 	blt	r4,r2,cbd8 <__subdf3+0x458>
    c8c0:	01000804 	movi	r4,32
    c8c4:	2089c83a 	sub	r4,r4,r2
    c8c8:	2910983a 	sll	r8,r5,r4
    c8cc:	308ed83a 	srl	r7,r6,r2
    c8d0:	3108983a 	sll	r4,r6,r4
    c8d4:	2884d83a 	srl	r2,r5,r2
    c8d8:	41ccb03a 	or	r6,r8,r7
    c8dc:	2008c03a 	cmpne	r4,r4,zero
    c8e0:	310cb03a 	or	r6,r6,r4
    c8e4:	898dc83a 	sub	r6,r17,r6
    c8e8:	89a3803a 	cmpltu	r17,r17,r6
    c8ec:	1887c83a 	sub	r3,r3,r2
    c8f0:	1c47c83a 	sub	r3,r3,r17
    c8f4:	3023883a 	mov	r17,r6
    c8f8:	1880202c 	andhi	r2,r3,128
    c8fc:	10002326 	beq	r2,zero,c98c <__subdf3+0x20c>
    c900:	04c02034 	movhi	r19,128
    c904:	9cffffc4 	addi	r19,r19,-1
    c908:	1ce6703a 	and	r19,r3,r19
    c90c:	98007a26 	beq	r19,zero,caf8 <__subdf3+0x378>
    c910:	9809883a 	mov	r4,r19
    c914:	000d2800 	call	d280 <__clzsi2>
    c918:	113ffe04 	addi	r4,r2,-8
    c91c:	00c007c4 	movi	r3,31
    c920:	19007b16 	blt	r3,r4,cb10 <__subdf3+0x390>
    c924:	00800804 	movi	r2,32
    c928:	1105c83a 	sub	r2,r2,r4
    c92c:	8884d83a 	srl	r2,r17,r2
    c930:	9906983a 	sll	r3,r19,r4
    c934:	8922983a 	sll	r17,r17,r4
    c938:	10c4b03a 	or	r2,r2,r3
    c93c:	24007816 	blt	r4,r16,cb20 <__subdf3+0x3a0>
    c940:	2421c83a 	sub	r16,r4,r16
    c944:	80c00044 	addi	r3,r16,1
    c948:	010007c4 	movi	r4,31
    c94c:	20c09516 	blt	r4,r3,cba4 <__subdf3+0x424>
    c950:	01400804 	movi	r5,32
    c954:	28cbc83a 	sub	r5,r5,r3
    c958:	88c8d83a 	srl	r4,r17,r3
    c95c:	8962983a 	sll	r17,r17,r5
    c960:	114a983a 	sll	r5,r2,r5
    c964:	10c6d83a 	srl	r3,r2,r3
    c968:	8804c03a 	cmpne	r2,r17,zero
    c96c:	290ab03a 	or	r5,r5,r4
    c970:	28a2b03a 	or	r17,r5,r2
    c974:	0021883a 	mov	r16,zero
    c978:	003fa206 	br	c804 <__alt_data_end+0xfffec804>
    c97c:	2090b03a 	or	r8,r4,r2
    c980:	40018e26 	beq	r8,zero,cfbc <__subdf3+0x83c>
    c984:	1007883a 	mov	r3,r2
    c988:	2023883a 	mov	r17,r4
    c98c:	888001cc 	andi	r2,r17,7
    c990:	103f9e1e 	bne	r2,zero,c80c <__alt_data_end+0xfffec80c>
    c994:	1804977a 	slli	r2,r3,29
    c998:	8822d0fa 	srli	r17,r17,3
    c99c:	1810d0fa 	srli	r8,r3,3
    c9a0:	9100004c 	andi	r4,r18,1
    c9a4:	1444b03a 	or	r2,r2,r17
    c9a8:	00c1ffc4 	movi	r3,2047
    c9ac:	80c02826 	beq	r16,r3,ca50 <__subdf3+0x2d0>
    c9b0:	01400434 	movhi	r5,16
    c9b4:	297fffc4 	addi	r5,r5,-1
    c9b8:	80e0703a 	and	r16,r16,r3
    c9bc:	414a703a 	and	r5,r8,r5
    c9c0:	003fa806 	br	c864 <__alt_data_end+0xfffec864>
    c9c4:	0080630e 	bge	zero,r2,cb54 <__subdf3+0x3d4>
    c9c8:	48003026 	beq	r9,zero,ca8c <__subdf3+0x30c>
    c9cc:	0101ffc4 	movi	r4,2047
    c9d0:	813f8c26 	beq	r16,r4,c804 <__alt_data_end+0xfffec804>
    c9d4:	29402034 	orhi	r5,r5,128
    c9d8:	01000e04 	movi	r4,56
    c9dc:	2080a90e 	bge	r4,r2,cc84 <__subdf3+0x504>
    c9e0:	298cb03a 	or	r6,r5,r6
    c9e4:	3012c03a 	cmpne	r9,r6,zero
    c9e8:	0005883a 	mov	r2,zero
    c9ec:	4c53883a 	add	r9,r9,r17
    c9f0:	4c63803a 	cmpltu	r17,r9,r17
    c9f4:	10c7883a 	add	r3,r2,r3
    c9f8:	88c7883a 	add	r3,r17,r3
    c9fc:	4823883a 	mov	r17,r9
    ca00:	1880202c 	andhi	r2,r3,128
    ca04:	1000d026 	beq	r2,zero,cd48 <__subdf3+0x5c8>
    ca08:	84000044 	addi	r16,r16,1
    ca0c:	0081ffc4 	movi	r2,2047
    ca10:	8080fe26 	beq	r16,r2,ce0c <__subdf3+0x68c>
    ca14:	00bfe034 	movhi	r2,65408
    ca18:	10bfffc4 	addi	r2,r2,-1
    ca1c:	1886703a 	and	r3,r3,r2
    ca20:	880ad07a 	srli	r5,r17,1
    ca24:	180497fa 	slli	r2,r3,31
    ca28:	8900004c 	andi	r4,r17,1
    ca2c:	2922b03a 	or	r17,r5,r4
    ca30:	1806d07a 	srli	r3,r3,1
    ca34:	1462b03a 	or	r17,r2,r17
    ca38:	3825883a 	mov	r18,r7
    ca3c:	003f7106 	br	c804 <__alt_data_end+0xfffec804>
    ca40:	2984b03a 	or	r2,r5,r6
    ca44:	103f6826 	beq	r2,zero,c7e8 <__alt_data_end+0xfffec7e8>
    ca48:	39c03fcc 	andi	r7,r7,255
    ca4c:	003f6706 	br	c7ec <__alt_data_end+0xfffec7ec>
    ca50:	4086b03a 	or	r3,r8,r2
    ca54:	18015226 	beq	r3,zero,cfa0 <__subdf3+0x820>
    ca58:	00c00434 	movhi	r3,16
    ca5c:	41400234 	orhi	r5,r8,8
    ca60:	18ffffc4 	addi	r3,r3,-1
    ca64:	28ca703a 	and	r5,r5,r3
    ca68:	003f7e06 	br	c864 <__alt_data_end+0xfffec864>
    ca6c:	10bfffc4 	addi	r2,r2,-1
    ca70:	1000491e 	bne	r2,zero,cb98 <__subdf3+0x418>
    ca74:	898fc83a 	sub	r7,r17,r6
    ca78:	89e3803a 	cmpltu	r17,r17,r7
    ca7c:	1947c83a 	sub	r3,r3,r5
    ca80:	1c47c83a 	sub	r3,r3,r17
    ca84:	3823883a 	mov	r17,r7
    ca88:	003f9b06 	br	c8f8 <__alt_data_end+0xfffec8f8>
    ca8c:	2988b03a 	or	r4,r5,r6
    ca90:	203f5c26 	beq	r4,zero,c804 <__alt_data_end+0xfffec804>
    ca94:	10bfffc4 	addi	r2,r2,-1
    ca98:	1000931e 	bne	r2,zero,cce8 <__subdf3+0x568>
    ca9c:	898d883a 	add	r6,r17,r6
    caa0:	3463803a 	cmpltu	r17,r6,r17
    caa4:	1947883a 	add	r3,r3,r5
    caa8:	88c7883a 	add	r3,r17,r3
    caac:	3023883a 	mov	r17,r6
    cab0:	003fd306 	br	ca00 <__alt_data_end+0xfffeca00>
    cab4:	1000541e 	bne	r2,zero,cc08 <__subdf3+0x488>
    cab8:	80800044 	addi	r2,r16,1
    cabc:	1081ffcc 	andi	r2,r2,2047
    cac0:	01000044 	movi	r4,1
    cac4:	2080a20e 	bge	r4,r2,cd50 <__subdf3+0x5d0>
    cac8:	8989c83a 	sub	r4,r17,r6
    cacc:	8905803a 	cmpltu	r2,r17,r4
    cad0:	1967c83a 	sub	r19,r3,r5
    cad4:	98a7c83a 	sub	r19,r19,r2
    cad8:	9880202c 	andhi	r2,r19,128
    cadc:	10006326 	beq	r2,zero,cc6c <__subdf3+0x4ec>
    cae0:	3463c83a 	sub	r17,r6,r17
    cae4:	28c7c83a 	sub	r3,r5,r3
    cae8:	344d803a 	cmpltu	r6,r6,r17
    caec:	19a7c83a 	sub	r19,r3,r6
    caf0:	3825883a 	mov	r18,r7
    caf4:	983f861e 	bne	r19,zero,c910 <__alt_data_end+0xfffec910>
    caf8:	8809883a 	mov	r4,r17
    cafc:	000d2800 	call	d280 <__clzsi2>
    cb00:	10800804 	addi	r2,r2,32
    cb04:	113ffe04 	addi	r4,r2,-8
    cb08:	00c007c4 	movi	r3,31
    cb0c:	193f850e 	bge	r3,r4,c924 <__alt_data_end+0xfffec924>
    cb10:	10bff604 	addi	r2,r2,-40
    cb14:	8884983a 	sll	r2,r17,r2
    cb18:	0023883a 	mov	r17,zero
    cb1c:	243f880e 	bge	r4,r16,c940 <__alt_data_end+0xfffec940>
    cb20:	00ffe034 	movhi	r3,65408
    cb24:	18ffffc4 	addi	r3,r3,-1
    cb28:	8121c83a 	sub	r16,r16,r4
    cb2c:	10c6703a 	and	r3,r2,r3
    cb30:	003f3406 	br	c804 <__alt_data_end+0xfffec804>
    cb34:	9100004c 	andi	r4,r18,1
    cb38:	000b883a 	mov	r5,zero
    cb3c:	0005883a 	mov	r2,zero
    cb40:	003f4806 	br	c864 <__alt_data_end+0xfffec864>
    cb44:	298cb03a 	or	r6,r5,r6
    cb48:	300cc03a 	cmpne	r6,r6,zero
    cb4c:	0005883a 	mov	r2,zero
    cb50:	003f6406 	br	c8e4 <__alt_data_end+0xfffec8e4>
    cb54:	10009a1e 	bne	r2,zero,cdc0 <__subdf3+0x640>
    cb58:	82400044 	addi	r9,r16,1
    cb5c:	4881ffcc 	andi	r2,r9,2047
    cb60:	02800044 	movi	r10,1
    cb64:	5080670e 	bge	r10,r2,cd04 <__subdf3+0x584>
    cb68:	0081ffc4 	movi	r2,2047
    cb6c:	4880af26 	beq	r9,r2,ce2c <__subdf3+0x6ac>
    cb70:	898d883a 	add	r6,r17,r6
    cb74:	1945883a 	add	r2,r3,r5
    cb78:	3447803a 	cmpltu	r3,r6,r17
    cb7c:	1887883a 	add	r3,r3,r2
    cb80:	182297fa 	slli	r17,r3,31
    cb84:	300cd07a 	srli	r6,r6,1
    cb88:	1806d07a 	srli	r3,r3,1
    cb8c:	4821883a 	mov	r16,r9
    cb90:	89a2b03a 	or	r17,r17,r6
    cb94:	003f1b06 	br	c804 <__alt_data_end+0xfffec804>
    cb98:	0101ffc4 	movi	r4,2047
    cb9c:	813f441e 	bne	r16,r4,c8b0 <__alt_data_end+0xfffec8b0>
    cba0:	003f1806 	br	c804 <__alt_data_end+0xfffec804>
    cba4:	843ff844 	addi	r16,r16,-31
    cba8:	01400804 	movi	r5,32
    cbac:	1408d83a 	srl	r4,r2,r16
    cbb0:	19405026 	beq	r3,r5,ccf4 <__subdf3+0x574>
    cbb4:	01401004 	movi	r5,64
    cbb8:	28c7c83a 	sub	r3,r5,r3
    cbbc:	10c4983a 	sll	r2,r2,r3
    cbc0:	88a2b03a 	or	r17,r17,r2
    cbc4:	8822c03a 	cmpne	r17,r17,zero
    cbc8:	2462b03a 	or	r17,r4,r17
    cbcc:	0007883a 	mov	r3,zero
    cbd0:	0021883a 	mov	r16,zero
    cbd4:	003f6d06 	br	c98c <__alt_data_end+0xfffec98c>
    cbd8:	11fff804 	addi	r7,r2,-32
    cbdc:	01000804 	movi	r4,32
    cbe0:	29ced83a 	srl	r7,r5,r7
    cbe4:	11004526 	beq	r2,r4,ccfc <__subdf3+0x57c>
    cbe8:	01001004 	movi	r4,64
    cbec:	2089c83a 	sub	r4,r4,r2
    cbf0:	2904983a 	sll	r2,r5,r4
    cbf4:	118cb03a 	or	r6,r2,r6
    cbf8:	300cc03a 	cmpne	r6,r6,zero
    cbfc:	398cb03a 	or	r6,r7,r6
    cc00:	0005883a 	mov	r2,zero
    cc04:	003f3706 	br	c8e4 <__alt_data_end+0xfffec8e4>
    cc08:	80002a26 	beq	r16,zero,ccb4 <__subdf3+0x534>
    cc0c:	0101ffc4 	movi	r4,2047
    cc10:	49006626 	beq	r9,r4,cdac <__subdf3+0x62c>
    cc14:	0085c83a 	sub	r2,zero,r2
    cc18:	18c02034 	orhi	r3,r3,128
    cc1c:	01000e04 	movi	r4,56
    cc20:	20807e16 	blt	r4,r2,ce1c <__subdf3+0x69c>
    cc24:	010007c4 	movi	r4,31
    cc28:	2080e716 	blt	r4,r2,cfc8 <__subdf3+0x848>
    cc2c:	01000804 	movi	r4,32
    cc30:	2089c83a 	sub	r4,r4,r2
    cc34:	1914983a 	sll	r10,r3,r4
    cc38:	8890d83a 	srl	r8,r17,r2
    cc3c:	8908983a 	sll	r4,r17,r4
    cc40:	1884d83a 	srl	r2,r3,r2
    cc44:	5222b03a 	or	r17,r10,r8
    cc48:	2006c03a 	cmpne	r3,r4,zero
    cc4c:	88e2b03a 	or	r17,r17,r3
    cc50:	3463c83a 	sub	r17,r6,r17
    cc54:	2885c83a 	sub	r2,r5,r2
    cc58:	344d803a 	cmpltu	r6,r6,r17
    cc5c:	1187c83a 	sub	r3,r2,r6
    cc60:	4821883a 	mov	r16,r9
    cc64:	3825883a 	mov	r18,r7
    cc68:	003f2306 	br	c8f8 <__alt_data_end+0xfffec8f8>
    cc6c:	24d0b03a 	or	r8,r4,r19
    cc70:	40001b1e 	bne	r8,zero,cce0 <__subdf3+0x560>
    cc74:	0005883a 	mov	r2,zero
    cc78:	0009883a 	mov	r4,zero
    cc7c:	0021883a 	mov	r16,zero
    cc80:	003f4906 	br	c9a8 <__alt_data_end+0xfffec9a8>
    cc84:	010007c4 	movi	r4,31
    cc88:	20803a16 	blt	r4,r2,cd74 <__subdf3+0x5f4>
    cc8c:	01000804 	movi	r4,32
    cc90:	2089c83a 	sub	r4,r4,r2
    cc94:	2912983a 	sll	r9,r5,r4
    cc98:	3090d83a 	srl	r8,r6,r2
    cc9c:	3108983a 	sll	r4,r6,r4
    cca0:	2884d83a 	srl	r2,r5,r2
    cca4:	4a12b03a 	or	r9,r9,r8
    cca8:	2008c03a 	cmpne	r4,r4,zero
    ccac:	4912b03a 	or	r9,r9,r4
    ccb0:	003f4e06 	br	c9ec <__alt_data_end+0xfffec9ec>
    ccb4:	1c48b03a 	or	r4,r3,r17
    ccb8:	20003c26 	beq	r4,zero,cdac <__subdf3+0x62c>
    ccbc:	0084303a 	nor	r2,zero,r2
    ccc0:	1000381e 	bne	r2,zero,cda4 <__subdf3+0x624>
    ccc4:	3463c83a 	sub	r17,r6,r17
    ccc8:	28c5c83a 	sub	r2,r5,r3
    cccc:	344d803a 	cmpltu	r6,r6,r17
    ccd0:	1187c83a 	sub	r3,r2,r6
    ccd4:	4821883a 	mov	r16,r9
    ccd8:	3825883a 	mov	r18,r7
    ccdc:	003f0606 	br	c8f8 <__alt_data_end+0xfffec8f8>
    cce0:	2023883a 	mov	r17,r4
    cce4:	003f0906 	br	c90c <__alt_data_end+0xfffec90c>
    cce8:	0101ffc4 	movi	r4,2047
    ccec:	813f3a1e 	bne	r16,r4,c9d8 <__alt_data_end+0xfffec9d8>
    ccf0:	003ec406 	br	c804 <__alt_data_end+0xfffec804>
    ccf4:	0005883a 	mov	r2,zero
    ccf8:	003fb106 	br	cbc0 <__alt_data_end+0xfffecbc0>
    ccfc:	0005883a 	mov	r2,zero
    cd00:	003fbc06 	br	cbf4 <__alt_data_end+0xfffecbf4>
    cd04:	1c44b03a 	or	r2,r3,r17
    cd08:	80008e1e 	bne	r16,zero,cf44 <__subdf3+0x7c4>
    cd0c:	1000c826 	beq	r2,zero,d030 <__subdf3+0x8b0>
    cd10:	2984b03a 	or	r2,r5,r6
    cd14:	103ebb26 	beq	r2,zero,c804 <__alt_data_end+0xfffec804>
    cd18:	8989883a 	add	r4,r17,r6
    cd1c:	1945883a 	add	r2,r3,r5
    cd20:	2447803a 	cmpltu	r3,r4,r17
    cd24:	1887883a 	add	r3,r3,r2
    cd28:	1880202c 	andhi	r2,r3,128
    cd2c:	2023883a 	mov	r17,r4
    cd30:	103f1626 	beq	r2,zero,c98c <__alt_data_end+0xfffec98c>
    cd34:	00bfe034 	movhi	r2,65408
    cd38:	10bfffc4 	addi	r2,r2,-1
    cd3c:	5021883a 	mov	r16,r10
    cd40:	1886703a 	and	r3,r3,r2
    cd44:	003eaf06 	br	c804 <__alt_data_end+0xfffec804>
    cd48:	3825883a 	mov	r18,r7
    cd4c:	003f0f06 	br	c98c <__alt_data_end+0xfffec98c>
    cd50:	1c44b03a 	or	r2,r3,r17
    cd54:	8000251e 	bne	r16,zero,cdec <__subdf3+0x66c>
    cd58:	1000661e 	bne	r2,zero,cef4 <__subdf3+0x774>
    cd5c:	2990b03a 	or	r8,r5,r6
    cd60:	40009626 	beq	r8,zero,cfbc <__subdf3+0x83c>
    cd64:	2807883a 	mov	r3,r5
    cd68:	3023883a 	mov	r17,r6
    cd6c:	3825883a 	mov	r18,r7
    cd70:	003ea406 	br	c804 <__alt_data_end+0xfffec804>
    cd74:	127ff804 	addi	r9,r2,-32
    cd78:	01000804 	movi	r4,32
    cd7c:	2a52d83a 	srl	r9,r5,r9
    cd80:	11008c26 	beq	r2,r4,cfb4 <__subdf3+0x834>
    cd84:	01001004 	movi	r4,64
    cd88:	2085c83a 	sub	r2,r4,r2
    cd8c:	2884983a 	sll	r2,r5,r2
    cd90:	118cb03a 	or	r6,r2,r6
    cd94:	300cc03a 	cmpne	r6,r6,zero
    cd98:	4992b03a 	or	r9,r9,r6
    cd9c:	0005883a 	mov	r2,zero
    cda0:	003f1206 	br	c9ec <__alt_data_end+0xfffec9ec>
    cda4:	0101ffc4 	movi	r4,2047
    cda8:	493f9c1e 	bne	r9,r4,cc1c <__alt_data_end+0xfffecc1c>
    cdac:	2807883a 	mov	r3,r5
    cdb0:	3023883a 	mov	r17,r6
    cdb4:	4821883a 	mov	r16,r9
    cdb8:	3825883a 	mov	r18,r7
    cdbc:	003e9106 	br	c804 <__alt_data_end+0xfffec804>
    cdc0:	80001f1e 	bne	r16,zero,ce40 <__subdf3+0x6c0>
    cdc4:	1c48b03a 	or	r4,r3,r17
    cdc8:	20005a26 	beq	r4,zero,cf34 <__subdf3+0x7b4>
    cdcc:	0084303a 	nor	r2,zero,r2
    cdd0:	1000561e 	bne	r2,zero,cf2c <__subdf3+0x7ac>
    cdd4:	89a3883a 	add	r17,r17,r6
    cdd8:	1945883a 	add	r2,r3,r5
    cddc:	898d803a 	cmpltu	r6,r17,r6
    cde0:	3087883a 	add	r3,r6,r2
    cde4:	4821883a 	mov	r16,r9
    cde8:	003f0506 	br	ca00 <__alt_data_end+0xfffeca00>
    cdec:	10002b1e 	bne	r2,zero,ce9c <__subdf3+0x71c>
    cdf0:	2984b03a 	or	r2,r5,r6
    cdf4:	10008026 	beq	r2,zero,cff8 <__subdf3+0x878>
    cdf8:	2807883a 	mov	r3,r5
    cdfc:	3023883a 	mov	r17,r6
    ce00:	3825883a 	mov	r18,r7
    ce04:	0401ffc4 	movi	r16,2047
    ce08:	003e7e06 	br	c804 <__alt_data_end+0xfffec804>
    ce0c:	3809883a 	mov	r4,r7
    ce10:	0011883a 	mov	r8,zero
    ce14:	0005883a 	mov	r2,zero
    ce18:	003ee306 	br	c9a8 <__alt_data_end+0xfffec9a8>
    ce1c:	1c62b03a 	or	r17,r3,r17
    ce20:	8822c03a 	cmpne	r17,r17,zero
    ce24:	0005883a 	mov	r2,zero
    ce28:	003f8906 	br	cc50 <__alt_data_end+0xfffecc50>
    ce2c:	3809883a 	mov	r4,r7
    ce30:	4821883a 	mov	r16,r9
    ce34:	0011883a 	mov	r8,zero
    ce38:	0005883a 	mov	r2,zero
    ce3c:	003eda06 	br	c9a8 <__alt_data_end+0xfffec9a8>
    ce40:	0101ffc4 	movi	r4,2047
    ce44:	49003b26 	beq	r9,r4,cf34 <__subdf3+0x7b4>
    ce48:	0085c83a 	sub	r2,zero,r2
    ce4c:	18c02034 	orhi	r3,r3,128
    ce50:	01000e04 	movi	r4,56
    ce54:	20806e16 	blt	r4,r2,d010 <__subdf3+0x890>
    ce58:	010007c4 	movi	r4,31
    ce5c:	20807716 	blt	r4,r2,d03c <__subdf3+0x8bc>
    ce60:	01000804 	movi	r4,32
    ce64:	2089c83a 	sub	r4,r4,r2
    ce68:	1914983a 	sll	r10,r3,r4
    ce6c:	8890d83a 	srl	r8,r17,r2
    ce70:	8908983a 	sll	r4,r17,r4
    ce74:	1884d83a 	srl	r2,r3,r2
    ce78:	5222b03a 	or	r17,r10,r8
    ce7c:	2006c03a 	cmpne	r3,r4,zero
    ce80:	88e2b03a 	or	r17,r17,r3
    ce84:	89a3883a 	add	r17,r17,r6
    ce88:	1145883a 	add	r2,r2,r5
    ce8c:	898d803a 	cmpltu	r6,r17,r6
    ce90:	3087883a 	add	r3,r6,r2
    ce94:	4821883a 	mov	r16,r9
    ce98:	003ed906 	br	ca00 <__alt_data_end+0xfffeca00>
    ce9c:	2984b03a 	or	r2,r5,r6
    cea0:	10004226 	beq	r2,zero,cfac <__subdf3+0x82c>
    cea4:	1808d0fa 	srli	r4,r3,3
    cea8:	8822d0fa 	srli	r17,r17,3
    ceac:	1806977a 	slli	r3,r3,29
    ceb0:	2080022c 	andhi	r2,r4,8
    ceb4:	1c62b03a 	or	r17,r3,r17
    ceb8:	10000826 	beq	r2,zero,cedc <__subdf3+0x75c>
    cebc:	2812d0fa 	srli	r9,r5,3
    cec0:	4880022c 	andhi	r2,r9,8
    cec4:	1000051e 	bne	r2,zero,cedc <__subdf3+0x75c>
    cec8:	300cd0fa 	srli	r6,r6,3
    cecc:	2804977a 	slli	r2,r5,29
    ced0:	4809883a 	mov	r4,r9
    ced4:	3825883a 	mov	r18,r7
    ced8:	11a2b03a 	or	r17,r2,r6
    cedc:	8806d77a 	srli	r3,r17,29
    cee0:	200890fa 	slli	r4,r4,3
    cee4:	882290fa 	slli	r17,r17,3
    cee8:	0401ffc4 	movi	r16,2047
    ceec:	1906b03a 	or	r3,r3,r4
    cef0:	003e4406 	br	c804 <__alt_data_end+0xfffec804>
    cef4:	2984b03a 	or	r2,r5,r6
    cef8:	103e4226 	beq	r2,zero,c804 <__alt_data_end+0xfffec804>
    cefc:	8989c83a 	sub	r4,r17,r6
    cf00:	8911803a 	cmpltu	r8,r17,r4
    cf04:	1945c83a 	sub	r2,r3,r5
    cf08:	1205c83a 	sub	r2,r2,r8
    cf0c:	1200202c 	andhi	r8,r2,128
    cf10:	403e9a26 	beq	r8,zero,c97c <__alt_data_end+0xfffec97c>
    cf14:	3463c83a 	sub	r17,r6,r17
    cf18:	28c5c83a 	sub	r2,r5,r3
    cf1c:	344d803a 	cmpltu	r6,r6,r17
    cf20:	1187c83a 	sub	r3,r2,r6
    cf24:	3825883a 	mov	r18,r7
    cf28:	003e3606 	br	c804 <__alt_data_end+0xfffec804>
    cf2c:	0101ffc4 	movi	r4,2047
    cf30:	493fc71e 	bne	r9,r4,ce50 <__alt_data_end+0xfffece50>
    cf34:	2807883a 	mov	r3,r5
    cf38:	3023883a 	mov	r17,r6
    cf3c:	4821883a 	mov	r16,r9
    cf40:	003e3006 	br	c804 <__alt_data_end+0xfffec804>
    cf44:	10003626 	beq	r2,zero,d020 <__subdf3+0x8a0>
    cf48:	2984b03a 	or	r2,r5,r6
    cf4c:	10001726 	beq	r2,zero,cfac <__subdf3+0x82c>
    cf50:	1808d0fa 	srli	r4,r3,3
    cf54:	8822d0fa 	srli	r17,r17,3
    cf58:	1806977a 	slli	r3,r3,29
    cf5c:	2080022c 	andhi	r2,r4,8
    cf60:	1c62b03a 	or	r17,r3,r17
    cf64:	10000726 	beq	r2,zero,cf84 <__subdf3+0x804>
    cf68:	2812d0fa 	srli	r9,r5,3
    cf6c:	4880022c 	andhi	r2,r9,8
    cf70:	1000041e 	bne	r2,zero,cf84 <__subdf3+0x804>
    cf74:	300cd0fa 	srli	r6,r6,3
    cf78:	2804977a 	slli	r2,r5,29
    cf7c:	4809883a 	mov	r4,r9
    cf80:	11a2b03a 	or	r17,r2,r6
    cf84:	8806d77a 	srli	r3,r17,29
    cf88:	200890fa 	slli	r4,r4,3
    cf8c:	882290fa 	slli	r17,r17,3
    cf90:	3825883a 	mov	r18,r7
    cf94:	1906b03a 	or	r3,r3,r4
    cf98:	0401ffc4 	movi	r16,2047
    cf9c:	003e1906 	br	c804 <__alt_data_end+0xfffec804>
    cfa0:	000b883a 	mov	r5,zero
    cfa4:	0005883a 	mov	r2,zero
    cfa8:	003e2e06 	br	c864 <__alt_data_end+0xfffec864>
    cfac:	0401ffc4 	movi	r16,2047
    cfb0:	003e1406 	br	c804 <__alt_data_end+0xfffec804>
    cfb4:	0005883a 	mov	r2,zero
    cfb8:	003f7506 	br	cd90 <__alt_data_end+0xfffecd90>
    cfbc:	0005883a 	mov	r2,zero
    cfc0:	0009883a 	mov	r4,zero
    cfc4:	003e7806 	br	c9a8 <__alt_data_end+0xfffec9a8>
    cfc8:	123ff804 	addi	r8,r2,-32
    cfcc:	01000804 	movi	r4,32
    cfd0:	1a10d83a 	srl	r8,r3,r8
    cfd4:	11002526 	beq	r2,r4,d06c <__subdf3+0x8ec>
    cfd8:	01001004 	movi	r4,64
    cfdc:	2085c83a 	sub	r2,r4,r2
    cfe0:	1884983a 	sll	r2,r3,r2
    cfe4:	1444b03a 	or	r2,r2,r17
    cfe8:	1004c03a 	cmpne	r2,r2,zero
    cfec:	40a2b03a 	or	r17,r8,r2
    cff0:	0005883a 	mov	r2,zero
    cff4:	003f1606 	br	cc50 <__alt_data_end+0xfffecc50>
    cff8:	02000434 	movhi	r8,16
    cffc:	0009883a 	mov	r4,zero
    d000:	423fffc4 	addi	r8,r8,-1
    d004:	00bfffc4 	movi	r2,-1
    d008:	0401ffc4 	movi	r16,2047
    d00c:	003e6606 	br	c9a8 <__alt_data_end+0xfffec9a8>
    d010:	1c62b03a 	or	r17,r3,r17
    d014:	8822c03a 	cmpne	r17,r17,zero
    d018:	0005883a 	mov	r2,zero
    d01c:	003f9906 	br	ce84 <__alt_data_end+0xfffece84>
    d020:	2807883a 	mov	r3,r5
    d024:	3023883a 	mov	r17,r6
    d028:	0401ffc4 	movi	r16,2047
    d02c:	003df506 	br	c804 <__alt_data_end+0xfffec804>
    d030:	2807883a 	mov	r3,r5
    d034:	3023883a 	mov	r17,r6
    d038:	003df206 	br	c804 <__alt_data_end+0xfffec804>
    d03c:	123ff804 	addi	r8,r2,-32
    d040:	01000804 	movi	r4,32
    d044:	1a10d83a 	srl	r8,r3,r8
    d048:	11000a26 	beq	r2,r4,d074 <__subdf3+0x8f4>
    d04c:	01001004 	movi	r4,64
    d050:	2085c83a 	sub	r2,r4,r2
    d054:	1884983a 	sll	r2,r3,r2
    d058:	1444b03a 	or	r2,r2,r17
    d05c:	1004c03a 	cmpne	r2,r2,zero
    d060:	40a2b03a 	or	r17,r8,r2
    d064:	0005883a 	mov	r2,zero
    d068:	003f8606 	br	ce84 <__alt_data_end+0xfffece84>
    d06c:	0005883a 	mov	r2,zero
    d070:	003fdc06 	br	cfe4 <__alt_data_end+0xfffecfe4>
    d074:	0005883a 	mov	r2,zero
    d078:	003ff706 	br	d058 <__alt_data_end+0xfffed058>

0000d07c <__fixdfsi>:
    d07c:	280cd53a 	srli	r6,r5,20
    d080:	00c00434 	movhi	r3,16
    d084:	18ffffc4 	addi	r3,r3,-1
    d088:	3181ffcc 	andi	r6,r6,2047
    d08c:	01c0ff84 	movi	r7,1022
    d090:	28c6703a 	and	r3,r5,r3
    d094:	280ad7fa 	srli	r5,r5,31
    d098:	3980120e 	bge	r7,r6,d0e4 <__fixdfsi+0x68>
    d09c:	00810744 	movi	r2,1053
    d0a0:	11800c16 	blt	r2,r6,d0d4 <__fixdfsi+0x58>
    d0a4:	00810cc4 	movi	r2,1075
    d0a8:	1185c83a 	sub	r2,r2,r6
    d0ac:	01c007c4 	movi	r7,31
    d0b0:	18c00434 	orhi	r3,r3,16
    d0b4:	38800d16 	blt	r7,r2,d0ec <__fixdfsi+0x70>
    d0b8:	31befb44 	addi	r6,r6,-1043
    d0bc:	2084d83a 	srl	r2,r4,r2
    d0c0:	1986983a 	sll	r3,r3,r6
    d0c4:	1884b03a 	or	r2,r3,r2
    d0c8:	28000726 	beq	r5,zero,d0e8 <__fixdfsi+0x6c>
    d0cc:	0085c83a 	sub	r2,zero,r2
    d0d0:	f800283a 	ret
    d0d4:	00a00034 	movhi	r2,32768
    d0d8:	10bfffc4 	addi	r2,r2,-1
    d0dc:	2885883a 	add	r2,r5,r2
    d0e0:	f800283a 	ret
    d0e4:	0005883a 	mov	r2,zero
    d0e8:	f800283a 	ret
    d0ec:	008104c4 	movi	r2,1043
    d0f0:	1185c83a 	sub	r2,r2,r6
    d0f4:	1884d83a 	srl	r2,r3,r2
    d0f8:	003ff306 	br	d0c8 <__alt_data_end+0xfffed0c8>

0000d0fc <__floatsidf>:
    d0fc:	defffd04 	addi	sp,sp,-12
    d100:	dfc00215 	stw	ra,8(sp)
    d104:	dc400115 	stw	r17,4(sp)
    d108:	dc000015 	stw	r16,0(sp)
    d10c:	20002b26 	beq	r4,zero,d1bc <__floatsidf+0xc0>
    d110:	2023883a 	mov	r17,r4
    d114:	2020d7fa 	srli	r16,r4,31
    d118:	20002d16 	blt	r4,zero,d1d0 <__floatsidf+0xd4>
    d11c:	8809883a 	mov	r4,r17
    d120:	000d2800 	call	d280 <__clzsi2>
    d124:	01410784 	movi	r5,1054
    d128:	288bc83a 	sub	r5,r5,r2
    d12c:	01010cc4 	movi	r4,1075
    d130:	2149c83a 	sub	r4,r4,r5
    d134:	00c007c4 	movi	r3,31
    d138:	1900160e 	bge	r3,r4,d194 <__floatsidf+0x98>
    d13c:	00c104c4 	movi	r3,1043
    d140:	1947c83a 	sub	r3,r3,r5
    d144:	88c6983a 	sll	r3,r17,r3
    d148:	00800434 	movhi	r2,16
    d14c:	10bfffc4 	addi	r2,r2,-1
    d150:	1886703a 	and	r3,r3,r2
    d154:	2941ffcc 	andi	r5,r5,2047
    d158:	800d883a 	mov	r6,r16
    d15c:	0005883a 	mov	r2,zero
    d160:	280a953a 	slli	r5,r5,20
    d164:	31803fcc 	andi	r6,r6,255
    d168:	01000434 	movhi	r4,16
    d16c:	300c97fa 	slli	r6,r6,31
    d170:	213fffc4 	addi	r4,r4,-1
    d174:	1906703a 	and	r3,r3,r4
    d178:	1946b03a 	or	r3,r3,r5
    d17c:	1986b03a 	or	r3,r3,r6
    d180:	dfc00217 	ldw	ra,8(sp)
    d184:	dc400117 	ldw	r17,4(sp)
    d188:	dc000017 	ldw	r16,0(sp)
    d18c:	dec00304 	addi	sp,sp,12
    d190:	f800283a 	ret
    d194:	00c002c4 	movi	r3,11
    d198:	1887c83a 	sub	r3,r3,r2
    d19c:	88c6d83a 	srl	r3,r17,r3
    d1a0:	8904983a 	sll	r2,r17,r4
    d1a4:	01000434 	movhi	r4,16
    d1a8:	213fffc4 	addi	r4,r4,-1
    d1ac:	2941ffcc 	andi	r5,r5,2047
    d1b0:	1906703a 	and	r3,r3,r4
    d1b4:	800d883a 	mov	r6,r16
    d1b8:	003fe906 	br	d160 <__alt_data_end+0xfffed160>
    d1bc:	000d883a 	mov	r6,zero
    d1c0:	000b883a 	mov	r5,zero
    d1c4:	0007883a 	mov	r3,zero
    d1c8:	0005883a 	mov	r2,zero
    d1cc:	003fe406 	br	d160 <__alt_data_end+0xfffed160>
    d1d0:	0123c83a 	sub	r17,zero,r4
    d1d4:	003fd106 	br	d11c <__alt_data_end+0xfffed11c>

0000d1d8 <__floatunsidf>:
    d1d8:	defffe04 	addi	sp,sp,-8
    d1dc:	dc000015 	stw	r16,0(sp)
    d1e0:	dfc00115 	stw	ra,4(sp)
    d1e4:	2021883a 	mov	r16,r4
    d1e8:	20002226 	beq	r4,zero,d274 <__floatunsidf+0x9c>
    d1ec:	000d2800 	call	d280 <__clzsi2>
    d1f0:	01010784 	movi	r4,1054
    d1f4:	2089c83a 	sub	r4,r4,r2
    d1f8:	01810cc4 	movi	r6,1075
    d1fc:	310dc83a 	sub	r6,r6,r4
    d200:	00c007c4 	movi	r3,31
    d204:	1980120e 	bge	r3,r6,d250 <__floatunsidf+0x78>
    d208:	00c104c4 	movi	r3,1043
    d20c:	1907c83a 	sub	r3,r3,r4
    d210:	80ca983a 	sll	r5,r16,r3
    d214:	00800434 	movhi	r2,16
    d218:	10bfffc4 	addi	r2,r2,-1
    d21c:	2101ffcc 	andi	r4,r4,2047
    d220:	0021883a 	mov	r16,zero
    d224:	288a703a 	and	r5,r5,r2
    d228:	2008953a 	slli	r4,r4,20
    d22c:	00c00434 	movhi	r3,16
    d230:	18ffffc4 	addi	r3,r3,-1
    d234:	28c6703a 	and	r3,r5,r3
    d238:	8005883a 	mov	r2,r16
    d23c:	1906b03a 	or	r3,r3,r4
    d240:	dfc00117 	ldw	ra,4(sp)
    d244:	dc000017 	ldw	r16,0(sp)
    d248:	dec00204 	addi	sp,sp,8
    d24c:	f800283a 	ret
    d250:	00c002c4 	movi	r3,11
    d254:	188bc83a 	sub	r5,r3,r2
    d258:	814ad83a 	srl	r5,r16,r5
    d25c:	00c00434 	movhi	r3,16
    d260:	18ffffc4 	addi	r3,r3,-1
    d264:	81a0983a 	sll	r16,r16,r6
    d268:	2101ffcc 	andi	r4,r4,2047
    d26c:	28ca703a 	and	r5,r5,r3
    d270:	003fed06 	br	d228 <__alt_data_end+0xfffed228>
    d274:	0009883a 	mov	r4,zero
    d278:	000b883a 	mov	r5,zero
    d27c:	003fea06 	br	d228 <__alt_data_end+0xfffed228>

0000d280 <__clzsi2>:
    d280:	00bfffd4 	movui	r2,65535
    d284:	11000536 	bltu	r2,r4,d29c <__clzsi2+0x1c>
    d288:	00803fc4 	movi	r2,255
    d28c:	11000f36 	bltu	r2,r4,d2cc <__clzsi2+0x4c>
    d290:	00800804 	movi	r2,32
    d294:	0007883a 	mov	r3,zero
    d298:	00000506 	br	d2b0 <__clzsi2+0x30>
    d29c:	00804034 	movhi	r2,256
    d2a0:	10bfffc4 	addi	r2,r2,-1
    d2a4:	11000c2e 	bgeu	r2,r4,d2d8 <__clzsi2+0x58>
    d2a8:	00800204 	movi	r2,8
    d2ac:	00c00604 	movi	r3,24
    d2b0:	20c8d83a 	srl	r4,r4,r3
    d2b4:	00c00074 	movhi	r3,1
    d2b8:	18ff1404 	addi	r3,r3,-944
    d2bc:	1909883a 	add	r4,r3,r4
    d2c0:	20c00003 	ldbu	r3,0(r4)
    d2c4:	10c5c83a 	sub	r2,r2,r3
    d2c8:	f800283a 	ret
    d2cc:	00800604 	movi	r2,24
    d2d0:	00c00204 	movi	r3,8
    d2d4:	003ff606 	br	d2b0 <__alt_data_end+0xfffed2b0>
    d2d8:	00800404 	movi	r2,16
    d2dc:	1007883a 	mov	r3,r2
    d2e0:	003ff306 	br	d2b0 <__alt_data_end+0xfffed2b0>

0000d2e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d2e4:	defffe04 	addi	sp,sp,-8
    d2e8:	dfc00115 	stw	ra,4(sp)
    d2ec:	df000015 	stw	fp,0(sp)
    d2f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2f4:	d0a00b17 	ldw	r2,-32724(gp)
    d2f8:	10000326 	beq	r2,zero,d308 <alt_get_errno+0x24>
    d2fc:	d0a00b17 	ldw	r2,-32724(gp)
    d300:	103ee83a 	callr	r2
    d304:	00000106 	br	d30c <alt_get_errno+0x28>
    d308:	d0a6d104 	addi	r2,gp,-25788
}
    d30c:	e037883a 	mov	sp,fp
    d310:	dfc00117 	ldw	ra,4(sp)
    d314:	df000017 	ldw	fp,0(sp)
    d318:	dec00204 	addi	sp,sp,8
    d31c:	f800283a 	ret

0000d320 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d320:	defffb04 	addi	sp,sp,-20
    d324:	dfc00415 	stw	ra,16(sp)
    d328:	df000315 	stw	fp,12(sp)
    d32c:	df000304 	addi	fp,sp,12
    d330:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d334:	e0bfff17 	ldw	r2,-4(fp)
    d338:	10000816 	blt	r2,zero,d35c <close+0x3c>
    d33c:	01400304 	movi	r5,12
    d340:	e13fff17 	ldw	r4,-4(fp)
    d344:	000aa180 	call	aa18 <__mulsi3>
    d348:	1007883a 	mov	r3,r2
    d34c:	00800074 	movhi	r2,1
    d350:	10819204 	addi	r2,r2,1608
    d354:	1885883a 	add	r2,r3,r2
    d358:	00000106 	br	d360 <close+0x40>
    d35c:	0005883a 	mov	r2,zero
    d360:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d364:	e0bffd17 	ldw	r2,-12(fp)
    d368:	10001926 	beq	r2,zero,d3d0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d36c:	e0bffd17 	ldw	r2,-12(fp)
    d370:	10800017 	ldw	r2,0(r2)
    d374:	10800417 	ldw	r2,16(r2)
    d378:	10000626 	beq	r2,zero,d394 <close+0x74>
    d37c:	e0bffd17 	ldw	r2,-12(fp)
    d380:	10800017 	ldw	r2,0(r2)
    d384:	10800417 	ldw	r2,16(r2)
    d388:	e13ffd17 	ldw	r4,-12(fp)
    d38c:	103ee83a 	callr	r2
    d390:	00000106 	br	d398 <close+0x78>
    d394:	0005883a 	mov	r2,zero
    d398:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d39c:	e13fff17 	ldw	r4,-4(fp)
    d3a0:	000da200 	call	da20 <alt_release_fd>
    if (rval < 0)
    d3a4:	e0bffe17 	ldw	r2,-8(fp)
    d3a8:	1000070e 	bge	r2,zero,d3c8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    d3ac:	000d2e40 	call	d2e4 <alt_get_errno>
    d3b0:	1007883a 	mov	r3,r2
    d3b4:	e0bffe17 	ldw	r2,-8(fp)
    d3b8:	0085c83a 	sub	r2,zero,r2
    d3bc:	18800015 	stw	r2,0(r3)
      return -1;
    d3c0:	00bfffc4 	movi	r2,-1
    d3c4:	00000706 	br	d3e4 <close+0xc4>
    }
    return 0;
    d3c8:	0005883a 	mov	r2,zero
    d3cc:	00000506 	br	d3e4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d3d0:	000d2e40 	call	d2e4 <alt_get_errno>
    d3d4:	1007883a 	mov	r3,r2
    d3d8:	00801444 	movi	r2,81
    d3dc:	18800015 	stw	r2,0(r3)
    return -1;
    d3e0:	00bfffc4 	movi	r2,-1
  }
}
    d3e4:	e037883a 	mov	sp,fp
    d3e8:	dfc00117 	ldw	ra,4(sp)
    d3ec:	df000017 	ldw	fp,0(sp)
    d3f0:	dec00204 	addi	sp,sp,8
    d3f4:	f800283a 	ret

0000d3f8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
    d3f8:	defffd04 	addi	sp,sp,-12
    d3fc:	df000215 	stw	fp,8(sp)
    d400:	df000204 	addi	fp,sp,8
    d404:	e13ffe15 	stw	r4,-8(fp)
    d408:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d40c:	0001883a 	nop
    d410:	e037883a 	mov	sp,fp
    d414:	df000017 	ldw	fp,0(sp)
    d418:	dec00104 	addi	sp,sp,4
    d41c:	f800283a 	ret

0000d420 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d420:	defffc04 	addi	sp,sp,-16
    d424:	df000315 	stw	fp,12(sp)
    d428:	df000304 	addi	fp,sp,12
    d42c:	e13ffd15 	stw	r4,-12(fp)
    d430:	e17ffe15 	stw	r5,-8(fp)
    d434:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d438:	e0bfff17 	ldw	r2,-4(fp)
}
    d43c:	e037883a 	mov	sp,fp
    d440:	df000017 	ldw	fp,0(sp)
    d444:	dec00104 	addi	sp,sp,4
    d448:	f800283a 	ret

0000d44c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d44c:	defffe04 	addi	sp,sp,-8
    d450:	dfc00115 	stw	ra,4(sp)
    d454:	df000015 	stw	fp,0(sp)
    d458:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d45c:	d0a00b17 	ldw	r2,-32724(gp)
    d460:	10000326 	beq	r2,zero,d470 <alt_get_errno+0x24>
    d464:	d0a00b17 	ldw	r2,-32724(gp)
    d468:	103ee83a 	callr	r2
    d46c:	00000106 	br	d474 <alt_get_errno+0x28>
    d470:	d0a6d104 	addi	r2,gp,-25788
}
    d474:	e037883a 	mov	sp,fp
    d478:	dfc00117 	ldw	ra,4(sp)
    d47c:	df000017 	ldw	fp,0(sp)
    d480:	dec00204 	addi	sp,sp,8
    d484:	f800283a 	ret

0000d488 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d488:	defffb04 	addi	sp,sp,-20
    d48c:	dfc00415 	stw	ra,16(sp)
    d490:	df000315 	stw	fp,12(sp)
    d494:	df000304 	addi	fp,sp,12
    d498:	e13ffe15 	stw	r4,-8(fp)
    d49c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d4a0:	e0bffe17 	ldw	r2,-8(fp)
    d4a4:	10000816 	blt	r2,zero,d4c8 <fstat+0x40>
    d4a8:	01400304 	movi	r5,12
    d4ac:	e13ffe17 	ldw	r4,-8(fp)
    d4b0:	000aa180 	call	aa18 <__mulsi3>
    d4b4:	1007883a 	mov	r3,r2
    d4b8:	00800074 	movhi	r2,1
    d4bc:	10819204 	addi	r2,r2,1608
    d4c0:	1885883a 	add	r2,r3,r2
    d4c4:	00000106 	br	d4cc <fstat+0x44>
    d4c8:	0005883a 	mov	r2,zero
    d4cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d4d0:	e0bffd17 	ldw	r2,-12(fp)
    d4d4:	10001026 	beq	r2,zero,d518 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d4d8:	e0bffd17 	ldw	r2,-12(fp)
    d4dc:	10800017 	ldw	r2,0(r2)
    d4e0:	10800817 	ldw	r2,32(r2)
    d4e4:	10000726 	beq	r2,zero,d504 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    d4e8:	e0bffd17 	ldw	r2,-12(fp)
    d4ec:	10800017 	ldw	r2,0(r2)
    d4f0:	10800817 	ldw	r2,32(r2)
    d4f4:	e17fff17 	ldw	r5,-4(fp)
    d4f8:	e13ffd17 	ldw	r4,-12(fp)
    d4fc:	103ee83a 	callr	r2
    d500:	00000a06 	br	d52c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d504:	e0bfff17 	ldw	r2,-4(fp)
    d508:	00c80004 	movi	r3,8192
    d50c:	10c00115 	stw	r3,4(r2)
      return 0;
    d510:	0005883a 	mov	r2,zero
    d514:	00000506 	br	d52c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d518:	000d44c0 	call	d44c <alt_get_errno>
    d51c:	1007883a 	mov	r3,r2
    d520:	00801444 	movi	r2,81
    d524:	18800015 	stw	r2,0(r3)
    return -1;
    d528:	00bfffc4 	movi	r2,-1
  }
}
    d52c:	e037883a 	mov	sp,fp
    d530:	dfc00117 	ldw	ra,4(sp)
    d534:	df000017 	ldw	fp,0(sp)
    d538:	dec00204 	addi	sp,sp,8
    d53c:	f800283a 	ret

0000d540 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d540:	defffe04 	addi	sp,sp,-8
    d544:	dfc00115 	stw	ra,4(sp)
    d548:	df000015 	stw	fp,0(sp)
    d54c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d550:	d0a00b17 	ldw	r2,-32724(gp)
    d554:	10000326 	beq	r2,zero,d564 <alt_get_errno+0x24>
    d558:	d0a00b17 	ldw	r2,-32724(gp)
    d55c:	103ee83a 	callr	r2
    d560:	00000106 	br	d568 <alt_get_errno+0x28>
    d564:	d0a6d104 	addi	r2,gp,-25788
}
    d568:	e037883a 	mov	sp,fp
    d56c:	dfc00117 	ldw	ra,4(sp)
    d570:	df000017 	ldw	fp,0(sp)
    d574:	dec00204 	addi	sp,sp,8
    d578:	f800283a 	ret

0000d57c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d57c:	deffed04 	addi	sp,sp,-76
    d580:	dfc01215 	stw	ra,72(sp)
    d584:	df001115 	stw	fp,68(sp)
    d588:	df001104 	addi	fp,sp,68
    d58c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d590:	e0bfff17 	ldw	r2,-4(fp)
    d594:	10000816 	blt	r2,zero,d5b8 <isatty+0x3c>
    d598:	01400304 	movi	r5,12
    d59c:	e13fff17 	ldw	r4,-4(fp)
    d5a0:	000aa180 	call	aa18 <__mulsi3>
    d5a4:	1007883a 	mov	r3,r2
    d5a8:	00800074 	movhi	r2,1
    d5ac:	10819204 	addi	r2,r2,1608
    d5b0:	1885883a 	add	r2,r3,r2
    d5b4:	00000106 	br	d5bc <isatty+0x40>
    d5b8:	0005883a 	mov	r2,zero
    d5bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d5c0:	e0bfef17 	ldw	r2,-68(fp)
    d5c4:	10000e26 	beq	r2,zero,d600 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d5c8:	e0bfef17 	ldw	r2,-68(fp)
    d5cc:	10800017 	ldw	r2,0(r2)
    d5d0:	10800817 	ldw	r2,32(r2)
    d5d4:	1000021e 	bne	r2,zero,d5e0 <isatty+0x64>
    {
      return 1;
    d5d8:	00800044 	movi	r2,1
    d5dc:	00000d06 	br	d614 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d5e0:	e0bff004 	addi	r2,fp,-64
    d5e4:	100b883a 	mov	r5,r2
    d5e8:	e13fff17 	ldw	r4,-4(fp)
    d5ec:	000d4880 	call	d488 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d5f0:	e0bff117 	ldw	r2,-60(fp)
    d5f4:	10880020 	cmpeqi	r2,r2,8192
    d5f8:	10803fcc 	andi	r2,r2,255
    d5fc:	00000506 	br	d614 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d600:	000d5400 	call	d540 <alt_get_errno>
    d604:	1007883a 	mov	r3,r2
    d608:	00801444 	movi	r2,81
    d60c:	18800015 	stw	r2,0(r3)
    return 0;
    d610:	0005883a 	mov	r2,zero
  }
}
    d614:	e037883a 	mov	sp,fp
    d618:	dfc00117 	ldw	ra,4(sp)
    d61c:	df000017 	ldw	fp,0(sp)
    d620:	dec00204 	addi	sp,sp,8
    d624:	f800283a 	ret

0000d628 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d628:	defffc04 	addi	sp,sp,-16
    d62c:	df000315 	stw	fp,12(sp)
    d630:	df000304 	addi	fp,sp,12
    d634:	e13ffd15 	stw	r4,-12(fp)
    d638:	e17ffe15 	stw	r5,-8(fp)
    d63c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d640:	e0fffe17 	ldw	r3,-8(fp)
    d644:	e0bffd17 	ldw	r2,-12(fp)
    d648:	18800c26 	beq	r3,r2,d67c <alt_load_section+0x54>
  {
    while( to != end )
    d64c:	00000806 	br	d670 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d650:	e0bffe17 	ldw	r2,-8(fp)
    d654:	10c00104 	addi	r3,r2,4
    d658:	e0fffe15 	stw	r3,-8(fp)
    d65c:	e0fffd17 	ldw	r3,-12(fp)
    d660:	19000104 	addi	r4,r3,4
    d664:	e13ffd15 	stw	r4,-12(fp)
    d668:	18c00017 	ldw	r3,0(r3)
    d66c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d670:	e0fffe17 	ldw	r3,-8(fp)
    d674:	e0bfff17 	ldw	r2,-4(fp)
    d678:	18bff51e 	bne	r3,r2,d650 <__alt_data_end+0xfffed650>
    {
      *to++ = *from++;
    }
  }
}
    d67c:	0001883a 	nop
    d680:	e037883a 	mov	sp,fp
    d684:	df000017 	ldw	fp,0(sp)
    d688:	dec00104 	addi	sp,sp,4
    d68c:	f800283a 	ret

0000d690 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d690:	defffe04 	addi	sp,sp,-8
    d694:	dfc00115 	stw	ra,4(sp)
    d698:	df000015 	stw	fp,0(sp)
    d69c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d6a0:	01800074 	movhi	r6,1
    d6a4:	31861a04 	addi	r6,r6,6248
    d6a8:	01400074 	movhi	r5,1
    d6ac:	297f5f04 	addi	r5,r5,-644
    d6b0:	01000074 	movhi	r4,1
    d6b4:	21061a04 	addi	r4,r4,6248
    d6b8:	000d6280 	call	d628 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d6bc:	01800034 	movhi	r6,0
    d6c0:	31808c04 	addi	r6,r6,560
    d6c4:	01400034 	movhi	r5,0
    d6c8:	29400804 	addi	r5,r5,32
    d6cc:	01000034 	movhi	r4,0
    d6d0:	21000804 	addi	r4,r4,32
    d6d4:	000d6280 	call	d628 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d6d8:	01800074 	movhi	r6,1
    d6dc:	31bf5f04 	addi	r6,r6,-644
    d6e0:	01400074 	movhi	r5,1
    d6e4:	297e8e04 	addi	r5,r5,-1480
    d6e8:	01000074 	movhi	r4,1
    d6ec:	213e8e04 	addi	r4,r4,-1480
    d6f0:	000d6280 	call	d628 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d6f4:	000eb6c0 	call	eb6c <alt_dcache_flush_all>
  alt_icache_flush_all();
    d6f8:	000ec6c0 	call	ec6c <alt_icache_flush_all>
}
    d6fc:	0001883a 	nop
    d700:	e037883a 	mov	sp,fp
    d704:	dfc00117 	ldw	ra,4(sp)
    d708:	df000017 	ldw	fp,0(sp)
    d70c:	dec00204 	addi	sp,sp,8
    d710:	f800283a 	ret

0000d714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d714:	defffe04 	addi	sp,sp,-8
    d718:	dfc00115 	stw	ra,4(sp)
    d71c:	df000015 	stw	fp,0(sp)
    d720:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d724:	d0a00b17 	ldw	r2,-32724(gp)
    d728:	10000326 	beq	r2,zero,d738 <alt_get_errno+0x24>
    d72c:	d0a00b17 	ldw	r2,-32724(gp)
    d730:	103ee83a 	callr	r2
    d734:	00000106 	br	d73c <alt_get_errno+0x28>
    d738:	d0a6d104 	addi	r2,gp,-25788
}
    d73c:	e037883a 	mov	sp,fp
    d740:	dfc00117 	ldw	ra,4(sp)
    d744:	df000017 	ldw	fp,0(sp)
    d748:	dec00204 	addi	sp,sp,8
    d74c:	f800283a 	ret

0000d750 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d750:	defff904 	addi	sp,sp,-28
    d754:	dfc00615 	stw	ra,24(sp)
    d758:	df000515 	stw	fp,20(sp)
    d75c:	df000504 	addi	fp,sp,20
    d760:	e13ffd15 	stw	r4,-12(fp)
    d764:	e17ffe15 	stw	r5,-8(fp)
    d768:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d76c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d770:	e0bffd17 	ldw	r2,-12(fp)
    d774:	10000816 	blt	r2,zero,d798 <lseek+0x48>
    d778:	01400304 	movi	r5,12
    d77c:	e13ffd17 	ldw	r4,-12(fp)
    d780:	000aa180 	call	aa18 <__mulsi3>
    d784:	1007883a 	mov	r3,r2
    d788:	00800074 	movhi	r2,1
    d78c:	10819204 	addi	r2,r2,1608
    d790:	1885883a 	add	r2,r3,r2
    d794:	00000106 	br	d79c <lseek+0x4c>
    d798:	0005883a 	mov	r2,zero
    d79c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d7a0:	e0bffc17 	ldw	r2,-16(fp)
    d7a4:	10001026 	beq	r2,zero,d7e8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d7a8:	e0bffc17 	ldw	r2,-16(fp)
    d7ac:	10800017 	ldw	r2,0(r2)
    d7b0:	10800717 	ldw	r2,28(r2)
    d7b4:	10000926 	beq	r2,zero,d7dc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d7b8:	e0bffc17 	ldw	r2,-16(fp)
    d7bc:	10800017 	ldw	r2,0(r2)
    d7c0:	10800717 	ldw	r2,28(r2)
    d7c4:	e1bfff17 	ldw	r6,-4(fp)
    d7c8:	e17ffe17 	ldw	r5,-8(fp)
    d7cc:	e13ffc17 	ldw	r4,-16(fp)
    d7d0:	103ee83a 	callr	r2
    d7d4:	e0bffb15 	stw	r2,-20(fp)
    d7d8:	00000506 	br	d7f0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d7dc:	00bfde84 	movi	r2,-134
    d7e0:	e0bffb15 	stw	r2,-20(fp)
    d7e4:	00000206 	br	d7f0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    d7e8:	00bfebc4 	movi	r2,-81
    d7ec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d7f0:	e0bffb17 	ldw	r2,-20(fp)
    d7f4:	1000070e 	bge	r2,zero,d814 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    d7f8:	000d7140 	call	d714 <alt_get_errno>
    d7fc:	1007883a 	mov	r3,r2
    d800:	e0bffb17 	ldw	r2,-20(fp)
    d804:	0085c83a 	sub	r2,zero,r2
    d808:	18800015 	stw	r2,0(r3)
    rc = -1;
    d80c:	00bfffc4 	movi	r2,-1
    d810:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d814:	e0bffb17 	ldw	r2,-20(fp)
}
    d818:	e037883a 	mov	sp,fp
    d81c:	dfc00117 	ldw	ra,4(sp)
    d820:	df000017 	ldw	fp,0(sp)
    d824:	dec00204 	addi	sp,sp,8
    d828:	f800283a 	ret

0000d82c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d82c:	defffd04 	addi	sp,sp,-12
    d830:	dfc00215 	stw	ra,8(sp)
    d834:	df000115 	stw	fp,4(sp)
    d838:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d83c:	0009883a 	mov	r4,zero
    d840:	000dcf40 	call	dcf4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d844:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d848:	000dd2c0 	call	dd2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d84c:	01800074 	movhi	r6,1
    d850:	31bf5704 	addi	r6,r6,-676
    d854:	01400074 	movhi	r5,1
    d858:	297f5704 	addi	r5,r5,-676
    d85c:	01000074 	movhi	r4,1
    d860:	213f5704 	addi	r4,r4,-676
    d864:	000f0100 	call	f010 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d868:	d0a6d217 	ldw	r2,-25784(gp)
    d86c:	d0e6d317 	ldw	r3,-25780(gp)
    d870:	d126d417 	ldw	r4,-25776(gp)
    d874:	200d883a 	mov	r6,r4
    d878:	180b883a 	mov	r5,r3
    d87c:	1009883a 	mov	r4,r2
    d880:	000026c0 	call	26c <main>
    d884:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d888:	01000044 	movi	r4,1
    d88c:	000d3200 	call	d320 <close>
  exit (result);
    d890:	e13fff17 	ldw	r4,-4(fp)
    d894:	000f7d00 	call	f7d0 <exit>

0000d898 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d898:	defffe04 	addi	sp,sp,-8
    d89c:	df000115 	stw	fp,4(sp)
    d8a0:	df000104 	addi	fp,sp,4
    d8a4:	e13fff15 	stw	r4,-4(fp)
}
    d8a8:	0001883a 	nop
    d8ac:	e037883a 	mov	sp,fp
    d8b0:	df000017 	ldw	fp,0(sp)
    d8b4:	dec00104 	addi	sp,sp,4
    d8b8:	f800283a 	ret

0000d8bc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d8bc:	defffe04 	addi	sp,sp,-8
    d8c0:	df000115 	stw	fp,4(sp)
    d8c4:	df000104 	addi	fp,sp,4
    d8c8:	e13fff15 	stw	r4,-4(fp)
}
    d8cc:	0001883a 	nop
    d8d0:	e037883a 	mov	sp,fp
    d8d4:	df000017 	ldw	fp,0(sp)
    d8d8:	dec00104 	addi	sp,sp,4
    d8dc:	f800283a 	ret

0000d8e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d8e0:	defffe04 	addi	sp,sp,-8
    d8e4:	dfc00115 	stw	ra,4(sp)
    d8e8:	df000015 	stw	fp,0(sp)
    d8ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d8f0:	d0a00b17 	ldw	r2,-32724(gp)
    d8f4:	10000326 	beq	r2,zero,d904 <alt_get_errno+0x24>
    d8f8:	d0a00b17 	ldw	r2,-32724(gp)
    d8fc:	103ee83a 	callr	r2
    d900:	00000106 	br	d908 <alt_get_errno+0x28>
    d904:	d0a6d104 	addi	r2,gp,-25788
}
    d908:	e037883a 	mov	sp,fp
    d90c:	dfc00117 	ldw	ra,4(sp)
    d910:	df000017 	ldw	fp,0(sp)
    d914:	dec00204 	addi	sp,sp,8
    d918:	f800283a 	ret

0000d91c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d91c:	defff904 	addi	sp,sp,-28
    d920:	dfc00615 	stw	ra,24(sp)
    d924:	df000515 	stw	fp,20(sp)
    d928:	df000504 	addi	fp,sp,20
    d92c:	e13ffd15 	stw	r4,-12(fp)
    d930:	e17ffe15 	stw	r5,-8(fp)
    d934:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d938:	e0bffd17 	ldw	r2,-12(fp)
    d93c:	10000816 	blt	r2,zero,d960 <read+0x44>
    d940:	01400304 	movi	r5,12
    d944:	e13ffd17 	ldw	r4,-12(fp)
    d948:	000aa180 	call	aa18 <__mulsi3>
    d94c:	1007883a 	mov	r3,r2
    d950:	00800074 	movhi	r2,1
    d954:	10819204 	addi	r2,r2,1608
    d958:	1885883a 	add	r2,r3,r2
    d95c:	00000106 	br	d964 <read+0x48>
    d960:	0005883a 	mov	r2,zero
    d964:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d968:	e0bffb17 	ldw	r2,-20(fp)
    d96c:	10002226 	beq	r2,zero,d9f8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d970:	e0bffb17 	ldw	r2,-20(fp)
    d974:	10800217 	ldw	r2,8(r2)
    d978:	108000cc 	andi	r2,r2,3
    d97c:	10800060 	cmpeqi	r2,r2,1
    d980:	1000181e 	bne	r2,zero,d9e4 <read+0xc8>
        (fd->dev->read))
    d984:	e0bffb17 	ldw	r2,-20(fp)
    d988:	10800017 	ldw	r2,0(r2)
    d98c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d990:	10001426 	beq	r2,zero,d9e4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d994:	e0bffb17 	ldw	r2,-20(fp)
    d998:	10800017 	ldw	r2,0(r2)
    d99c:	10800517 	ldw	r2,20(r2)
    d9a0:	e0ffff17 	ldw	r3,-4(fp)
    d9a4:	180d883a 	mov	r6,r3
    d9a8:	e17ffe17 	ldw	r5,-8(fp)
    d9ac:	e13ffb17 	ldw	r4,-20(fp)
    d9b0:	103ee83a 	callr	r2
    d9b4:	e0bffc15 	stw	r2,-16(fp)
    d9b8:	e0bffc17 	ldw	r2,-16(fp)
    d9bc:	1000070e 	bge	r2,zero,d9dc <read+0xc0>
        {
          ALT_ERRNO = -rval;
    d9c0:	000d8e00 	call	d8e0 <alt_get_errno>
    d9c4:	1007883a 	mov	r3,r2
    d9c8:	e0bffc17 	ldw	r2,-16(fp)
    d9cc:	0085c83a 	sub	r2,zero,r2
    d9d0:	18800015 	stw	r2,0(r3)
          return -1;
    d9d4:	00bfffc4 	movi	r2,-1
    d9d8:	00000c06 	br	da0c <read+0xf0>
        }
        return rval;
    d9dc:	e0bffc17 	ldw	r2,-16(fp)
    d9e0:	00000a06 	br	da0c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d9e4:	000d8e00 	call	d8e0 <alt_get_errno>
    d9e8:	1007883a 	mov	r3,r2
    d9ec:	00800344 	movi	r2,13
    d9f0:	18800015 	stw	r2,0(r3)
    d9f4:	00000406 	br	da08 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d9f8:	000d8e00 	call	d8e0 <alt_get_errno>
    d9fc:	1007883a 	mov	r3,r2
    da00:	00801444 	movi	r2,81
    da04:	18800015 	stw	r2,0(r3)
  }
  return -1;
    da08:	00bfffc4 	movi	r2,-1
}
    da0c:	e037883a 	mov	sp,fp
    da10:	dfc00117 	ldw	ra,4(sp)
    da14:	df000017 	ldw	fp,0(sp)
    da18:	dec00204 	addi	sp,sp,8
    da1c:	f800283a 	ret

0000da20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    da20:	defffc04 	addi	sp,sp,-16
    da24:	dfc00315 	stw	ra,12(sp)
    da28:	df000215 	stw	fp,8(sp)
    da2c:	dc000115 	stw	r16,4(sp)
    da30:	df000204 	addi	fp,sp,8
    da34:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    da38:	e0bffe17 	ldw	r2,-8(fp)
    da3c:	108000d0 	cmplti	r2,r2,3
    da40:	1000111e 	bne	r2,zero,da88 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    da44:	04000074 	movhi	r16,1
    da48:	84019204 	addi	r16,r16,1608
    da4c:	e0bffe17 	ldw	r2,-8(fp)
    da50:	01400304 	movi	r5,12
    da54:	1009883a 	mov	r4,r2
    da58:	000aa180 	call	aa18 <__mulsi3>
    da5c:	8085883a 	add	r2,r16,r2
    da60:	10800204 	addi	r2,r2,8
    da64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    da68:	04000074 	movhi	r16,1
    da6c:	84019204 	addi	r16,r16,1608
    da70:	e0bffe17 	ldw	r2,-8(fp)
    da74:	01400304 	movi	r5,12
    da78:	1009883a 	mov	r4,r2
    da7c:	000aa180 	call	aa18 <__mulsi3>
    da80:	8085883a 	add	r2,r16,r2
    da84:	10000015 	stw	zero,0(r2)
  }
}
    da88:	0001883a 	nop
    da8c:	e6ffff04 	addi	sp,fp,-4
    da90:	dfc00217 	ldw	ra,8(sp)
    da94:	df000117 	ldw	fp,4(sp)
    da98:	dc000017 	ldw	r16,0(sp)
    da9c:	dec00304 	addi	sp,sp,12
    daa0:	f800283a 	ret

0000daa4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    daa4:	defff904 	addi	sp,sp,-28
    daa8:	df000615 	stw	fp,24(sp)
    daac:	df000604 	addi	fp,sp,24
    dab0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dab4:	0005303a 	rdctl	r2,status
    dab8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dabc:	e0fffe17 	ldw	r3,-8(fp)
    dac0:	00bfff84 	movi	r2,-2
    dac4:	1884703a 	and	r2,r3,r2
    dac8:	1001703a 	wrctl	status,r2
  
  return context;
    dacc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dad0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dad4:	d0a00c17 	ldw	r2,-32720(gp)
    dad8:	10c000c4 	addi	r3,r2,3
    dadc:	00bfff04 	movi	r2,-4
    dae0:	1884703a 	and	r2,r3,r2
    dae4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    dae8:	d0e00c17 	ldw	r3,-32720(gp)
    daec:	e0bfff17 	ldw	r2,-4(fp)
    daf0:	1887883a 	add	r3,r3,r2
    daf4:	008000b4 	movhi	r2,2
    daf8:	10800004 	addi	r2,r2,0
    dafc:	10c0062e 	bgeu	r2,r3,db18 <sbrk+0x74>
    db00:	e0bffb17 	ldw	r2,-20(fp)
    db04:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db08:	e0bffa17 	ldw	r2,-24(fp)
    db0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    db10:	00bfffc4 	movi	r2,-1
    db14:	00000b06 	br	db44 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    db18:	d0a00c17 	ldw	r2,-32720(gp)
    db1c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    db20:	d0e00c17 	ldw	r3,-32720(gp)
    db24:	e0bfff17 	ldw	r2,-4(fp)
    db28:	1885883a 	add	r2,r3,r2
    db2c:	d0a00c15 	stw	r2,-32720(gp)
    db30:	e0bffb17 	ldw	r2,-20(fp)
    db34:	e0bffc15 	stw	r2,-16(fp)
    db38:	e0bffc17 	ldw	r2,-16(fp)
    db3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    db40:	e0bffd17 	ldw	r2,-12(fp)
} 
    db44:	e037883a 	mov	sp,fp
    db48:	df000017 	ldw	fp,0(sp)
    db4c:	dec00104 	addi	sp,sp,4
    db50:	f800283a 	ret

0000db54 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    db54:	defffd04 	addi	sp,sp,-12
    db58:	dfc00215 	stw	ra,8(sp)
    db5c:	df000115 	stw	fp,4(sp)
    db60:	df000104 	addi	fp,sp,4
    db64:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    db68:	e13fff17 	ldw	r4,-4(fp)
    db6c:	000ea140 	call	ea14 <alt_busy_sleep>
}
    db70:	e037883a 	mov	sp,fp
    db74:	dfc00117 	ldw	ra,4(sp)
    db78:	df000017 	ldw	fp,0(sp)
    db7c:	dec00204 	addi	sp,sp,8
    db80:	f800283a 	ret

0000db84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    db84:	defffe04 	addi	sp,sp,-8
    db88:	dfc00115 	stw	ra,4(sp)
    db8c:	df000015 	stw	fp,0(sp)
    db90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db94:	d0a00b17 	ldw	r2,-32724(gp)
    db98:	10000326 	beq	r2,zero,dba8 <alt_get_errno+0x24>
    db9c:	d0a00b17 	ldw	r2,-32724(gp)
    dba0:	103ee83a 	callr	r2
    dba4:	00000106 	br	dbac <alt_get_errno+0x28>
    dba8:	d0a6d104 	addi	r2,gp,-25788
}
    dbac:	e037883a 	mov	sp,fp
    dbb0:	dfc00117 	ldw	ra,4(sp)
    dbb4:	df000017 	ldw	fp,0(sp)
    dbb8:	dec00204 	addi	sp,sp,8
    dbbc:	f800283a 	ret

0000dbc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    dbc0:	defff904 	addi	sp,sp,-28
    dbc4:	dfc00615 	stw	ra,24(sp)
    dbc8:	df000515 	stw	fp,20(sp)
    dbcc:	df000504 	addi	fp,sp,20
    dbd0:	e13ffd15 	stw	r4,-12(fp)
    dbd4:	e17ffe15 	stw	r5,-8(fp)
    dbd8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dbdc:	e0bffd17 	ldw	r2,-12(fp)
    dbe0:	10000816 	blt	r2,zero,dc04 <write+0x44>
    dbe4:	01400304 	movi	r5,12
    dbe8:	e13ffd17 	ldw	r4,-12(fp)
    dbec:	000aa180 	call	aa18 <__mulsi3>
    dbf0:	1007883a 	mov	r3,r2
    dbf4:	00800074 	movhi	r2,1
    dbf8:	10819204 	addi	r2,r2,1608
    dbfc:	1885883a 	add	r2,r3,r2
    dc00:	00000106 	br	dc08 <write+0x48>
    dc04:	0005883a 	mov	r2,zero
    dc08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dc0c:	e0bffb17 	ldw	r2,-20(fp)
    dc10:	10002126 	beq	r2,zero,dc98 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    dc14:	e0bffb17 	ldw	r2,-20(fp)
    dc18:	10800217 	ldw	r2,8(r2)
    dc1c:	108000cc 	andi	r2,r2,3
    dc20:	10001826 	beq	r2,zero,dc84 <write+0xc4>
    dc24:	e0bffb17 	ldw	r2,-20(fp)
    dc28:	10800017 	ldw	r2,0(r2)
    dc2c:	10800617 	ldw	r2,24(r2)
    dc30:	10001426 	beq	r2,zero,dc84 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    dc34:	e0bffb17 	ldw	r2,-20(fp)
    dc38:	10800017 	ldw	r2,0(r2)
    dc3c:	10800617 	ldw	r2,24(r2)
    dc40:	e0ffff17 	ldw	r3,-4(fp)
    dc44:	180d883a 	mov	r6,r3
    dc48:	e17ffe17 	ldw	r5,-8(fp)
    dc4c:	e13ffb17 	ldw	r4,-20(fp)
    dc50:	103ee83a 	callr	r2
    dc54:	e0bffc15 	stw	r2,-16(fp)
    dc58:	e0bffc17 	ldw	r2,-16(fp)
    dc5c:	1000070e 	bge	r2,zero,dc7c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    dc60:	000db840 	call	db84 <alt_get_errno>
    dc64:	1007883a 	mov	r3,r2
    dc68:	e0bffc17 	ldw	r2,-16(fp)
    dc6c:	0085c83a 	sub	r2,zero,r2
    dc70:	18800015 	stw	r2,0(r3)
        return -1;
    dc74:	00bfffc4 	movi	r2,-1
    dc78:	00000c06 	br	dcac <write+0xec>
      }
      return rval;
    dc7c:	e0bffc17 	ldw	r2,-16(fp)
    dc80:	00000a06 	br	dcac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    dc84:	000db840 	call	db84 <alt_get_errno>
    dc88:	1007883a 	mov	r3,r2
    dc8c:	00800344 	movi	r2,13
    dc90:	18800015 	stw	r2,0(r3)
    dc94:	00000406 	br	dca8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    dc98:	000db840 	call	db84 <alt_get_errno>
    dc9c:	1007883a 	mov	r3,r2
    dca0:	00801444 	movi	r2,81
    dca4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    dca8:	00bfffc4 	movi	r2,-1
}
    dcac:	e037883a 	mov	sp,fp
    dcb0:	dfc00117 	ldw	ra,4(sp)
    dcb4:	df000017 	ldw	fp,0(sp)
    dcb8:	dec00204 	addi	sp,sp,8
    dcbc:	f800283a 	ret

0000dcc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    dcc0:	defffd04 	addi	sp,sp,-12
    dcc4:	dfc00215 	stw	ra,8(sp)
    dcc8:	df000115 	stw	fp,4(sp)
    dccc:	df000104 	addi	fp,sp,4
    dcd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    dcd4:	d1600804 	addi	r5,gp,-32736
    dcd8:	e13fff17 	ldw	r4,-4(fp)
    dcdc:	000ebc80 	call	ebc8 <alt_dev_llist_insert>
}
    dce0:	e037883a 	mov	sp,fp
    dce4:	dfc00117 	ldw	ra,4(sp)
    dce8:	df000017 	ldw	fp,0(sp)
    dcec:	dec00204 	addi	sp,sp,8
    dcf0:	f800283a 	ret

0000dcf4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    dcf4:	defffd04 	addi	sp,sp,-12
    dcf8:	dfc00215 	stw	ra,8(sp)
    dcfc:	df000115 	stw	fp,4(sp)
    dd00:	df000104 	addi	fp,sp,4
    dd04:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    dd08:	000f4b40 	call	f4b4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    dd0c:	00800044 	movi	r2,1
    dd10:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    dd14:	0001883a 	nop
    dd18:	e037883a 	mov	sp,fp
    dd1c:	dfc00117 	ldw	ra,4(sp)
    dd20:	df000017 	ldw	fp,0(sp)
    dd24:	dec00204 	addi	sp,sp,8
    dd28:	f800283a 	ret

0000dd2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    dd2c:	defffe04 	addi	sp,sp,-8
    dd30:	dfc00115 	stw	ra,4(sp)
    dd34:	df000015 	stw	fp,0(sp)
    dd38:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
    dd3c:	01c0fa04 	movi	r7,1000
    dd40:	000d883a 	mov	r6,zero
    dd44:	000b883a 	mov	r5,zero
    dd48:	010000b4 	movhi	r4,2
    dd4c:	21040004 	addi	r4,r4,4096
    dd50:	000e86c0 	call	e86c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    dd54:	01800044 	movi	r6,1
    dd58:	000b883a 	mov	r5,zero
    dd5c:	01000074 	movhi	r4,1
    dd60:	2101fc04 	addi	r4,r4,2032
    dd64:	000def00 	call	def0 <altera_avalon_jtag_uart_init>
    dd68:	01000074 	movhi	r4,1
    dd6c:	2101f204 	addi	r4,r4,1992
    dd70:	000dcc00 	call	dcc0 <alt_dev_reg>
}
    dd74:	0001883a 	nop
    dd78:	e037883a 	mov	sp,fp
    dd7c:	dfc00117 	ldw	ra,4(sp)
    dd80:	df000017 	ldw	fp,0(sp)
    dd84:	dec00204 	addi	sp,sp,8
    dd88:	f800283a 	ret

0000dd8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    dd8c:	defffa04 	addi	sp,sp,-24
    dd90:	dfc00515 	stw	ra,20(sp)
    dd94:	df000415 	stw	fp,16(sp)
    dd98:	df000404 	addi	fp,sp,16
    dd9c:	e13ffd15 	stw	r4,-12(fp)
    dda0:	e17ffe15 	stw	r5,-8(fp)
    dda4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    dda8:	e0bffd17 	ldw	r2,-12(fp)
    ddac:	10800017 	ldw	r2,0(r2)
    ddb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ddb4:	e0bffc17 	ldw	r2,-16(fp)
    ddb8:	10c00a04 	addi	r3,r2,40
    ddbc:	e0bffd17 	ldw	r2,-12(fp)
    ddc0:	10800217 	ldw	r2,8(r2)
    ddc4:	100f883a 	mov	r7,r2
    ddc8:	e1bfff17 	ldw	r6,-4(fp)
    ddcc:	e17ffe17 	ldw	r5,-8(fp)
    ddd0:	1809883a 	mov	r4,r3
    ddd4:	000e3b40 	call	e3b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    ddd8:	e037883a 	mov	sp,fp
    dddc:	dfc00117 	ldw	ra,4(sp)
    dde0:	df000017 	ldw	fp,0(sp)
    dde4:	dec00204 	addi	sp,sp,8
    dde8:	f800283a 	ret

0000ddec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    ddec:	defffa04 	addi	sp,sp,-24
    ddf0:	dfc00515 	stw	ra,20(sp)
    ddf4:	df000415 	stw	fp,16(sp)
    ddf8:	df000404 	addi	fp,sp,16
    ddfc:	e13ffd15 	stw	r4,-12(fp)
    de00:	e17ffe15 	stw	r5,-8(fp)
    de04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    de08:	e0bffd17 	ldw	r2,-12(fp)
    de0c:	10800017 	ldw	r2,0(r2)
    de10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    de14:	e0bffc17 	ldw	r2,-16(fp)
    de18:	10c00a04 	addi	r3,r2,40
    de1c:	e0bffd17 	ldw	r2,-12(fp)
    de20:	10800217 	ldw	r2,8(r2)
    de24:	100f883a 	mov	r7,r2
    de28:	e1bfff17 	ldw	r6,-4(fp)
    de2c:	e17ffe17 	ldw	r5,-8(fp)
    de30:	1809883a 	mov	r4,r3
    de34:	000e5d00 	call	e5d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    de38:	e037883a 	mov	sp,fp
    de3c:	dfc00117 	ldw	ra,4(sp)
    de40:	df000017 	ldw	fp,0(sp)
    de44:	dec00204 	addi	sp,sp,8
    de48:	f800283a 	ret

0000de4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    de4c:	defffc04 	addi	sp,sp,-16
    de50:	dfc00315 	stw	ra,12(sp)
    de54:	df000215 	stw	fp,8(sp)
    de58:	df000204 	addi	fp,sp,8
    de5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    de60:	e0bfff17 	ldw	r2,-4(fp)
    de64:	10800017 	ldw	r2,0(r2)
    de68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    de6c:	e0bffe17 	ldw	r2,-8(fp)
    de70:	10c00a04 	addi	r3,r2,40
    de74:	e0bfff17 	ldw	r2,-4(fp)
    de78:	10800217 	ldw	r2,8(r2)
    de7c:	100b883a 	mov	r5,r2
    de80:	1809883a 	mov	r4,r3
    de84:	000e25c0 	call	e25c <altera_avalon_jtag_uart_close>
}
    de88:	e037883a 	mov	sp,fp
    de8c:	dfc00117 	ldw	ra,4(sp)
    de90:	df000017 	ldw	fp,0(sp)
    de94:	dec00204 	addi	sp,sp,8
    de98:	f800283a 	ret

0000de9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    de9c:	defffa04 	addi	sp,sp,-24
    dea0:	dfc00515 	stw	ra,20(sp)
    dea4:	df000415 	stw	fp,16(sp)
    dea8:	df000404 	addi	fp,sp,16
    deac:	e13ffd15 	stw	r4,-12(fp)
    deb0:	e17ffe15 	stw	r5,-8(fp)
    deb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    deb8:	e0bffd17 	ldw	r2,-12(fp)
    debc:	10800017 	ldw	r2,0(r2)
    dec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    dec4:	e0bffc17 	ldw	r2,-16(fp)
    dec8:	10800a04 	addi	r2,r2,40
    decc:	e1bfff17 	ldw	r6,-4(fp)
    ded0:	e17ffe17 	ldw	r5,-8(fp)
    ded4:	1009883a 	mov	r4,r2
    ded8:	000e2c40 	call	e2c4 <altera_avalon_jtag_uart_ioctl>
}
    dedc:	e037883a 	mov	sp,fp
    dee0:	dfc00117 	ldw	ra,4(sp)
    dee4:	df000017 	ldw	fp,0(sp)
    dee8:	dec00204 	addi	sp,sp,8
    deec:	f800283a 	ret

0000def0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    def0:	defffa04 	addi	sp,sp,-24
    def4:	dfc00515 	stw	ra,20(sp)
    def8:	df000415 	stw	fp,16(sp)
    defc:	df000404 	addi	fp,sp,16
    df00:	e13ffd15 	stw	r4,-12(fp)
    df04:	e17ffe15 	stw	r5,-8(fp)
    df08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    df0c:	e0bffd17 	ldw	r2,-12(fp)
    df10:	00c00044 	movi	r3,1
    df14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    df18:	e0bffd17 	ldw	r2,-12(fp)
    df1c:	10800017 	ldw	r2,0(r2)
    df20:	10800104 	addi	r2,r2,4
    df24:	1007883a 	mov	r3,r2
    df28:	e0bffd17 	ldw	r2,-12(fp)
    df2c:	10800817 	ldw	r2,32(r2)
    df30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    df34:	e0bffe17 	ldw	r2,-8(fp)
    df38:	e0ffff17 	ldw	r3,-4(fp)
    df3c:	d8000015 	stw	zero,0(sp)
    df40:	e1fffd17 	ldw	r7,-12(fp)
    df44:	01800074 	movhi	r6,1
    df48:	31b7ec04 	addi	r6,r6,-8272
    df4c:	180b883a 	mov	r5,r3
    df50:	1009883a 	mov	r4,r2
    df54:	000ec8c0 	call	ec8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    df58:	e0bffd17 	ldw	r2,-12(fp)
    df5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    df60:	e0bffd17 	ldw	r2,-12(fp)
    df64:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    df68:	d0e6d617 	ldw	r3,-25768(gp)
    df6c:	e1fffd17 	ldw	r7,-12(fp)
    df70:	01800074 	movhi	r6,1
    df74:	31b86f04 	addi	r6,r6,-7748
    df78:	180b883a 	mov	r5,r3
    df7c:	1009883a 	mov	r4,r2
    df80:	000e8e80 	call	e8e8 <alt_alarm_start>
    df84:	1000040e 	bge	r2,zero,df98 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    df88:	e0fffd17 	ldw	r3,-12(fp)
    df8c:	00a00034 	movhi	r2,32768
    df90:	10bfffc4 	addi	r2,r2,-1
    df94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    df98:	0001883a 	nop
    df9c:	e037883a 	mov	sp,fp
    dfa0:	dfc00117 	ldw	ra,4(sp)
    dfa4:	df000017 	ldw	fp,0(sp)
    dfa8:	dec00204 	addi	sp,sp,8
    dfac:	f800283a 	ret

0000dfb0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    dfb0:	defff804 	addi	sp,sp,-32
    dfb4:	df000715 	stw	fp,28(sp)
    dfb8:	df000704 	addi	fp,sp,28
    dfbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    dfc0:	e0bfff17 	ldw	r2,-4(fp)
    dfc4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    dfc8:	e0bffb17 	ldw	r2,-20(fp)
    dfcc:	10800017 	ldw	r2,0(r2)
    dfd0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    dfd4:	e0bffc17 	ldw	r2,-16(fp)
    dfd8:	10800104 	addi	r2,r2,4
    dfdc:	10800037 	ldwio	r2,0(r2)
    dfe0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    dfe4:	e0bffd17 	ldw	r2,-12(fp)
    dfe8:	1080c00c 	andi	r2,r2,768
    dfec:	10006d26 	beq	r2,zero,e1a4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    dff0:	e0bffd17 	ldw	r2,-12(fp)
    dff4:	1080400c 	andi	r2,r2,256
    dff8:	10003526 	beq	r2,zero,e0d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    dffc:	00800074 	movhi	r2,1
    e000:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e004:	e0bffb17 	ldw	r2,-20(fp)
    e008:	10800a17 	ldw	r2,40(r2)
    e00c:	10800044 	addi	r2,r2,1
    e010:	1081ffcc 	andi	r2,r2,2047
    e014:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e018:	e0bffb17 	ldw	r2,-20(fp)
    e01c:	10c00b17 	ldw	r3,44(r2)
    e020:	e0bffe17 	ldw	r2,-8(fp)
    e024:	18801526 	beq	r3,r2,e07c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e028:	e0bffc17 	ldw	r2,-16(fp)
    e02c:	10800037 	ldwio	r2,0(r2)
    e030:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e034:	e0bff917 	ldw	r2,-28(fp)
    e038:	10a0000c 	andi	r2,r2,32768
    e03c:	10001126 	beq	r2,zero,e084 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e040:	e0bffb17 	ldw	r2,-20(fp)
    e044:	10800a17 	ldw	r2,40(r2)
    e048:	e0fff917 	ldw	r3,-28(fp)
    e04c:	1809883a 	mov	r4,r3
    e050:	e0fffb17 	ldw	r3,-20(fp)
    e054:	1885883a 	add	r2,r3,r2
    e058:	10800e04 	addi	r2,r2,56
    e05c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e060:	e0bffb17 	ldw	r2,-20(fp)
    e064:	10800a17 	ldw	r2,40(r2)
    e068:	10800044 	addi	r2,r2,1
    e06c:	10c1ffcc 	andi	r3,r2,2047
    e070:	e0bffb17 	ldw	r2,-20(fp)
    e074:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e078:	003fe206 	br	e004 <__alt_data_end+0xfffee004>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e07c:	0001883a 	nop
    e080:	00000106 	br	e088 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e084:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e088:	e0bff917 	ldw	r2,-28(fp)
    e08c:	10bfffec 	andhi	r2,r2,65535
    e090:	10000f26 	beq	r2,zero,e0d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e094:	e0bffb17 	ldw	r2,-20(fp)
    e098:	10c00817 	ldw	r3,32(r2)
    e09c:	00bfff84 	movi	r2,-2
    e0a0:	1886703a 	and	r3,r3,r2
    e0a4:	e0bffb17 	ldw	r2,-20(fp)
    e0a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e0ac:	e0bffc17 	ldw	r2,-16(fp)
    e0b0:	10800104 	addi	r2,r2,4
    e0b4:	1007883a 	mov	r3,r2
    e0b8:	e0bffb17 	ldw	r2,-20(fp)
    e0bc:	10800817 	ldw	r2,32(r2)
    e0c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e0c4:	e0bffc17 	ldw	r2,-16(fp)
    e0c8:	10800104 	addi	r2,r2,4
    e0cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e0d0:	e0bffd17 	ldw	r2,-12(fp)
    e0d4:	1080800c 	andi	r2,r2,512
    e0d8:	103fbe26 	beq	r2,zero,dfd4 <__alt_data_end+0xfffedfd4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e0dc:	e0bffd17 	ldw	r2,-12(fp)
    e0e0:	1004d43a 	srli	r2,r2,16
    e0e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e0e8:	00001406 	br	e13c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e0ec:	e0bffc17 	ldw	r2,-16(fp)
    e0f0:	e0fffb17 	ldw	r3,-20(fp)
    e0f4:	18c00d17 	ldw	r3,52(r3)
    e0f8:	e13ffb17 	ldw	r4,-20(fp)
    e0fc:	20c7883a 	add	r3,r4,r3
    e100:	18c20e04 	addi	r3,r3,2104
    e104:	18c00003 	ldbu	r3,0(r3)
    e108:	18c03fcc 	andi	r3,r3,255
    e10c:	18c0201c 	xori	r3,r3,128
    e110:	18ffe004 	addi	r3,r3,-128
    e114:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e118:	e0bffb17 	ldw	r2,-20(fp)
    e11c:	10800d17 	ldw	r2,52(r2)
    e120:	10800044 	addi	r2,r2,1
    e124:	10c1ffcc 	andi	r3,r2,2047
    e128:	e0bffb17 	ldw	r2,-20(fp)
    e12c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e130:	e0bffa17 	ldw	r2,-24(fp)
    e134:	10bfffc4 	addi	r2,r2,-1
    e138:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e13c:	e0bffa17 	ldw	r2,-24(fp)
    e140:	10000526 	beq	r2,zero,e158 <altera_avalon_jtag_uart_irq+0x1a8>
    e144:	e0bffb17 	ldw	r2,-20(fp)
    e148:	10c00d17 	ldw	r3,52(r2)
    e14c:	e0bffb17 	ldw	r2,-20(fp)
    e150:	10800c17 	ldw	r2,48(r2)
    e154:	18bfe51e 	bne	r3,r2,e0ec <__alt_data_end+0xfffee0ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e158:	e0bffa17 	ldw	r2,-24(fp)
    e15c:	103f9d26 	beq	r2,zero,dfd4 <__alt_data_end+0xfffedfd4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e160:	e0bffb17 	ldw	r2,-20(fp)
    e164:	10c00817 	ldw	r3,32(r2)
    e168:	00bfff44 	movi	r2,-3
    e16c:	1886703a 	and	r3,r3,r2
    e170:	e0bffb17 	ldw	r2,-20(fp)
    e174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e178:	e0bffb17 	ldw	r2,-20(fp)
    e17c:	10800017 	ldw	r2,0(r2)
    e180:	10800104 	addi	r2,r2,4
    e184:	1007883a 	mov	r3,r2
    e188:	e0bffb17 	ldw	r2,-20(fp)
    e18c:	10800817 	ldw	r2,32(r2)
    e190:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e194:	e0bffc17 	ldw	r2,-16(fp)
    e198:	10800104 	addi	r2,r2,4
    e19c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e1a0:	003f8c06 	br	dfd4 <__alt_data_end+0xfffedfd4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e1a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e1a8:	0001883a 	nop
    e1ac:	e037883a 	mov	sp,fp
    e1b0:	df000017 	ldw	fp,0(sp)
    e1b4:	dec00104 	addi	sp,sp,4
    e1b8:	f800283a 	ret

0000e1bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e1bc:	defff804 	addi	sp,sp,-32
    e1c0:	df000715 	stw	fp,28(sp)
    e1c4:	df000704 	addi	fp,sp,28
    e1c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e1cc:	e0bffb17 	ldw	r2,-20(fp)
    e1d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e1d4:	e0bff917 	ldw	r2,-28(fp)
    e1d8:	10800017 	ldw	r2,0(r2)
    e1dc:	10800104 	addi	r2,r2,4
    e1e0:	10800037 	ldwio	r2,0(r2)
    e1e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e1e8:	e0bffa17 	ldw	r2,-24(fp)
    e1ec:	1081000c 	andi	r2,r2,1024
    e1f0:	10000b26 	beq	r2,zero,e220 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e1f4:	e0bff917 	ldw	r2,-28(fp)
    e1f8:	10800017 	ldw	r2,0(r2)
    e1fc:	10800104 	addi	r2,r2,4
    e200:	1007883a 	mov	r3,r2
    e204:	e0bff917 	ldw	r2,-28(fp)
    e208:	10800817 	ldw	r2,32(r2)
    e20c:	10810014 	ori	r2,r2,1024
    e210:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e214:	e0bff917 	ldw	r2,-28(fp)
    e218:	10000915 	stw	zero,36(r2)
    e21c:	00000a06 	br	e248 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e220:	e0bff917 	ldw	r2,-28(fp)
    e224:	10c00917 	ldw	r3,36(r2)
    e228:	00a00034 	movhi	r2,32768
    e22c:	10bfff04 	addi	r2,r2,-4
    e230:	10c00536 	bltu	r2,r3,e248 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e234:	e0bff917 	ldw	r2,-28(fp)
    e238:	10800917 	ldw	r2,36(r2)
    e23c:	10c00044 	addi	r3,r2,1
    e240:	e0bff917 	ldw	r2,-28(fp)
    e244:	10c00915 	stw	r3,36(r2)
    e248:	d0a6d617 	ldw	r2,-25768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e24c:	e037883a 	mov	sp,fp
    e250:	df000017 	ldw	fp,0(sp)
    e254:	dec00104 	addi	sp,sp,4
    e258:	f800283a 	ret

0000e25c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e25c:	defffd04 	addi	sp,sp,-12
    e260:	df000215 	stw	fp,8(sp)
    e264:	df000204 	addi	fp,sp,8
    e268:	e13ffe15 	stw	r4,-8(fp)
    e26c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e270:	00000506 	br	e288 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e274:	e0bfff17 	ldw	r2,-4(fp)
    e278:	1090000c 	andi	r2,r2,16384
    e27c:	10000226 	beq	r2,zero,e288 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e280:	00bffd44 	movi	r2,-11
    e284:	00000b06 	br	e2b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e288:	e0bffe17 	ldw	r2,-8(fp)
    e28c:	10c00d17 	ldw	r3,52(r2)
    e290:	e0bffe17 	ldw	r2,-8(fp)
    e294:	10800c17 	ldw	r2,48(r2)
    e298:	18800526 	beq	r3,r2,e2b0 <altera_avalon_jtag_uart_close+0x54>
    e29c:	e0bffe17 	ldw	r2,-8(fp)
    e2a0:	10c00917 	ldw	r3,36(r2)
    e2a4:	e0bffe17 	ldw	r2,-8(fp)
    e2a8:	10800117 	ldw	r2,4(r2)
    e2ac:	18bff136 	bltu	r3,r2,e274 <__alt_data_end+0xfffee274>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e2b0:	0005883a 	mov	r2,zero
}
    e2b4:	e037883a 	mov	sp,fp
    e2b8:	df000017 	ldw	fp,0(sp)
    e2bc:	dec00104 	addi	sp,sp,4
    e2c0:	f800283a 	ret

0000e2c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e2c4:	defffa04 	addi	sp,sp,-24
    e2c8:	df000515 	stw	fp,20(sp)
    e2cc:	df000504 	addi	fp,sp,20
    e2d0:	e13ffd15 	stw	r4,-12(fp)
    e2d4:	e17ffe15 	stw	r5,-8(fp)
    e2d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e2dc:	00bff9c4 	movi	r2,-25
    e2e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e2e4:	e0bffe17 	ldw	r2,-8(fp)
    e2e8:	10da8060 	cmpeqi	r3,r2,27137
    e2ec:	1800031e 	bne	r3,zero,e2fc <altera_avalon_jtag_uart_ioctl+0x38>
    e2f0:	109a80a0 	cmpeqi	r2,r2,27138
    e2f4:	1000181e 	bne	r2,zero,e358 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e2f8:	00002906 	br	e3a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e2fc:	e0bffd17 	ldw	r2,-12(fp)
    e300:	10c00117 	ldw	r3,4(r2)
    e304:	00a00034 	movhi	r2,32768
    e308:	10bfffc4 	addi	r2,r2,-1
    e30c:	18802126 	beq	r3,r2,e394 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e310:	e0bfff17 	ldw	r2,-4(fp)
    e314:	10800017 	ldw	r2,0(r2)
    e318:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e31c:	e0bffc17 	ldw	r2,-16(fp)
    e320:	10800090 	cmplti	r2,r2,2
    e324:	1000061e 	bne	r2,zero,e340 <altera_avalon_jtag_uart_ioctl+0x7c>
    e328:	e0fffc17 	ldw	r3,-16(fp)
    e32c:	00a00034 	movhi	r2,32768
    e330:	10bfffc4 	addi	r2,r2,-1
    e334:	18800226 	beq	r3,r2,e340 <altera_avalon_jtag_uart_ioctl+0x7c>
    e338:	e0bffc17 	ldw	r2,-16(fp)
    e33c:	00000206 	br	e348 <altera_avalon_jtag_uart_ioctl+0x84>
    e340:	00a00034 	movhi	r2,32768
    e344:	10bfff84 	addi	r2,r2,-2
    e348:	e0fffd17 	ldw	r3,-12(fp)
    e34c:	18800115 	stw	r2,4(r3)
      rc = 0;
    e350:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e354:	00000f06 	br	e394 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e358:	e0bffd17 	ldw	r2,-12(fp)
    e35c:	10c00117 	ldw	r3,4(r2)
    e360:	00a00034 	movhi	r2,32768
    e364:	10bfffc4 	addi	r2,r2,-1
    e368:	18800c26 	beq	r3,r2,e39c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e36c:	e0bffd17 	ldw	r2,-12(fp)
    e370:	10c00917 	ldw	r3,36(r2)
    e374:	e0bffd17 	ldw	r2,-12(fp)
    e378:	10800117 	ldw	r2,4(r2)
    e37c:	1885803a 	cmpltu	r2,r3,r2
    e380:	10c03fcc 	andi	r3,r2,255
    e384:	e0bfff17 	ldw	r2,-4(fp)
    e388:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e38c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e390:	00000206 	br	e39c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e394:	0001883a 	nop
    e398:	00000106 	br	e3a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e39c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e3a0:	e0bffb17 	ldw	r2,-20(fp)
}
    e3a4:	e037883a 	mov	sp,fp
    e3a8:	df000017 	ldw	fp,0(sp)
    e3ac:	dec00104 	addi	sp,sp,4
    e3b0:	f800283a 	ret

0000e3b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e3b4:	defff304 	addi	sp,sp,-52
    e3b8:	dfc00c15 	stw	ra,48(sp)
    e3bc:	df000b15 	stw	fp,44(sp)
    e3c0:	df000b04 	addi	fp,sp,44
    e3c4:	e13ffc15 	stw	r4,-16(fp)
    e3c8:	e17ffd15 	stw	r5,-12(fp)
    e3cc:	e1bffe15 	stw	r6,-8(fp)
    e3d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e3d4:	e0bffd17 	ldw	r2,-12(fp)
    e3d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e3dc:	00004706 	br	e4fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e3e0:	e0bffc17 	ldw	r2,-16(fp)
    e3e4:	10800a17 	ldw	r2,40(r2)
    e3e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e3ec:	e0bffc17 	ldw	r2,-16(fp)
    e3f0:	10800b17 	ldw	r2,44(r2)
    e3f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e3f8:	e0fff717 	ldw	r3,-36(fp)
    e3fc:	e0bff817 	ldw	r2,-32(fp)
    e400:	18800536 	bltu	r3,r2,e418 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e404:	e0fff717 	ldw	r3,-36(fp)
    e408:	e0bff817 	ldw	r2,-32(fp)
    e40c:	1885c83a 	sub	r2,r3,r2
    e410:	e0bff615 	stw	r2,-40(fp)
    e414:	00000406 	br	e428 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e418:	00c20004 	movi	r3,2048
    e41c:	e0bff817 	ldw	r2,-32(fp)
    e420:	1885c83a 	sub	r2,r3,r2
    e424:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e428:	e0bff617 	ldw	r2,-40(fp)
    e42c:	10001e26 	beq	r2,zero,e4a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e430:	e0fffe17 	ldw	r3,-8(fp)
    e434:	e0bff617 	ldw	r2,-40(fp)
    e438:	1880022e 	bgeu	r3,r2,e444 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e43c:	e0bffe17 	ldw	r2,-8(fp)
    e440:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e444:	e0bffc17 	ldw	r2,-16(fp)
    e448:	10c00e04 	addi	r3,r2,56
    e44c:	e0bff817 	ldw	r2,-32(fp)
    e450:	1885883a 	add	r2,r3,r2
    e454:	e1bff617 	ldw	r6,-40(fp)
    e458:	100b883a 	mov	r5,r2
    e45c:	e13ff517 	ldw	r4,-44(fp)
    e460:	0005f980 	call	5f98 <memcpy>
      ptr   += n;
    e464:	e0fff517 	ldw	r3,-44(fp)
    e468:	e0bff617 	ldw	r2,-40(fp)
    e46c:	1885883a 	add	r2,r3,r2
    e470:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e474:	e0fffe17 	ldw	r3,-8(fp)
    e478:	e0bff617 	ldw	r2,-40(fp)
    e47c:	1885c83a 	sub	r2,r3,r2
    e480:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e484:	e0fff817 	ldw	r3,-32(fp)
    e488:	e0bff617 	ldw	r2,-40(fp)
    e48c:	1885883a 	add	r2,r3,r2
    e490:	10c1ffcc 	andi	r3,r2,2047
    e494:	e0bffc17 	ldw	r2,-16(fp)
    e498:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e49c:	e0bffe17 	ldw	r2,-8(fp)
    e4a0:	00bfcf16 	blt	zero,r2,e3e0 <__alt_data_end+0xfffee3e0>
    e4a4:	00000106 	br	e4ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e4a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e4ac:	e0fff517 	ldw	r3,-44(fp)
    e4b0:	e0bffd17 	ldw	r2,-12(fp)
    e4b4:	1880141e 	bne	r3,r2,e508 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e4b8:	e0bfff17 	ldw	r2,-4(fp)
    e4bc:	1090000c 	andi	r2,r2,16384
    e4c0:	1000131e 	bne	r2,zero,e510 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e4c4:	0001883a 	nop
    e4c8:	e0bffc17 	ldw	r2,-16(fp)
    e4cc:	10c00a17 	ldw	r3,40(r2)
    e4d0:	e0bff717 	ldw	r2,-36(fp)
    e4d4:	1880051e 	bne	r3,r2,e4ec <altera_avalon_jtag_uart_read+0x138>
    e4d8:	e0bffc17 	ldw	r2,-16(fp)
    e4dc:	10c00917 	ldw	r3,36(r2)
    e4e0:	e0bffc17 	ldw	r2,-16(fp)
    e4e4:	10800117 	ldw	r2,4(r2)
    e4e8:	18bff736 	bltu	r3,r2,e4c8 <__alt_data_end+0xfffee4c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e4ec:	e0bffc17 	ldw	r2,-16(fp)
    e4f0:	10c00a17 	ldw	r3,40(r2)
    e4f4:	e0bff717 	ldw	r2,-36(fp)
    e4f8:	18800726 	beq	r3,r2,e518 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e4fc:	e0bffe17 	ldw	r2,-8(fp)
    e500:	00bfb716 	blt	zero,r2,e3e0 <__alt_data_end+0xfffee3e0>
    e504:	00000506 	br	e51c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e508:	0001883a 	nop
    e50c:	00000306 	br	e51c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e510:	0001883a 	nop
    e514:	00000106 	br	e51c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e518:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    e51c:	e0fff517 	ldw	r3,-44(fp)
    e520:	e0bffd17 	ldw	r2,-12(fp)
    e524:	18801826 	beq	r3,r2,e588 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e528:	0005303a 	rdctl	r2,status
    e52c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e530:	e0fffb17 	ldw	r3,-20(fp)
    e534:	00bfff84 	movi	r2,-2
    e538:	1884703a 	and	r2,r3,r2
    e53c:	1001703a 	wrctl	status,r2
  
  return context;
    e540:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    e544:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e548:	e0bffc17 	ldw	r2,-16(fp)
    e54c:	10800817 	ldw	r2,32(r2)
    e550:	10c00054 	ori	r3,r2,1
    e554:	e0bffc17 	ldw	r2,-16(fp)
    e558:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e55c:	e0bffc17 	ldw	r2,-16(fp)
    e560:	10800017 	ldw	r2,0(r2)
    e564:	10800104 	addi	r2,r2,4
    e568:	1007883a 	mov	r3,r2
    e56c:	e0bffc17 	ldw	r2,-16(fp)
    e570:	10800817 	ldw	r2,32(r2)
    e574:	18800035 	stwio	r2,0(r3)
    e578:	e0bffa17 	ldw	r2,-24(fp)
    e57c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e580:	e0bff917 	ldw	r2,-28(fp)
    e584:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    e588:	e0fff517 	ldw	r3,-44(fp)
    e58c:	e0bffd17 	ldw	r2,-12(fp)
    e590:	18800426 	beq	r3,r2,e5a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    e594:	e0fff517 	ldw	r3,-44(fp)
    e598:	e0bffd17 	ldw	r2,-12(fp)
    e59c:	1885c83a 	sub	r2,r3,r2
    e5a0:	00000606 	br	e5bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    e5a4:	e0bfff17 	ldw	r2,-4(fp)
    e5a8:	1090000c 	andi	r2,r2,16384
    e5ac:	10000226 	beq	r2,zero,e5b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    e5b0:	00bffd44 	movi	r2,-11
    e5b4:	00000106 	br	e5bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    e5b8:	00bffec4 	movi	r2,-5
}
    e5bc:	e037883a 	mov	sp,fp
    e5c0:	dfc00117 	ldw	ra,4(sp)
    e5c4:	df000017 	ldw	fp,0(sp)
    e5c8:	dec00204 	addi	sp,sp,8
    e5cc:	f800283a 	ret

0000e5d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    e5d0:	defff304 	addi	sp,sp,-52
    e5d4:	dfc00c15 	stw	ra,48(sp)
    e5d8:	df000b15 	stw	fp,44(sp)
    e5dc:	df000b04 	addi	fp,sp,44
    e5e0:	e13ffc15 	stw	r4,-16(fp)
    e5e4:	e17ffd15 	stw	r5,-12(fp)
    e5e8:	e1bffe15 	stw	r6,-8(fp)
    e5ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    e5f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    e5f4:	e0bffd17 	ldw	r2,-12(fp)
    e5f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e5fc:	00003706 	br	e6dc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    e600:	e0bffc17 	ldw	r2,-16(fp)
    e604:	10800c17 	ldw	r2,48(r2)
    e608:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    e60c:	e0bffc17 	ldw	r2,-16(fp)
    e610:	10800d17 	ldw	r2,52(r2)
    e614:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    e618:	e0fff917 	ldw	r3,-28(fp)
    e61c:	e0bff517 	ldw	r2,-44(fp)
    e620:	1880062e 	bgeu	r3,r2,e63c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    e624:	e0fff517 	ldw	r3,-44(fp)
    e628:	e0bff917 	ldw	r2,-28(fp)
    e62c:	1885c83a 	sub	r2,r3,r2
    e630:	10bfffc4 	addi	r2,r2,-1
    e634:	e0bff615 	stw	r2,-40(fp)
    e638:	00000b06 	br	e668 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    e63c:	e0bff517 	ldw	r2,-44(fp)
    e640:	10000526 	beq	r2,zero,e658 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    e644:	00c20004 	movi	r3,2048
    e648:	e0bff917 	ldw	r2,-28(fp)
    e64c:	1885c83a 	sub	r2,r3,r2
    e650:	e0bff615 	stw	r2,-40(fp)
    e654:	00000406 	br	e668 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    e658:	00c1ffc4 	movi	r3,2047
    e65c:	e0bff917 	ldw	r2,-28(fp)
    e660:	1885c83a 	sub	r2,r3,r2
    e664:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e668:	e0bff617 	ldw	r2,-40(fp)
    e66c:	10001e26 	beq	r2,zero,e6e8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    e670:	e0fffe17 	ldw	r3,-8(fp)
    e674:	e0bff617 	ldw	r2,-40(fp)
    e678:	1880022e 	bgeu	r3,r2,e684 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    e67c:	e0bffe17 	ldw	r2,-8(fp)
    e680:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    e684:	e0bffc17 	ldw	r2,-16(fp)
    e688:	10c20e04 	addi	r3,r2,2104
    e68c:	e0bff917 	ldw	r2,-28(fp)
    e690:	1885883a 	add	r2,r3,r2
    e694:	e1bff617 	ldw	r6,-40(fp)
    e698:	e17ffd17 	ldw	r5,-12(fp)
    e69c:	1009883a 	mov	r4,r2
    e6a0:	0005f980 	call	5f98 <memcpy>
      ptr   += n;
    e6a4:	e0fffd17 	ldw	r3,-12(fp)
    e6a8:	e0bff617 	ldw	r2,-40(fp)
    e6ac:	1885883a 	add	r2,r3,r2
    e6b0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    e6b4:	e0fffe17 	ldw	r3,-8(fp)
    e6b8:	e0bff617 	ldw	r2,-40(fp)
    e6bc:	1885c83a 	sub	r2,r3,r2
    e6c0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e6c4:	e0fff917 	ldw	r3,-28(fp)
    e6c8:	e0bff617 	ldw	r2,-40(fp)
    e6cc:	1885883a 	add	r2,r3,r2
    e6d0:	10c1ffcc 	andi	r3,r2,2047
    e6d4:	e0bffc17 	ldw	r2,-16(fp)
    e6d8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    e6dc:	e0bffe17 	ldw	r2,-8(fp)
    e6e0:	00bfc716 	blt	zero,r2,e600 <__alt_data_end+0xfffee600>
    e6e4:	00000106 	br	e6ec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    e6e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6ec:	0005303a 	rdctl	r2,status
    e6f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6f4:	e0fffb17 	ldw	r3,-20(fp)
    e6f8:	00bfff84 	movi	r2,-2
    e6fc:	1884703a 	and	r2,r3,r2
    e700:	1001703a 	wrctl	status,r2
  
  return context;
    e704:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    e708:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e70c:	e0bffc17 	ldw	r2,-16(fp)
    e710:	10800817 	ldw	r2,32(r2)
    e714:	10c00094 	ori	r3,r2,2
    e718:	e0bffc17 	ldw	r2,-16(fp)
    e71c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e720:	e0bffc17 	ldw	r2,-16(fp)
    e724:	10800017 	ldw	r2,0(r2)
    e728:	10800104 	addi	r2,r2,4
    e72c:	1007883a 	mov	r3,r2
    e730:	e0bffc17 	ldw	r2,-16(fp)
    e734:	10800817 	ldw	r2,32(r2)
    e738:	18800035 	stwio	r2,0(r3)
    e73c:	e0bffa17 	ldw	r2,-24(fp)
    e740:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e744:	e0bff817 	ldw	r2,-32(fp)
    e748:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e74c:	e0bffe17 	ldw	r2,-8(fp)
    e750:	0080100e 	bge	zero,r2,e794 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e754:	e0bfff17 	ldw	r2,-4(fp)
    e758:	1090000c 	andi	r2,r2,16384
    e75c:	1000101e 	bne	r2,zero,e7a0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e760:	0001883a 	nop
    e764:	e0bffc17 	ldw	r2,-16(fp)
    e768:	10c00d17 	ldw	r3,52(r2)
    e76c:	e0bff517 	ldw	r2,-44(fp)
    e770:	1880051e 	bne	r3,r2,e788 <altera_avalon_jtag_uart_write+0x1b8>
    e774:	e0bffc17 	ldw	r2,-16(fp)
    e778:	10c00917 	ldw	r3,36(r2)
    e77c:	e0bffc17 	ldw	r2,-16(fp)
    e780:	10800117 	ldw	r2,4(r2)
    e784:	18bff736 	bltu	r3,r2,e764 <__alt_data_end+0xfffee764>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e788:	e0bffc17 	ldw	r2,-16(fp)
    e78c:	10800917 	ldw	r2,36(r2)
    e790:	1000051e 	bne	r2,zero,e7a8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e794:	e0bffe17 	ldw	r2,-8(fp)
    e798:	00bfd016 	blt	zero,r2,e6dc <__alt_data_end+0xfffee6dc>
    e79c:	00000306 	br	e7ac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e7a0:	0001883a 	nop
    e7a4:	00000106 	br	e7ac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e7a8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e7ac:	e0fffd17 	ldw	r3,-12(fp)
    e7b0:	e0bff717 	ldw	r2,-36(fp)
    e7b4:	18800426 	beq	r3,r2,e7c8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e7b8:	e0fffd17 	ldw	r3,-12(fp)
    e7bc:	e0bff717 	ldw	r2,-36(fp)
    e7c0:	1885c83a 	sub	r2,r3,r2
    e7c4:	00000606 	br	e7e0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e7c8:	e0bfff17 	ldw	r2,-4(fp)
    e7cc:	1090000c 	andi	r2,r2,16384
    e7d0:	10000226 	beq	r2,zero,e7dc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e7d4:	00bffd44 	movi	r2,-11
    e7d8:	00000106 	br	e7e0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e7dc:	00bffec4 	movi	r2,-5
}
    e7e0:	e037883a 	mov	sp,fp
    e7e4:	dfc00117 	ldw	ra,4(sp)
    e7e8:	df000017 	ldw	fp,0(sp)
    e7ec:	dec00204 	addi	sp,sp,8
    e7f0:	f800283a 	ret

0000e7f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e7f4:	defffa04 	addi	sp,sp,-24
    e7f8:	dfc00515 	stw	ra,20(sp)
    e7fc:	df000415 	stw	fp,16(sp)
    e800:	df000404 	addi	fp,sp,16
    e804:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e808:	0007883a 	mov	r3,zero
    e80c:	e0bfff17 	ldw	r2,-4(fp)
    e810:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e814:	e0bfff17 	ldw	r2,-4(fp)
    e818:	10800104 	addi	r2,r2,4
    e81c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e820:	0005303a 	rdctl	r2,status
    e824:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e828:	e0fffd17 	ldw	r3,-12(fp)
    e82c:	00bfff84 	movi	r2,-2
    e830:	1884703a 	and	r2,r3,r2
    e834:	1001703a 	wrctl	status,r2
  
  return context;
    e838:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e83c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    e840:	000f3ac0 	call	f3ac <alt_tick>
    e844:	e0bffc17 	ldw	r2,-16(fp)
    e848:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e84c:	e0bffe17 	ldw	r2,-8(fp)
    e850:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e854:	0001883a 	nop
    e858:	e037883a 	mov	sp,fp
    e85c:	dfc00117 	ldw	ra,4(sp)
    e860:	df000017 	ldw	fp,0(sp)
    e864:	dec00204 	addi	sp,sp,8
    e868:	f800283a 	ret

0000e86c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e86c:	defff804 	addi	sp,sp,-32
    e870:	dfc00715 	stw	ra,28(sp)
    e874:	df000615 	stw	fp,24(sp)
    e878:	df000604 	addi	fp,sp,24
    e87c:	e13ffc15 	stw	r4,-16(fp)
    e880:	e17ffd15 	stw	r5,-12(fp)
    e884:	e1bffe15 	stw	r6,-8(fp)
    e888:	e1ffff15 	stw	r7,-4(fp)
    e88c:	e0bfff17 	ldw	r2,-4(fp)
    e890:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e894:	d0a6d617 	ldw	r2,-25768(gp)
    e898:	1000021e 	bne	r2,zero,e8a4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    e89c:	e0bffb17 	ldw	r2,-20(fp)
    e8a0:	d0a6d615 	stw	r2,-25768(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e8a4:	e0bffc17 	ldw	r2,-16(fp)
    e8a8:	10800104 	addi	r2,r2,4
    e8ac:	00c001c4 	movi	r3,7
    e8b0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    e8b4:	d8000015 	stw	zero,0(sp)
    e8b8:	e1fffc17 	ldw	r7,-16(fp)
    e8bc:	01800074 	movhi	r6,1
    e8c0:	31b9fd04 	addi	r6,r6,-6156
    e8c4:	e17ffe17 	ldw	r5,-8(fp)
    e8c8:	e13ffd17 	ldw	r4,-12(fp)
    e8cc:	000ec8c0 	call	ec8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    e8d0:	0001883a 	nop
    e8d4:	e037883a 	mov	sp,fp
    e8d8:	dfc00117 	ldw	ra,4(sp)
    e8dc:	df000017 	ldw	fp,0(sp)
    e8e0:	dec00204 	addi	sp,sp,8
    e8e4:	f800283a 	ret

0000e8e8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e8e8:	defff504 	addi	sp,sp,-44
    e8ec:	df000a15 	stw	fp,40(sp)
    e8f0:	df000a04 	addi	fp,sp,40
    e8f4:	e13ffc15 	stw	r4,-16(fp)
    e8f8:	e17ffd15 	stw	r5,-12(fp)
    e8fc:	e1bffe15 	stw	r6,-8(fp)
    e900:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e904:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e908:	d0a6d617 	ldw	r2,-25768(gp)
  
  if (alt_ticks_per_second ())
    e90c:	10003c26 	beq	r2,zero,ea00 <alt_alarm_start+0x118>
  {
    if (alarm)
    e910:	e0bffc17 	ldw	r2,-16(fp)
    e914:	10003826 	beq	r2,zero,e9f8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    e918:	e0bffc17 	ldw	r2,-16(fp)
    e91c:	e0fffe17 	ldw	r3,-8(fp)
    e920:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e924:	e0bffc17 	ldw	r2,-16(fp)
    e928:	e0ffff17 	ldw	r3,-4(fp)
    e92c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e930:	0005303a 	rdctl	r2,status
    e934:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e938:	e0fff917 	ldw	r3,-28(fp)
    e93c:	00bfff84 	movi	r2,-2
    e940:	1884703a 	and	r2,r3,r2
    e944:	1001703a 	wrctl	status,r2
  
  return context;
    e948:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e94c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e950:	d0a6d717 	ldw	r2,-25764(gp)
      
      current_nticks = alt_nticks();
    e954:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e958:	e0fffd17 	ldw	r3,-12(fp)
    e95c:	e0bff617 	ldw	r2,-40(fp)
    e960:	1885883a 	add	r2,r3,r2
    e964:	10c00044 	addi	r3,r2,1
    e968:	e0bffc17 	ldw	r2,-16(fp)
    e96c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e970:	e0bffc17 	ldw	r2,-16(fp)
    e974:	10c00217 	ldw	r3,8(r2)
    e978:	e0bff617 	ldw	r2,-40(fp)
    e97c:	1880042e 	bgeu	r3,r2,e990 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e980:	e0bffc17 	ldw	r2,-16(fp)
    e984:	00c00044 	movi	r3,1
    e988:	10c00405 	stb	r3,16(r2)
    e98c:	00000206 	br	e998 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e990:	e0bffc17 	ldw	r2,-16(fp)
    e994:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e998:	e0bffc17 	ldw	r2,-16(fp)
    e99c:	d0e00e04 	addi	r3,gp,-32712
    e9a0:	e0fffa15 	stw	r3,-24(fp)
    e9a4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e9a8:	e0bffb17 	ldw	r2,-20(fp)
    e9ac:	e0fffa17 	ldw	r3,-24(fp)
    e9b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e9b4:	e0bffa17 	ldw	r2,-24(fp)
    e9b8:	10c00017 	ldw	r3,0(r2)
    e9bc:	e0bffb17 	ldw	r2,-20(fp)
    e9c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e9c4:	e0bffa17 	ldw	r2,-24(fp)
    e9c8:	10800017 	ldw	r2,0(r2)
    e9cc:	e0fffb17 	ldw	r3,-20(fp)
    e9d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e9d4:	e0bffa17 	ldw	r2,-24(fp)
    e9d8:	e0fffb17 	ldw	r3,-20(fp)
    e9dc:	10c00015 	stw	r3,0(r2)
    e9e0:	e0bff817 	ldw	r2,-32(fp)
    e9e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e9e8:	e0bff717 	ldw	r2,-36(fp)
    e9ec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e9f0:	0005883a 	mov	r2,zero
    e9f4:	00000306 	br	ea04 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    e9f8:	00bffa84 	movi	r2,-22
    e9fc:	00000106 	br	ea04 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    ea00:	00bfde84 	movi	r2,-134
  }
}
    ea04:	e037883a 	mov	sp,fp
    ea08:	df000017 	ldw	fp,0(sp)
    ea0c:	dec00104 	addi	sp,sp,4
    ea10:	f800283a 	ret

0000ea14 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    ea14:	defffa04 	addi	sp,sp,-24
    ea18:	dfc00515 	stw	ra,20(sp)
    ea1c:	df000415 	stw	fp,16(sp)
    ea20:	df000404 	addi	fp,sp,16
    ea24:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    ea28:	00800244 	movi	r2,9
    ea2c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    ea30:	014003f4 	movhi	r5,15
    ea34:	29509004 	addi	r5,r5,16960
    ea38:	e13ffd17 	ldw	r4,-12(fp)
    ea3c:	000aa180 	call	aa18 <__mulsi3>
    ea40:	100b883a 	mov	r5,r2
    ea44:	0100bef4 	movhi	r4,763
    ea48:	213c2004 	addi	r4,r4,-3968
    ea4c:	000a95c0 	call	a95c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    ea50:	100b883a 	mov	r5,r2
    ea54:	01200034 	movhi	r4,32768
    ea58:	213fffc4 	addi	r4,r4,-1
    ea5c:	000a95c0 	call	a95c <__udivsi3>
    ea60:	100b883a 	mov	r5,r2
    ea64:	e13fff17 	ldw	r4,-4(fp)
    ea68:	000a95c0 	call	a95c <__udivsi3>
    ea6c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    ea70:	e0bffe17 	ldw	r2,-8(fp)
    ea74:	10002a26 	beq	r2,zero,eb20 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    ea78:	e03ffc15 	stw	zero,-16(fp)
    ea7c:	00001706 	br	eadc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    ea80:	00a00034 	movhi	r2,32768
    ea84:	10bfffc4 	addi	r2,r2,-1
    ea88:	10bfffc4 	addi	r2,r2,-1
    ea8c:	103ffe1e 	bne	r2,zero,ea88 <__alt_data_end+0xfffeea88>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    ea90:	014003f4 	movhi	r5,15
    ea94:	29509004 	addi	r5,r5,16960
    ea98:	e13ffd17 	ldw	r4,-12(fp)
    ea9c:	000aa180 	call	aa18 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    eaa0:	100b883a 	mov	r5,r2
    eaa4:	0100bef4 	movhi	r4,763
    eaa8:	213c2004 	addi	r4,r4,-3968
    eaac:	000a95c0 	call	a95c <__udivsi3>
    eab0:	100b883a 	mov	r5,r2
    eab4:	01200034 	movhi	r4,32768
    eab8:	213fffc4 	addi	r4,r4,-1
    eabc:	000a95c0 	call	a95c <__udivsi3>
    eac0:	1007883a 	mov	r3,r2
    eac4:	e0bfff17 	ldw	r2,-4(fp)
    eac8:	10c5c83a 	sub	r2,r2,r3
    eacc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    ead0:	e0bffc17 	ldw	r2,-16(fp)
    ead4:	10800044 	addi	r2,r2,1
    ead8:	e0bffc15 	stw	r2,-16(fp)
    eadc:	e0fffc17 	ldw	r3,-16(fp)
    eae0:	e0bffe17 	ldw	r2,-8(fp)
    eae4:	18bfe616 	blt	r3,r2,ea80 <__alt_data_end+0xfffeea80>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    eae8:	014003f4 	movhi	r5,15
    eaec:	29509004 	addi	r5,r5,16960
    eaf0:	e13ffd17 	ldw	r4,-12(fp)
    eaf4:	000aa180 	call	aa18 <__mulsi3>
    eaf8:	100b883a 	mov	r5,r2
    eafc:	0100bef4 	movhi	r4,763
    eb00:	213c2004 	addi	r4,r4,-3968
    eb04:	000a95c0 	call	a95c <__udivsi3>
    eb08:	e17fff17 	ldw	r5,-4(fp)
    eb0c:	1009883a 	mov	r4,r2
    eb10:	000aa180 	call	aa18 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    eb14:	10bfffc4 	addi	r2,r2,-1
    eb18:	103ffe1e 	bne	r2,zero,eb14 <__alt_data_end+0xfffeeb14>
    eb1c:	00000d06 	br	eb54 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    eb20:	014003f4 	movhi	r5,15
    eb24:	29509004 	addi	r5,r5,16960
    eb28:	e13ffd17 	ldw	r4,-12(fp)
    eb2c:	000aa180 	call	aa18 <__mulsi3>
    eb30:	100b883a 	mov	r5,r2
    eb34:	0100bef4 	movhi	r4,763
    eb38:	213c2004 	addi	r4,r4,-3968
    eb3c:	000a95c0 	call	a95c <__udivsi3>
    eb40:	e17fff17 	ldw	r5,-4(fp)
    eb44:	1009883a 	mov	r4,r2
    eb48:	000aa180 	call	aa18 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    eb4c:	10bfffc4 	addi	r2,r2,-1
    eb50:	00bffe16 	blt	zero,r2,eb4c <__alt_data_end+0xfffeeb4c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    eb54:	0005883a 	mov	r2,zero
}
    eb58:	e037883a 	mov	sp,fp
    eb5c:	dfc00117 	ldw	ra,4(sp)
    eb60:	df000017 	ldw	fp,0(sp)
    eb64:	dec00204 	addi	sp,sp,8
    eb68:	f800283a 	ret

0000eb6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    eb6c:	deffff04 	addi	sp,sp,-4
    eb70:	df000015 	stw	fp,0(sp)
    eb74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    eb78:	0001883a 	nop
    eb7c:	e037883a 	mov	sp,fp
    eb80:	df000017 	ldw	fp,0(sp)
    eb84:	dec00104 	addi	sp,sp,4
    eb88:	f800283a 	ret

0000eb8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    eb8c:	defffe04 	addi	sp,sp,-8
    eb90:	dfc00115 	stw	ra,4(sp)
    eb94:	df000015 	stw	fp,0(sp)
    eb98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eb9c:	d0a00b17 	ldw	r2,-32724(gp)
    eba0:	10000326 	beq	r2,zero,ebb0 <alt_get_errno+0x24>
    eba4:	d0a00b17 	ldw	r2,-32724(gp)
    eba8:	103ee83a 	callr	r2
    ebac:	00000106 	br	ebb4 <alt_get_errno+0x28>
    ebb0:	d0a6d104 	addi	r2,gp,-25788
}
    ebb4:	e037883a 	mov	sp,fp
    ebb8:	dfc00117 	ldw	ra,4(sp)
    ebbc:	df000017 	ldw	fp,0(sp)
    ebc0:	dec00204 	addi	sp,sp,8
    ebc4:	f800283a 	ret

0000ebc8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ebc8:	defffa04 	addi	sp,sp,-24
    ebcc:	dfc00515 	stw	ra,20(sp)
    ebd0:	df000415 	stw	fp,16(sp)
    ebd4:	df000404 	addi	fp,sp,16
    ebd8:	e13ffe15 	stw	r4,-8(fp)
    ebdc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ebe0:	e0bffe17 	ldw	r2,-8(fp)
    ebe4:	10000326 	beq	r2,zero,ebf4 <alt_dev_llist_insert+0x2c>
    ebe8:	e0bffe17 	ldw	r2,-8(fp)
    ebec:	10800217 	ldw	r2,8(r2)
    ebf0:	1000061e 	bne	r2,zero,ec0c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ebf4:	000eb8c0 	call	eb8c <alt_get_errno>
    ebf8:	1007883a 	mov	r3,r2
    ebfc:	00800584 	movi	r2,22
    ec00:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ec04:	00bffa84 	movi	r2,-22
    ec08:	00001306 	br	ec58 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ec0c:	e0bffe17 	ldw	r2,-8(fp)
    ec10:	e0ffff17 	ldw	r3,-4(fp)
    ec14:	e0fffc15 	stw	r3,-16(fp)
    ec18:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ec1c:	e0bffd17 	ldw	r2,-12(fp)
    ec20:	e0fffc17 	ldw	r3,-16(fp)
    ec24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ec28:	e0bffc17 	ldw	r2,-16(fp)
    ec2c:	10c00017 	ldw	r3,0(r2)
    ec30:	e0bffd17 	ldw	r2,-12(fp)
    ec34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    ec38:	e0bffc17 	ldw	r2,-16(fp)
    ec3c:	10800017 	ldw	r2,0(r2)
    ec40:	e0fffd17 	ldw	r3,-12(fp)
    ec44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    ec48:	e0bffc17 	ldw	r2,-16(fp)
    ec4c:	e0fffd17 	ldw	r3,-12(fp)
    ec50:	10c00015 	stw	r3,0(r2)

  return 0;  
    ec54:	0005883a 	mov	r2,zero
}
    ec58:	e037883a 	mov	sp,fp
    ec5c:	dfc00117 	ldw	ra,4(sp)
    ec60:	df000017 	ldw	fp,0(sp)
    ec64:	dec00204 	addi	sp,sp,8
    ec68:	f800283a 	ret

0000ec6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ec6c:	deffff04 	addi	sp,sp,-4
    ec70:	df000015 	stw	fp,0(sp)
    ec74:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    ec78:	0001883a 	nop
    ec7c:	e037883a 	mov	sp,fp
    ec80:	df000017 	ldw	fp,0(sp)
    ec84:	dec00104 	addi	sp,sp,4
    ec88:	f800283a 	ret

0000ec8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ec8c:	defff904 	addi	sp,sp,-28
    ec90:	dfc00615 	stw	ra,24(sp)
    ec94:	df000515 	stw	fp,20(sp)
    ec98:	df000504 	addi	fp,sp,20
    ec9c:	e13ffc15 	stw	r4,-16(fp)
    eca0:	e17ffd15 	stw	r5,-12(fp)
    eca4:	e1bffe15 	stw	r6,-8(fp)
    eca8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ecac:	e0800217 	ldw	r2,8(fp)
    ecb0:	d8800015 	stw	r2,0(sp)
    ecb4:	e1ffff17 	ldw	r7,-4(fp)
    ecb8:	e1bffe17 	ldw	r6,-8(fp)
    ecbc:	e17ffd17 	ldw	r5,-12(fp)
    ecc0:	e13ffc17 	ldw	r4,-16(fp)
    ecc4:	000ee3c0 	call	ee3c <alt_iic_isr_register>
}  
    ecc8:	e037883a 	mov	sp,fp
    eccc:	dfc00117 	ldw	ra,4(sp)
    ecd0:	df000017 	ldw	fp,0(sp)
    ecd4:	dec00204 	addi	sp,sp,8
    ecd8:	f800283a 	ret

0000ecdc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ecdc:	defff904 	addi	sp,sp,-28
    ece0:	df000615 	stw	fp,24(sp)
    ece4:	df000604 	addi	fp,sp,24
    ece8:	e13ffe15 	stw	r4,-8(fp)
    ecec:	e17fff15 	stw	r5,-4(fp)
    ecf0:	e0bfff17 	ldw	r2,-4(fp)
    ecf4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ecf8:	0005303a 	rdctl	r2,status
    ecfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed00:	e0fffb17 	ldw	r3,-20(fp)
    ed04:	00bfff84 	movi	r2,-2
    ed08:	1884703a 	and	r2,r3,r2
    ed0c:	1001703a 	wrctl	status,r2
  
  return context;
    ed10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ed14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    ed18:	00c00044 	movi	r3,1
    ed1c:	e0bffa17 	ldw	r2,-24(fp)
    ed20:	1884983a 	sll	r2,r3,r2
    ed24:	1007883a 	mov	r3,r2
    ed28:	d0a6d517 	ldw	r2,-25772(gp)
    ed2c:	1884b03a 	or	r2,r3,r2
    ed30:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ed34:	d0a6d517 	ldw	r2,-25772(gp)
    ed38:	100170fa 	wrctl	ienable,r2
    ed3c:	e0bffc17 	ldw	r2,-16(fp)
    ed40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed44:	e0bffd17 	ldw	r2,-12(fp)
    ed48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ed4c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    ed50:	0001883a 	nop
}
    ed54:	e037883a 	mov	sp,fp
    ed58:	df000017 	ldw	fp,0(sp)
    ed5c:	dec00104 	addi	sp,sp,4
    ed60:	f800283a 	ret

0000ed64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    ed64:	defff904 	addi	sp,sp,-28
    ed68:	df000615 	stw	fp,24(sp)
    ed6c:	df000604 	addi	fp,sp,24
    ed70:	e13ffe15 	stw	r4,-8(fp)
    ed74:	e17fff15 	stw	r5,-4(fp)
    ed78:	e0bfff17 	ldw	r2,-4(fp)
    ed7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed80:	0005303a 	rdctl	r2,status
    ed84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed88:	e0fffb17 	ldw	r3,-20(fp)
    ed8c:	00bfff84 	movi	r2,-2
    ed90:	1884703a 	and	r2,r3,r2
    ed94:	1001703a 	wrctl	status,r2
  
  return context;
    ed98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ed9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    eda0:	00c00044 	movi	r3,1
    eda4:	e0bffa17 	ldw	r2,-24(fp)
    eda8:	1884983a 	sll	r2,r3,r2
    edac:	0084303a 	nor	r2,zero,r2
    edb0:	1007883a 	mov	r3,r2
    edb4:	d0a6d517 	ldw	r2,-25772(gp)
    edb8:	1884703a 	and	r2,r3,r2
    edbc:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    edc0:	d0a6d517 	ldw	r2,-25772(gp)
    edc4:	100170fa 	wrctl	ienable,r2
    edc8:	e0bffc17 	ldw	r2,-16(fp)
    edcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    edd0:	e0bffd17 	ldw	r2,-12(fp)
    edd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    edd8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    eddc:	0001883a 	nop
}
    ede0:	e037883a 	mov	sp,fp
    ede4:	df000017 	ldw	fp,0(sp)
    ede8:	dec00104 	addi	sp,sp,4
    edec:	f800283a 	ret

0000edf0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    edf0:	defffc04 	addi	sp,sp,-16
    edf4:	df000315 	stw	fp,12(sp)
    edf8:	df000304 	addi	fp,sp,12
    edfc:	e13ffe15 	stw	r4,-8(fp)
    ee00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ee04:	000530fa 	rdctl	r2,ienable
    ee08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ee0c:	00c00044 	movi	r3,1
    ee10:	e0bfff17 	ldw	r2,-4(fp)
    ee14:	1884983a 	sll	r2,r3,r2
    ee18:	1007883a 	mov	r3,r2
    ee1c:	e0bffd17 	ldw	r2,-12(fp)
    ee20:	1884703a 	and	r2,r3,r2
    ee24:	1004c03a 	cmpne	r2,r2,zero
    ee28:	10803fcc 	andi	r2,r2,255
}
    ee2c:	e037883a 	mov	sp,fp
    ee30:	df000017 	ldw	fp,0(sp)
    ee34:	dec00104 	addi	sp,sp,4
    ee38:	f800283a 	ret

0000ee3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ee3c:	defff504 	addi	sp,sp,-44
    ee40:	dfc00a15 	stw	ra,40(sp)
    ee44:	df000915 	stw	fp,36(sp)
    ee48:	df000904 	addi	fp,sp,36
    ee4c:	e13ffc15 	stw	r4,-16(fp)
    ee50:	e17ffd15 	stw	r5,-12(fp)
    ee54:	e1bffe15 	stw	r6,-8(fp)
    ee58:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ee5c:	00bffa84 	movi	r2,-22
    ee60:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ee64:	e0bffd17 	ldw	r2,-12(fp)
    ee68:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ee6c:	e0bff817 	ldw	r2,-32(fp)
    ee70:	10800808 	cmpgei	r2,r2,32
    ee74:	1000271e 	bne	r2,zero,ef14 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee78:	0005303a 	rdctl	r2,status
    ee7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee80:	e0fffb17 	ldw	r3,-20(fp)
    ee84:	00bfff84 	movi	r2,-2
    ee88:	1884703a 	and	r2,r3,r2
    ee8c:	1001703a 	wrctl	status,r2
  
  return context;
    ee90:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    ee94:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    ee98:	00800074 	movhi	r2,1
    ee9c:	108ced04 	addi	r2,r2,13236
    eea0:	e0fff817 	ldw	r3,-32(fp)
    eea4:	180690fa 	slli	r3,r3,3
    eea8:	10c5883a 	add	r2,r2,r3
    eeac:	e0fffe17 	ldw	r3,-8(fp)
    eeb0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    eeb4:	00800074 	movhi	r2,1
    eeb8:	108ced04 	addi	r2,r2,13236
    eebc:	e0fff817 	ldw	r3,-32(fp)
    eec0:	180690fa 	slli	r3,r3,3
    eec4:	10c5883a 	add	r2,r2,r3
    eec8:	10800104 	addi	r2,r2,4
    eecc:	e0ffff17 	ldw	r3,-4(fp)
    eed0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    eed4:	e0bffe17 	ldw	r2,-8(fp)
    eed8:	10000526 	beq	r2,zero,eef0 <alt_iic_isr_register+0xb4>
    eedc:	e0bff817 	ldw	r2,-32(fp)
    eee0:	100b883a 	mov	r5,r2
    eee4:	e13ffc17 	ldw	r4,-16(fp)
    eee8:	000ecdc0 	call	ecdc <alt_ic_irq_enable>
    eeec:	00000406 	br	ef00 <alt_iic_isr_register+0xc4>
    eef0:	e0bff817 	ldw	r2,-32(fp)
    eef4:	100b883a 	mov	r5,r2
    eef8:	e13ffc17 	ldw	r4,-16(fp)
    eefc:	000ed640 	call	ed64 <alt_ic_irq_disable>
    ef00:	e0bff715 	stw	r2,-36(fp)
    ef04:	e0bffa17 	ldw	r2,-24(fp)
    ef08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef0c:	e0bff917 	ldw	r2,-28(fp)
    ef10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ef14:	e0bff717 	ldw	r2,-36(fp)
}
    ef18:	e037883a 	mov	sp,fp
    ef1c:	dfc00117 	ldw	ra,4(sp)
    ef20:	df000017 	ldw	fp,0(sp)
    ef24:	dec00204 	addi	sp,sp,8
    ef28:	f800283a 	ret

0000ef2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ef2c:	defff804 	addi	sp,sp,-32
    ef30:	dfc00715 	stw	ra,28(sp)
    ef34:	df000615 	stw	fp,24(sp)
    ef38:	dc000515 	stw	r16,20(sp)
    ef3c:	df000604 	addi	fp,sp,24
    ef40:	e13ffb15 	stw	r4,-20(fp)
    ef44:	e17ffc15 	stw	r5,-16(fp)
    ef48:	e1bffd15 	stw	r6,-12(fp)
    ef4c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    ef50:	e1bffe17 	ldw	r6,-8(fp)
    ef54:	e17ffd17 	ldw	r5,-12(fp)
    ef58:	e13ffc17 	ldw	r4,-16(fp)
    ef5c:	000f1b40 	call	f1b4 <open>
    ef60:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    ef64:	e0bffa17 	ldw	r2,-24(fp)
    ef68:	10002216 	blt	r2,zero,eff4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    ef6c:	04000074 	movhi	r16,1
    ef70:	84019204 	addi	r16,r16,1608
    ef74:	e0bffa17 	ldw	r2,-24(fp)
    ef78:	01400304 	movi	r5,12
    ef7c:	1009883a 	mov	r4,r2
    ef80:	000aa180 	call	aa18 <__mulsi3>
    ef84:	8085883a 	add	r2,r16,r2
    ef88:	10c00017 	ldw	r3,0(r2)
    ef8c:	e0bffb17 	ldw	r2,-20(fp)
    ef90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ef94:	04000074 	movhi	r16,1
    ef98:	84019204 	addi	r16,r16,1608
    ef9c:	e0bffa17 	ldw	r2,-24(fp)
    efa0:	01400304 	movi	r5,12
    efa4:	1009883a 	mov	r4,r2
    efa8:	000aa180 	call	aa18 <__mulsi3>
    efac:	8085883a 	add	r2,r16,r2
    efb0:	10800104 	addi	r2,r2,4
    efb4:	10c00017 	ldw	r3,0(r2)
    efb8:	e0bffb17 	ldw	r2,-20(fp)
    efbc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    efc0:	04000074 	movhi	r16,1
    efc4:	84019204 	addi	r16,r16,1608
    efc8:	e0bffa17 	ldw	r2,-24(fp)
    efcc:	01400304 	movi	r5,12
    efd0:	1009883a 	mov	r4,r2
    efd4:	000aa180 	call	aa18 <__mulsi3>
    efd8:	8085883a 	add	r2,r16,r2
    efdc:	10800204 	addi	r2,r2,8
    efe0:	10c00017 	ldw	r3,0(r2)
    efe4:	e0bffb17 	ldw	r2,-20(fp)
    efe8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    efec:	e13ffa17 	ldw	r4,-24(fp)
    eff0:	000da200 	call	da20 <alt_release_fd>
  }
} 
    eff4:	0001883a 	nop
    eff8:	e6ffff04 	addi	sp,fp,-4
    effc:	dfc00217 	ldw	ra,8(sp)
    f000:	df000117 	ldw	fp,4(sp)
    f004:	dc000017 	ldw	r16,0(sp)
    f008:	dec00304 	addi	sp,sp,12
    f00c:	f800283a 	ret

0000f010 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f010:	defffb04 	addi	sp,sp,-20
    f014:	dfc00415 	stw	ra,16(sp)
    f018:	df000315 	stw	fp,12(sp)
    f01c:	df000304 	addi	fp,sp,12
    f020:	e13ffd15 	stw	r4,-12(fp)
    f024:	e17ffe15 	stw	r5,-8(fp)
    f028:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f02c:	01c07fc4 	movi	r7,511
    f030:	01800044 	movi	r6,1
    f034:	e17ffd17 	ldw	r5,-12(fp)
    f038:	01000074 	movhi	r4,1
    f03c:	21019504 	addi	r4,r4,1620
    f040:	000ef2c0 	call	ef2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f044:	01c07fc4 	movi	r7,511
    f048:	000d883a 	mov	r6,zero
    f04c:	e17ffe17 	ldw	r5,-8(fp)
    f050:	01000074 	movhi	r4,1
    f054:	21019204 	addi	r4,r4,1608
    f058:	000ef2c0 	call	ef2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f05c:	01c07fc4 	movi	r7,511
    f060:	01800044 	movi	r6,1
    f064:	e17fff17 	ldw	r5,-4(fp)
    f068:	01000074 	movhi	r4,1
    f06c:	21019804 	addi	r4,r4,1632
    f070:	000ef2c0 	call	ef2c <alt_open_fd>
}  
    f074:	0001883a 	nop
    f078:	e037883a 	mov	sp,fp
    f07c:	dfc00117 	ldw	ra,4(sp)
    f080:	df000017 	ldw	fp,0(sp)
    f084:	dec00204 	addi	sp,sp,8
    f088:	f800283a 	ret

0000f08c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f08c:	defffe04 	addi	sp,sp,-8
    f090:	dfc00115 	stw	ra,4(sp)
    f094:	df000015 	stw	fp,0(sp)
    f098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f09c:	d0a00b17 	ldw	r2,-32724(gp)
    f0a0:	10000326 	beq	r2,zero,f0b0 <alt_get_errno+0x24>
    f0a4:	d0a00b17 	ldw	r2,-32724(gp)
    f0a8:	103ee83a 	callr	r2
    f0ac:	00000106 	br	f0b4 <alt_get_errno+0x28>
    f0b0:	d0a6d104 	addi	r2,gp,-25788
}
    f0b4:	e037883a 	mov	sp,fp
    f0b8:	dfc00117 	ldw	ra,4(sp)
    f0bc:	df000017 	ldw	fp,0(sp)
    f0c0:	dec00204 	addi	sp,sp,8
    f0c4:	f800283a 	ret

0000f0c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f0c8:	defffb04 	addi	sp,sp,-20
    f0cc:	dfc00415 	stw	ra,16(sp)
    f0d0:	df000315 	stw	fp,12(sp)
    f0d4:	dc000215 	stw	r16,8(sp)
    f0d8:	df000304 	addi	fp,sp,12
    f0dc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f0e0:	e0bffe17 	ldw	r2,-8(fp)
    f0e4:	10800217 	ldw	r2,8(r2)
    f0e8:	10d00034 	orhi	r3,r2,16384
    f0ec:	e0bffe17 	ldw	r2,-8(fp)
    f0f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f0f4:	e03ffd15 	stw	zero,-12(fp)
    f0f8:	00002306 	br	f188 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f0fc:	04000074 	movhi	r16,1
    f100:	84019204 	addi	r16,r16,1608
    f104:	e0bffd17 	ldw	r2,-12(fp)
    f108:	01400304 	movi	r5,12
    f10c:	1009883a 	mov	r4,r2
    f110:	000aa180 	call	aa18 <__mulsi3>
    f114:	8085883a 	add	r2,r16,r2
    f118:	10c00017 	ldw	r3,0(r2)
    f11c:	e0bffe17 	ldw	r2,-8(fp)
    f120:	10800017 	ldw	r2,0(r2)
    f124:	1880151e 	bne	r3,r2,f17c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f128:	04000074 	movhi	r16,1
    f12c:	84019204 	addi	r16,r16,1608
    f130:	e0bffd17 	ldw	r2,-12(fp)
    f134:	01400304 	movi	r5,12
    f138:	1009883a 	mov	r4,r2
    f13c:	000aa180 	call	aa18 <__mulsi3>
    f140:	8085883a 	add	r2,r16,r2
    f144:	10800204 	addi	r2,r2,8
    f148:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f14c:	10000b0e 	bge	r2,zero,f17c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f150:	01400304 	movi	r5,12
    f154:	e13ffd17 	ldw	r4,-12(fp)
    f158:	000aa180 	call	aa18 <__mulsi3>
    f15c:	1007883a 	mov	r3,r2
    f160:	00800074 	movhi	r2,1
    f164:	10819204 	addi	r2,r2,1608
    f168:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f16c:	e0bffe17 	ldw	r2,-8(fp)
    f170:	18800226 	beq	r3,r2,f17c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f174:	00bffcc4 	movi	r2,-13
    f178:	00000806 	br	f19c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f17c:	e0bffd17 	ldw	r2,-12(fp)
    f180:	10800044 	addi	r2,r2,1
    f184:	e0bffd15 	stw	r2,-12(fp)
    f188:	d0a00a17 	ldw	r2,-32728(gp)
    f18c:	1007883a 	mov	r3,r2
    f190:	e0bffd17 	ldw	r2,-12(fp)
    f194:	18bfd92e 	bgeu	r3,r2,f0fc <__alt_data_end+0xfffef0fc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f198:	0005883a 	mov	r2,zero
}
    f19c:	e6ffff04 	addi	sp,fp,-4
    f1a0:	dfc00217 	ldw	ra,8(sp)
    f1a4:	df000117 	ldw	fp,4(sp)
    f1a8:	dc000017 	ldw	r16,0(sp)
    f1ac:	dec00304 	addi	sp,sp,12
    f1b0:	f800283a 	ret

0000f1b4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f1b4:	defff604 	addi	sp,sp,-40
    f1b8:	dfc00915 	stw	ra,36(sp)
    f1bc:	df000815 	stw	fp,32(sp)
    f1c0:	df000804 	addi	fp,sp,32
    f1c4:	e13ffd15 	stw	r4,-12(fp)
    f1c8:	e17ffe15 	stw	r5,-8(fp)
    f1cc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f1d0:	00bfffc4 	movi	r2,-1
    f1d4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f1d8:	00bffb44 	movi	r2,-19
    f1dc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f1e0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f1e4:	d1600804 	addi	r5,gp,-32736
    f1e8:	e13ffd17 	ldw	r4,-12(fp)
    f1ec:	000f4d80 	call	f4d8 <alt_find_dev>
    f1f0:	e0bff815 	stw	r2,-32(fp)
    f1f4:	e0bff817 	ldw	r2,-32(fp)
    f1f8:	1000051e 	bne	r2,zero,f210 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f1fc:	e13ffd17 	ldw	r4,-12(fp)
    f200:	000f5680 	call	f568 <alt_find_file>
    f204:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f208:	00800044 	movi	r2,1
    f20c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f210:	e0bff817 	ldw	r2,-32(fp)
    f214:	10002b26 	beq	r2,zero,f2c4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f218:	e13ff817 	ldw	r4,-32(fp)
    f21c:	000f6700 	call	f670 <alt_get_fd>
    f220:	e0bff915 	stw	r2,-28(fp)
    f224:	e0bff917 	ldw	r2,-28(fp)
    f228:	1000030e 	bge	r2,zero,f238 <open+0x84>
    {
      status = index;
    f22c:	e0bff917 	ldw	r2,-28(fp)
    f230:	e0bffa15 	stw	r2,-24(fp)
    f234:	00002506 	br	f2cc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    f238:	01400304 	movi	r5,12
    f23c:	e13ff917 	ldw	r4,-28(fp)
    f240:	000aa180 	call	aa18 <__mulsi3>
    f244:	1007883a 	mov	r3,r2
    f248:	00800074 	movhi	r2,1
    f24c:	10819204 	addi	r2,r2,1608
    f250:	1885883a 	add	r2,r3,r2
    f254:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f258:	e0fffe17 	ldw	r3,-8(fp)
    f25c:	00900034 	movhi	r2,16384
    f260:	10bfffc4 	addi	r2,r2,-1
    f264:	1886703a 	and	r3,r3,r2
    f268:	e0bffc17 	ldw	r2,-16(fp)
    f26c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f270:	e0bffb17 	ldw	r2,-20(fp)
    f274:	1000051e 	bne	r2,zero,f28c <open+0xd8>
    f278:	e13ffc17 	ldw	r4,-16(fp)
    f27c:	000f0c80 	call	f0c8 <alt_file_locked>
    f280:	e0bffa15 	stw	r2,-24(fp)
    f284:	e0bffa17 	ldw	r2,-24(fp)
    f288:	10001016 	blt	r2,zero,f2cc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f28c:	e0bff817 	ldw	r2,-32(fp)
    f290:	10800317 	ldw	r2,12(r2)
    f294:	10000826 	beq	r2,zero,f2b8 <open+0x104>
    f298:	e0bff817 	ldw	r2,-32(fp)
    f29c:	10800317 	ldw	r2,12(r2)
    f2a0:	e1ffff17 	ldw	r7,-4(fp)
    f2a4:	e1bffe17 	ldw	r6,-8(fp)
    f2a8:	e17ffd17 	ldw	r5,-12(fp)
    f2ac:	e13ffc17 	ldw	r4,-16(fp)
    f2b0:	103ee83a 	callr	r2
    f2b4:	00000106 	br	f2bc <open+0x108>
    f2b8:	0005883a 	mov	r2,zero
    f2bc:	e0bffa15 	stw	r2,-24(fp)
    f2c0:	00000206 	br	f2cc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f2c4:	00bffb44 	movi	r2,-19
    f2c8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f2cc:	e0bffa17 	ldw	r2,-24(fp)
    f2d0:	1000090e 	bge	r2,zero,f2f8 <open+0x144>
  {
    alt_release_fd (index);  
    f2d4:	e13ff917 	ldw	r4,-28(fp)
    f2d8:	000da200 	call	da20 <alt_release_fd>
    ALT_ERRNO = -status;
    f2dc:	000f08c0 	call	f08c <alt_get_errno>
    f2e0:	1007883a 	mov	r3,r2
    f2e4:	e0bffa17 	ldw	r2,-24(fp)
    f2e8:	0085c83a 	sub	r2,zero,r2
    f2ec:	18800015 	stw	r2,0(r3)
    return -1;
    f2f0:	00bfffc4 	movi	r2,-1
    f2f4:	00000106 	br	f2fc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    f2f8:	e0bff917 	ldw	r2,-28(fp)
}
    f2fc:	e037883a 	mov	sp,fp
    f300:	dfc00117 	ldw	ra,4(sp)
    f304:	df000017 	ldw	fp,0(sp)
    f308:	dec00204 	addi	sp,sp,8
    f30c:	f800283a 	ret

0000f310 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f310:	defffa04 	addi	sp,sp,-24
    f314:	df000515 	stw	fp,20(sp)
    f318:	df000504 	addi	fp,sp,20
    f31c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f320:	0005303a 	rdctl	r2,status
    f324:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f328:	e0fffc17 	ldw	r3,-16(fp)
    f32c:	00bfff84 	movi	r2,-2
    f330:	1884703a 	and	r2,r3,r2
    f334:	1001703a 	wrctl	status,r2
  
  return context;
    f338:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f33c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f340:	e0bfff17 	ldw	r2,-4(fp)
    f344:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f348:	e0bffd17 	ldw	r2,-12(fp)
    f34c:	10800017 	ldw	r2,0(r2)
    f350:	e0fffd17 	ldw	r3,-12(fp)
    f354:	18c00117 	ldw	r3,4(r3)
    f358:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f35c:	e0bffd17 	ldw	r2,-12(fp)
    f360:	10800117 	ldw	r2,4(r2)
    f364:	e0fffd17 	ldw	r3,-12(fp)
    f368:	18c00017 	ldw	r3,0(r3)
    f36c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f370:	e0bffd17 	ldw	r2,-12(fp)
    f374:	e0fffd17 	ldw	r3,-12(fp)
    f378:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f37c:	e0bffd17 	ldw	r2,-12(fp)
    f380:	e0fffd17 	ldw	r3,-12(fp)
    f384:	10c00015 	stw	r3,0(r2)
    f388:	e0bffb17 	ldw	r2,-20(fp)
    f38c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f390:	e0bffe17 	ldw	r2,-8(fp)
    f394:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f398:	0001883a 	nop
    f39c:	e037883a 	mov	sp,fp
    f3a0:	df000017 	ldw	fp,0(sp)
    f3a4:	dec00104 	addi	sp,sp,4
    f3a8:	f800283a 	ret

0000f3ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f3ac:	defffb04 	addi	sp,sp,-20
    f3b0:	dfc00415 	stw	ra,16(sp)
    f3b4:	df000315 	stw	fp,12(sp)
    f3b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f3bc:	d0a00e17 	ldw	r2,-32712(gp)
    f3c0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f3c4:	d0a6d717 	ldw	r2,-25764(gp)
    f3c8:	10800044 	addi	r2,r2,1
    f3cc:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f3d0:	00002e06 	br	f48c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f3d4:	e0bffd17 	ldw	r2,-12(fp)
    f3d8:	10800017 	ldw	r2,0(r2)
    f3dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f3e0:	e0bffd17 	ldw	r2,-12(fp)
    f3e4:	10800403 	ldbu	r2,16(r2)
    f3e8:	10803fcc 	andi	r2,r2,255
    f3ec:	10000426 	beq	r2,zero,f400 <alt_tick+0x54>
    f3f0:	d0a6d717 	ldw	r2,-25764(gp)
    f3f4:	1000021e 	bne	r2,zero,f400 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f3f8:	e0bffd17 	ldw	r2,-12(fp)
    f3fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f400:	e0bffd17 	ldw	r2,-12(fp)
    f404:	10800217 	ldw	r2,8(r2)
    f408:	d0e6d717 	ldw	r3,-25764(gp)
    f40c:	18801d36 	bltu	r3,r2,f484 <alt_tick+0xd8>
    f410:	e0bffd17 	ldw	r2,-12(fp)
    f414:	10800403 	ldbu	r2,16(r2)
    f418:	10803fcc 	andi	r2,r2,255
    f41c:	1000191e 	bne	r2,zero,f484 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f420:	e0bffd17 	ldw	r2,-12(fp)
    f424:	10800317 	ldw	r2,12(r2)
    f428:	e0fffd17 	ldw	r3,-12(fp)
    f42c:	18c00517 	ldw	r3,20(r3)
    f430:	1809883a 	mov	r4,r3
    f434:	103ee83a 	callr	r2
    f438:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f43c:	e0bfff17 	ldw	r2,-4(fp)
    f440:	1000031e 	bne	r2,zero,f450 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f444:	e13ffd17 	ldw	r4,-12(fp)
    f448:	000f3100 	call	f310 <alt_alarm_stop>
    f44c:	00000d06 	br	f484 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f450:	e0bffd17 	ldw	r2,-12(fp)
    f454:	10c00217 	ldw	r3,8(r2)
    f458:	e0bfff17 	ldw	r2,-4(fp)
    f45c:	1887883a 	add	r3,r3,r2
    f460:	e0bffd17 	ldw	r2,-12(fp)
    f464:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f468:	e0bffd17 	ldw	r2,-12(fp)
    f46c:	10c00217 	ldw	r3,8(r2)
    f470:	d0a6d717 	ldw	r2,-25764(gp)
    f474:	1880032e 	bgeu	r3,r2,f484 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f478:	e0bffd17 	ldw	r2,-12(fp)
    f47c:	00c00044 	movi	r3,1
    f480:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f484:	e0bffe17 	ldw	r2,-8(fp)
    f488:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f48c:	e0fffd17 	ldw	r3,-12(fp)
    f490:	d0a00e04 	addi	r2,gp,-32712
    f494:	18bfcf1e 	bne	r3,r2,f3d4 <__alt_data_end+0xfffef3d4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f498:	0001883a 	nop
}
    f49c:	0001883a 	nop
    f4a0:	e037883a 	mov	sp,fp
    f4a4:	dfc00117 	ldw	ra,4(sp)
    f4a8:	df000017 	ldw	fp,0(sp)
    f4ac:	dec00204 	addi	sp,sp,8
    f4b0:	f800283a 	ret

0000f4b4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f4b4:	deffff04 	addi	sp,sp,-4
    f4b8:	df000015 	stw	fp,0(sp)
    f4bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f4c0:	000170fa 	wrctl	ienable,zero
}
    f4c4:	0001883a 	nop
    f4c8:	e037883a 	mov	sp,fp
    f4cc:	df000017 	ldw	fp,0(sp)
    f4d0:	dec00104 	addi	sp,sp,4
    f4d4:	f800283a 	ret

0000f4d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f4d8:	defffa04 	addi	sp,sp,-24
    f4dc:	dfc00515 	stw	ra,20(sp)
    f4e0:	df000415 	stw	fp,16(sp)
    f4e4:	df000404 	addi	fp,sp,16
    f4e8:	e13ffe15 	stw	r4,-8(fp)
    f4ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f4f0:	e0bfff17 	ldw	r2,-4(fp)
    f4f4:	10800017 	ldw	r2,0(r2)
    f4f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f4fc:	e13ffe17 	ldw	r4,-8(fp)
    f500:	00004e40 	call	4e4 <strlen>
    f504:	10800044 	addi	r2,r2,1
    f508:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f50c:	00000d06 	br	f544 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f510:	e0bffc17 	ldw	r2,-16(fp)
    f514:	10800217 	ldw	r2,8(r2)
    f518:	e0fffd17 	ldw	r3,-12(fp)
    f51c:	180d883a 	mov	r6,r3
    f520:	e17ffe17 	ldw	r5,-8(fp)
    f524:	1009883a 	mov	r4,r2
    f528:	000f8080 	call	f808 <memcmp>
    f52c:	1000021e 	bne	r2,zero,f538 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f530:	e0bffc17 	ldw	r2,-16(fp)
    f534:	00000706 	br	f554 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f538:	e0bffc17 	ldw	r2,-16(fp)
    f53c:	10800017 	ldw	r2,0(r2)
    f540:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f544:	e0fffc17 	ldw	r3,-16(fp)
    f548:	e0bfff17 	ldw	r2,-4(fp)
    f54c:	18bff01e 	bne	r3,r2,f510 <__alt_data_end+0xfffef510>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f550:	0005883a 	mov	r2,zero
}
    f554:	e037883a 	mov	sp,fp
    f558:	dfc00117 	ldw	ra,4(sp)
    f55c:	df000017 	ldw	fp,0(sp)
    f560:	dec00204 	addi	sp,sp,8
    f564:	f800283a 	ret

0000f568 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f568:	defffb04 	addi	sp,sp,-20
    f56c:	dfc00415 	stw	ra,16(sp)
    f570:	df000315 	stw	fp,12(sp)
    f574:	df000304 	addi	fp,sp,12
    f578:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f57c:	d0a00617 	ldw	r2,-32744(gp)
    f580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f584:	00003106 	br	f64c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f588:	e0bffd17 	ldw	r2,-12(fp)
    f58c:	10800217 	ldw	r2,8(r2)
    f590:	1009883a 	mov	r4,r2
    f594:	00004e40 	call	4e4 <strlen>
    f598:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f59c:	e0bffd17 	ldw	r2,-12(fp)
    f5a0:	10c00217 	ldw	r3,8(r2)
    f5a4:	e0bffe17 	ldw	r2,-8(fp)
    f5a8:	10bfffc4 	addi	r2,r2,-1
    f5ac:	1885883a 	add	r2,r3,r2
    f5b0:	10800003 	ldbu	r2,0(r2)
    f5b4:	10803fcc 	andi	r2,r2,255
    f5b8:	1080201c 	xori	r2,r2,128
    f5bc:	10bfe004 	addi	r2,r2,-128
    f5c0:	10800bd8 	cmpnei	r2,r2,47
    f5c4:	1000031e 	bne	r2,zero,f5d4 <alt_find_file+0x6c>
    {
      len -= 1;
    f5c8:	e0bffe17 	ldw	r2,-8(fp)
    f5cc:	10bfffc4 	addi	r2,r2,-1
    f5d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f5d4:	e0bffe17 	ldw	r2,-8(fp)
    f5d8:	e0ffff17 	ldw	r3,-4(fp)
    f5dc:	1885883a 	add	r2,r3,r2
    f5e0:	10800003 	ldbu	r2,0(r2)
    f5e4:	10803fcc 	andi	r2,r2,255
    f5e8:	1080201c 	xori	r2,r2,128
    f5ec:	10bfe004 	addi	r2,r2,-128
    f5f0:	10800be0 	cmpeqi	r2,r2,47
    f5f4:	1000081e 	bne	r2,zero,f618 <alt_find_file+0xb0>
    f5f8:	e0bffe17 	ldw	r2,-8(fp)
    f5fc:	e0ffff17 	ldw	r3,-4(fp)
    f600:	1885883a 	add	r2,r3,r2
    f604:	10800003 	ldbu	r2,0(r2)
    f608:	10803fcc 	andi	r2,r2,255
    f60c:	1080201c 	xori	r2,r2,128
    f610:	10bfe004 	addi	r2,r2,-128
    f614:	10000a1e 	bne	r2,zero,f640 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f618:	e0bffd17 	ldw	r2,-12(fp)
    f61c:	10800217 	ldw	r2,8(r2)
    f620:	e0fffe17 	ldw	r3,-8(fp)
    f624:	180d883a 	mov	r6,r3
    f628:	e17fff17 	ldw	r5,-4(fp)
    f62c:	1009883a 	mov	r4,r2
    f630:	000f8080 	call	f808 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f634:	1000021e 	bne	r2,zero,f640 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f638:	e0bffd17 	ldw	r2,-12(fp)
    f63c:	00000706 	br	f65c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f640:	e0bffd17 	ldw	r2,-12(fp)
    f644:	10800017 	ldw	r2,0(r2)
    f648:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f64c:	e0fffd17 	ldw	r3,-12(fp)
    f650:	d0a00604 	addi	r2,gp,-32744
    f654:	18bfcc1e 	bne	r3,r2,f588 <__alt_data_end+0xfffef588>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f658:	0005883a 	mov	r2,zero
}
    f65c:	e037883a 	mov	sp,fp
    f660:	dfc00117 	ldw	ra,4(sp)
    f664:	df000017 	ldw	fp,0(sp)
    f668:	dec00204 	addi	sp,sp,8
    f66c:	f800283a 	ret

0000f670 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f670:	defffa04 	addi	sp,sp,-24
    f674:	dfc00515 	stw	ra,20(sp)
    f678:	df000415 	stw	fp,16(sp)
    f67c:	dc000315 	stw	r16,12(sp)
    f680:	df000404 	addi	fp,sp,16
    f684:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    f688:	00bffa04 	movi	r2,-24
    f68c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f690:	e03ffc15 	stw	zero,-16(fp)
    f694:	00001d06 	br	f70c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    f698:	04000074 	movhi	r16,1
    f69c:	84019204 	addi	r16,r16,1608
    f6a0:	e0bffc17 	ldw	r2,-16(fp)
    f6a4:	01400304 	movi	r5,12
    f6a8:	1009883a 	mov	r4,r2
    f6ac:	000aa180 	call	aa18 <__mulsi3>
    f6b0:	8085883a 	add	r2,r16,r2
    f6b4:	10800017 	ldw	r2,0(r2)
    f6b8:	1000111e 	bne	r2,zero,f700 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    f6bc:	04000074 	movhi	r16,1
    f6c0:	84019204 	addi	r16,r16,1608
    f6c4:	e0bffc17 	ldw	r2,-16(fp)
    f6c8:	01400304 	movi	r5,12
    f6cc:	1009883a 	mov	r4,r2
    f6d0:	000aa180 	call	aa18 <__mulsi3>
    f6d4:	8085883a 	add	r2,r16,r2
    f6d8:	e0fffe17 	ldw	r3,-8(fp)
    f6dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f6e0:	d0e00a17 	ldw	r3,-32728(gp)
    f6e4:	e0bffc17 	ldw	r2,-16(fp)
    f6e8:	1880020e 	bge	r3,r2,f6f4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    f6ec:	e0bffc17 	ldw	r2,-16(fp)
    f6f0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    f6f4:	e0bffc17 	ldw	r2,-16(fp)
    f6f8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    f6fc:	00000606 	br	f718 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f700:	e0bffc17 	ldw	r2,-16(fp)
    f704:	10800044 	addi	r2,r2,1
    f708:	e0bffc15 	stw	r2,-16(fp)
    f70c:	e0bffc17 	ldw	r2,-16(fp)
    f710:	10800810 	cmplti	r2,r2,32
    f714:	103fe01e 	bne	r2,zero,f698 <__alt_data_end+0xfffef698>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f718:	e0bffd17 	ldw	r2,-12(fp)
}
    f71c:	e6ffff04 	addi	sp,fp,-4
    f720:	dfc00217 	ldw	ra,8(sp)
    f724:	df000117 	ldw	fp,4(sp)
    f728:	dc000017 	ldw	r16,0(sp)
    f72c:	dec00304 	addi	sp,sp,12
    f730:	f800283a 	ret

0000f734 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f734:	defffe04 	addi	sp,sp,-8
    f738:	df000115 	stw	fp,4(sp)
    f73c:	df000104 	addi	fp,sp,4
    f740:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f744:	e0bfff17 	ldw	r2,-4(fp)
    f748:	10bffe84 	addi	r2,r2,-6
    f74c:	10c00428 	cmpgeui	r3,r2,16
    f750:	18001a1e 	bne	r3,zero,f7bc <alt_exception_cause_generated_bad_addr+0x88>
    f754:	100690ba 	slli	r3,r2,2
    f758:	00800074 	movhi	r2,1
    f75c:	10bddb04 	addi	r2,r2,-2196
    f760:	1885883a 	add	r2,r3,r2
    f764:	10800017 	ldw	r2,0(r2)
    f768:	1000683a 	jmp	r2
    f76c:	0000f7ac 	andhi	zero,zero,990
    f770:	0000f7ac 	andhi	zero,zero,990
    f774:	0000f7bc 	xorhi	zero,zero,990
    f778:	0000f7bc 	xorhi	zero,zero,990
    f77c:	0000f7bc 	xorhi	zero,zero,990
    f780:	0000f7ac 	andhi	zero,zero,990
    f784:	0000f7b4 	movhi	zero,990
    f788:	0000f7bc 	xorhi	zero,zero,990
    f78c:	0000f7ac 	andhi	zero,zero,990
    f790:	0000f7ac 	andhi	zero,zero,990
    f794:	0000f7bc 	xorhi	zero,zero,990
    f798:	0000f7ac 	andhi	zero,zero,990
    f79c:	0000f7b4 	movhi	zero,990
    f7a0:	0000f7bc 	xorhi	zero,zero,990
    f7a4:	0000f7bc 	xorhi	zero,zero,990
    f7a8:	0000f7ac 	andhi	zero,zero,990
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f7ac:	00800044 	movi	r2,1
    f7b0:	00000306 	br	f7c0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f7b4:	0005883a 	mov	r2,zero
    f7b8:	00000106 	br	f7c0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f7bc:	0005883a 	mov	r2,zero
  }
}
    f7c0:	e037883a 	mov	sp,fp
    f7c4:	df000017 	ldw	fp,0(sp)
    f7c8:	dec00104 	addi	sp,sp,4
    f7cc:	f800283a 	ret

0000f7d0 <exit>:
    f7d0:	defffe04 	addi	sp,sp,-8
    f7d4:	000b883a 	mov	r5,zero
    f7d8:	dc000015 	stw	r16,0(sp)
    f7dc:	dfc00115 	stw	ra,4(sp)
    f7e0:	2021883a 	mov	r16,r4
    f7e4:	000f8840 	call	f884 <__call_exitprocs>
    f7e8:	00800074 	movhi	r2,1
    f7ec:	10860a04 	addi	r2,r2,6184
    f7f0:	11000017 	ldw	r4,0(r2)
    f7f4:	20800f17 	ldw	r2,60(r4)
    f7f8:	10000126 	beq	r2,zero,f800 <exit+0x30>
    f7fc:	103ee83a 	callr	r2
    f800:	8009883a 	mov	r4,r16
    f804:	000fa040 	call	fa04 <_exit>

0000f808 <memcmp>:
    f808:	01c000c4 	movi	r7,3
    f80c:	3980192e 	bgeu	r7,r6,f874 <memcmp+0x6c>
    f810:	2144b03a 	or	r2,r4,r5
    f814:	11c4703a 	and	r2,r2,r7
    f818:	10000f26 	beq	r2,zero,f858 <memcmp+0x50>
    f81c:	20800003 	ldbu	r2,0(r4)
    f820:	28c00003 	ldbu	r3,0(r5)
    f824:	10c0151e 	bne	r2,r3,f87c <memcmp+0x74>
    f828:	31bfff84 	addi	r6,r6,-2
    f82c:	01ffffc4 	movi	r7,-1
    f830:	00000406 	br	f844 <memcmp+0x3c>
    f834:	20800003 	ldbu	r2,0(r4)
    f838:	28c00003 	ldbu	r3,0(r5)
    f83c:	31bfffc4 	addi	r6,r6,-1
    f840:	10c00e1e 	bne	r2,r3,f87c <memcmp+0x74>
    f844:	21000044 	addi	r4,r4,1
    f848:	29400044 	addi	r5,r5,1
    f84c:	31fff91e 	bne	r6,r7,f834 <__alt_data_end+0xfffef834>
    f850:	0005883a 	mov	r2,zero
    f854:	f800283a 	ret
    f858:	20c00017 	ldw	r3,0(r4)
    f85c:	28800017 	ldw	r2,0(r5)
    f860:	18bfee1e 	bne	r3,r2,f81c <__alt_data_end+0xfffef81c>
    f864:	31bfff04 	addi	r6,r6,-4
    f868:	21000104 	addi	r4,r4,4
    f86c:	29400104 	addi	r5,r5,4
    f870:	39bff936 	bltu	r7,r6,f858 <__alt_data_end+0xfffef858>
    f874:	303fe91e 	bne	r6,zero,f81c <__alt_data_end+0xfffef81c>
    f878:	003ff506 	br	f850 <__alt_data_end+0xfffef850>
    f87c:	10c5c83a 	sub	r2,r2,r3
    f880:	f800283a 	ret

0000f884 <__call_exitprocs>:
    f884:	defff504 	addi	sp,sp,-44
    f888:	df000915 	stw	fp,36(sp)
    f88c:	dd400615 	stw	r21,24(sp)
    f890:	dc800315 	stw	r18,12(sp)
    f894:	dfc00a15 	stw	ra,40(sp)
    f898:	ddc00815 	stw	r23,32(sp)
    f89c:	dd800715 	stw	r22,28(sp)
    f8a0:	dd000515 	stw	r20,20(sp)
    f8a4:	dcc00415 	stw	r19,16(sp)
    f8a8:	dc400215 	stw	r17,8(sp)
    f8ac:	dc000115 	stw	r16,4(sp)
    f8b0:	d9000015 	stw	r4,0(sp)
    f8b4:	2839883a 	mov	fp,r5
    f8b8:	04800044 	movi	r18,1
    f8bc:	057fffc4 	movi	r21,-1
    f8c0:	00800074 	movhi	r2,1
    f8c4:	10860a04 	addi	r2,r2,6184
    f8c8:	12000017 	ldw	r8,0(r2)
    f8cc:	45005217 	ldw	r20,328(r8)
    f8d0:	44c05204 	addi	r19,r8,328
    f8d4:	a0001c26 	beq	r20,zero,f948 <__call_exitprocs+0xc4>
    f8d8:	a0800117 	ldw	r2,4(r20)
    f8dc:	15ffffc4 	addi	r23,r2,-1
    f8e0:	b8000d16 	blt	r23,zero,f918 <__call_exitprocs+0x94>
    f8e4:	14000044 	addi	r16,r2,1
    f8e8:	8421883a 	add	r16,r16,r16
    f8ec:	8421883a 	add	r16,r16,r16
    f8f0:	84402004 	addi	r17,r16,128
    f8f4:	a463883a 	add	r17,r20,r17
    f8f8:	a421883a 	add	r16,r20,r16
    f8fc:	e0001e26 	beq	fp,zero,f978 <__call_exitprocs+0xf4>
    f900:	80804017 	ldw	r2,256(r16)
    f904:	e0801c26 	beq	fp,r2,f978 <__call_exitprocs+0xf4>
    f908:	bdffffc4 	addi	r23,r23,-1
    f90c:	843fff04 	addi	r16,r16,-4
    f910:	8c7fff04 	addi	r17,r17,-4
    f914:	bd7ff91e 	bne	r23,r21,f8fc <__alt_data_end+0xfffef8fc>
    f918:	00800034 	movhi	r2,0
    f91c:	10800004 	addi	r2,r2,0
    f920:	10000926 	beq	r2,zero,f948 <__call_exitprocs+0xc4>
    f924:	a0800117 	ldw	r2,4(r20)
    f928:	1000301e 	bne	r2,zero,f9ec <__call_exitprocs+0x168>
    f92c:	a0800017 	ldw	r2,0(r20)
    f930:	10003226 	beq	r2,zero,f9fc <__call_exitprocs+0x178>
    f934:	a009883a 	mov	r4,r20
    f938:	98800015 	stw	r2,0(r19)
    f93c:	00000000 	call	0 <__alt_mem_mem>
    f940:	9d000017 	ldw	r20,0(r19)
    f944:	a03fe41e 	bne	r20,zero,f8d8 <__alt_data_end+0xfffef8d8>
    f948:	dfc00a17 	ldw	ra,40(sp)
    f94c:	df000917 	ldw	fp,36(sp)
    f950:	ddc00817 	ldw	r23,32(sp)
    f954:	dd800717 	ldw	r22,28(sp)
    f958:	dd400617 	ldw	r21,24(sp)
    f95c:	dd000517 	ldw	r20,20(sp)
    f960:	dcc00417 	ldw	r19,16(sp)
    f964:	dc800317 	ldw	r18,12(sp)
    f968:	dc400217 	ldw	r17,8(sp)
    f96c:	dc000117 	ldw	r16,4(sp)
    f970:	dec00b04 	addi	sp,sp,44
    f974:	f800283a 	ret
    f978:	a0800117 	ldw	r2,4(r20)
    f97c:	80c00017 	ldw	r3,0(r16)
    f980:	10bfffc4 	addi	r2,r2,-1
    f984:	15c01426 	beq	r2,r23,f9d8 <__call_exitprocs+0x154>
    f988:	80000015 	stw	zero,0(r16)
    f98c:	183fde26 	beq	r3,zero,f908 <__alt_data_end+0xfffef908>
    f990:	95c8983a 	sll	r4,r18,r23
    f994:	a0806217 	ldw	r2,392(r20)
    f998:	a5800117 	ldw	r22,4(r20)
    f99c:	2084703a 	and	r2,r4,r2
    f9a0:	10000b26 	beq	r2,zero,f9d0 <__call_exitprocs+0x14c>
    f9a4:	a0806317 	ldw	r2,396(r20)
    f9a8:	2088703a 	and	r4,r4,r2
    f9ac:	20000c1e 	bne	r4,zero,f9e0 <__call_exitprocs+0x15c>
    f9b0:	89400017 	ldw	r5,0(r17)
    f9b4:	d9000017 	ldw	r4,0(sp)
    f9b8:	183ee83a 	callr	r3
    f9bc:	a0800117 	ldw	r2,4(r20)
    f9c0:	15bfbf1e 	bne	r2,r22,f8c0 <__alt_data_end+0xfffef8c0>
    f9c4:	98800017 	ldw	r2,0(r19)
    f9c8:	153fcf26 	beq	r2,r20,f908 <__alt_data_end+0xfffef908>
    f9cc:	003fbc06 	br	f8c0 <__alt_data_end+0xfffef8c0>
    f9d0:	183ee83a 	callr	r3
    f9d4:	003ff906 	br	f9bc <__alt_data_end+0xfffef9bc>
    f9d8:	a5c00115 	stw	r23,4(r20)
    f9dc:	003feb06 	br	f98c <__alt_data_end+0xfffef98c>
    f9e0:	89000017 	ldw	r4,0(r17)
    f9e4:	183ee83a 	callr	r3
    f9e8:	003ff406 	br	f9bc <__alt_data_end+0xfffef9bc>
    f9ec:	a0800017 	ldw	r2,0(r20)
    f9f0:	a027883a 	mov	r19,r20
    f9f4:	1029883a 	mov	r20,r2
    f9f8:	003fb606 	br	f8d4 <__alt_data_end+0xfffef8d4>
    f9fc:	0005883a 	mov	r2,zero
    fa00:	003ffb06 	br	f9f0 <__alt_data_end+0xfffef9f0>

0000fa04 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fa04:	defffd04 	addi	sp,sp,-12
    fa08:	df000215 	stw	fp,8(sp)
    fa0c:	df000204 	addi	fp,sp,8
    fa10:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fa14:	0001883a 	nop
    fa18:	e0bfff17 	ldw	r2,-4(fp)
    fa1c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fa20:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fa24:	10000226 	beq	r2,zero,fa30 <_exit+0x2c>
    ALT_SIM_FAIL();
    fa28:	002af070 	cmpltui	zero,zero,43969
    fa2c:	00000106 	br	fa34 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fa30:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fa34:	003fff06 	br	fa34 <__alt_data_end+0xfffefa34>
